<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[[置顶]-博客目录]]></title>
      <url>/9999/12/31/toc/</url>
      <content type="html"><![CDATA[<p>博客文章越来越多，分类和标签已经不能满足快速搜索的要求，将所有的文章列一个目录置顶，直接在本文搜索可以大大提高效率。<br>据目测，本文将会很长很长，而且会一直变长。<br>如果本博客对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br><a id="more"></a></p>
<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><p>非技术类文章。<br><a href="http://higoge.github.io/2015/06/19/essay01/">随笔01：第一篇</a><br><a href="http://higoge.github.io/2015/06/23/essay02/">随笔02：关于海狗哥的流媒体空间资料一些说明</a><br><a href="http://higoge.github.io/2015/08/31/essay03/">随笔03：无题</a></p>
<h2 id="Linux理论"><a href="#Linux理论" class="headerlink" title="Linux理论"></a>Linux理论</h2><p>介绍Linux的理论知识。<br><a href="http://higoge.github.io/2015/07/28/th-linux01/">Linux理论01：Linux发行版的选择</a><br><a href="http://higoge.github.io/2015/07/30/th-linux02/">Linux理论02：CentOS6.6的安装</a><br><a href="http://higoge.github.io/2015/07/31/th-linux03/">Linux理论03：安装VMware Tools和配置共享文件夹</a><br><a href="http://higoge.github.io/2015/08/03/th-linux04/">Linux理论04：网络配置和其他配置</a><br><a href="http://higoge.github.io/2015/08/10/th-linux05/">Linux理论05：Linux的目录结构</a><br><a href="http://higoge.github.io/2015/08/27/th-linux06/">Linux理论06：Linux的启动级别</a><br><a href="http://higoge.github.io/2017/04/02/th-linux07/">Linux理论07：Linux的Swap分区大小</a></p>
<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><p>介绍Linux的基础命令，是每个Linux从业者必须掌握的命令。<br><a href="http://higoge.github.io/2015/08/12/cm-linux01/">Linux命令01：命令的反馈形式</a><br><a href="http://higoge.github.io/2015/08/13/cm-linux02/">Linux命令02：nano编辑器</a><br><a href="http://higoge.github.io/2015/08/17/cm-linux03/">Linux命令03：man</a><br><a href="http://higoge.github.io/2015/08/18/cm-linux04/">Linux命令04：info</a><br><a href="http://higoge.github.io/2015/08/21/cm-linux05/">Linux命令05：重启关机</a><br><a href="http://higoge.github.io/2016/05/15/cm-linux06/">Linux命令06：VIM及快捷键脑图</a><br><a href="http://higoge.github.io/2017/01/26/cm-linux07/">Linux命令07：ls</a><br><a href="http://higoge.github.io/2017/01/28/cm-linux08/">Linux命令08：文件及目录管理(touch/rm/mv/cp/cd/pwd/mkdir)</a><br><a href="http://higoge.github.io/2017/03/19/cm-linux09/">Linux命令09：RPM</a><br><a href="http://higoge.github.io/2017/03/26/cm-linux10/">Linux命令10：Yum</a><br><a href="http://higoge.github.io/2017/04/16/cm-linux11/">Linux命令11：压缩及解压缩命令</a><br><a href="http://higoge.github.io/2018/01/01/cm-linux12/">Linux命令12：locate与updatedb</a><br><a href="https://higoge.coding.me/2018/01/21/cm-linux13/" target="_blank" rel="noopener">Linux命令13：date与hwclock</a></p>
<h2 id="Linux进阶"><a href="#Linux进阶" class="headerlink" title="Linux进阶"></a>Linux进阶</h2><p>介绍Linux的进阶命令和配置，初学者可略过。<br><a href="http://higoge.github.io/2015/07/20/ad-linux01/">Linux进阶01：tmux</a><br><a href="http://higoge.github.io/2015/07/21/ad-linux02/">Linux进阶02：tmux好基友Tmuxinator</a><br><a href="http://higoge.github.io/2015/08/14/ad-linux03/">Linux进阶03：双网卡绑定</a><br><a href="http://higoge.github.io/2015/08/20/ad-linux04/">Linux进阶04：cheat–命令的栗子</a><br><a href="http://higoge.github.io/2015/08/28/ad-linux05/">Linux进阶05：忘记root密码咋办</a><br><a href="http://higoge.github.io/2017/01/12/ad-linux06/">Linux进阶06：Bash常用快捷键</a><br><a href="http://higoge.github.io/2017/02/04/ad-linux07/">Linux进阶07：Linux远程桌面配置</a><br><a href="http://higoge.github.io/2017/02/08/ad-linux08/">Linux进阶08：SSH相关操作</a><br><a href="http://higoge.github.io/2017/03/05/ad-linux09/">Linux进阶09：CentOS的Yum库设置</a><br><a href="http://higoge.github.io/2017/03/12/ad-linux10/">Linux进阶10：Yum本地库制作</a><br><a href="http://higoge.github.io/2017/04/09/ad-linux11/">Linux进阶11：CentOS系统救援</a><br><a href="http://higoge.github.io/2017/04/23/ad-linux12/">Linux进阶12：CentOS第三方库RepoForge(RpmForge)</a><br><a href="http://higoge.github.io/2017/05/07/ad-linux13/">Linux进阶13：rar和7z文件的压缩解压</a><br><a href="http://higoge.github.io/2018/01/14/ad-linux14/">Linux进阶14：NTP对时服务的配置及使用</a><br><a href="http://higoge.github.io/2018/01/28/ad-linux15/">Linux进阶15：Linux下MySQL数据库安装及配置</a></p>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><p>记录大数据开源框架配置和使用的笔记和问题。<br><a href="http://higoge.github.io/2017/08/13/bd01/">大数据01：Hadoop环境搭建</a></p>
<h2 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h2><p>介绍本人包括但不限于Windows的常用工具。<br><a href="http://higoge.github.io/2015/07/15/tools01/">工具01：Cygwin的安装配置</a><br><a href="http://higoge.github.io/2015/07/22/tools02/">工具02：cmd的替代品ConEmu+Clink</a><br><a href="http://higoge.github.io/2015/07/23/tools03/">工具03：PuTTY常用配置</a><br><a href="http://higoge.github.io/2015/07/24/tools04/">工具04：PuTTY的小伙伴PuTTYgen和Plink</a><br><a href="http://higoge.github.io/2015/07/27/tools05/">工具05：XShell</a><br><a href="http://higoge.github.io/2015/07/29/tools06/">工具06：快速打开程序的方法</a><br><a href="http://higoge.github.io/2015/08/04/tools07/">工具07：等宽字体</a><br><a href="http://higoge.github.io/2015/12/08/tools08/">工具08：Hexo博客搭建过程</a><br><a href="http://higoge.github.io/2016/02/15/tools09/">工具09：资源管理器替代者：Total Commander</a><br><a href="http://higoge.github.io/2017/08/06/tools10/">工具10：Windows10的hosts文件修改</a></p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><a href="http://higoge.github.io/2015/12/17/net01/">网络01：双无线路由器无缝对接设置</a><br><a href="http://higoge.github.io/2017/01/24/net02/">网络02：双网卡跨内外网路由设置</a><br><a href="http://higoge.github.io/2017/02/01/net03/">网络03：网络连通性测试的相关命令</a><br><a href="http://higoge.github.io/2017/02/14/net04/">网络04：双路由器无线桥接设置及副路由器设置原则</a></p>
<h2 id="狗急跳墙"><a href="#狗急跳墙" class="headerlink" title="狗急跳墙"></a>狗急跳墙</h2><p>介绍科学上网方法。<br><a href="http://higoge.github.io/2015/07/08/breakwall01/">狗急跳墙01：综述</a><br><a href="http://higoge.github.io/2015/07/09/breakwall02/">狗急跳墙02：GoAgent &amp; GoGo Tester【部分废弃】</a><br><a href="http://higoge.github.io/2015/07/10/breakwall03/">狗急跳墙03：Shadowsocks</a><br><a href="http://higoge.github.io/2015/07/13/breakwall04/">狗急跳墙04：OpenDNS</a><br><a href="http://higoge.github.io/2015/07/14/breakwall05/">狗急跳墙05：VPN Gate【废弃】</a><br><a href="http://higoge.github.io/2015/07/14/breakwall06/">狗急跳墙06：HostsTool【废弃】</a><br><a href="http://higoge.github.io/2015/12/11/breakwall07/">狗急跳墙07：XX-Net</a><br><a href="http://higoge.github.io/2017/11/25/breakwall08/">狗急跳墙08：XX-Net IPv6设置</a></p>
<h2 id="流媒体"><a href="#流媒体" class="headerlink" title="流媒体"></a>流媒体</h2><p>介绍开源流媒体软件相关内容。<br><a href="http://higoge.github.io/2015/07/16/sm01/">流媒体01：VLC-2.2.1编译</a><br><a href="http://higoge.github.io/2015/07/17/sm02/">流媒体02：Linux交叉编译VLC-2.2.1</a><br><a href="http://higoge.github.io/2015/08/19/sm03/">流媒体03：VLC2.2.1的ActiveX编译</a><br><a href="http://higoge.github.io/2015/12/14/sm04/">流媒体04：VLC2.2.1的Linux编译及调试</a></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>介绍计算机基础知识。<br><a href="http://higoge.github.io/2015/06/23/basic01/">基础01：比特、字节及进制</a><br><a href="http://higoge.github.io/2015/06/23/basic02/">基础02：内存的大小端</a><br><a href="http://higoge.github.io/2015/07/02/basic03/">基础03：原码、反码、补码</a><br><a href="http://higoge.github.io/2015/07/02/basic04/">基础04：移码和浮点数的二进制表示</a><br><a href="http://higoge.github.io/2015/08/07/basic05/">基础05：硬盘分区和硬盘模式</a><br><a href="http://higoge.github.io/2015/08/11/basic06/">基础06：开源协议</a></p>
<h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>介绍Git基础知识和基础命令。<br><a href="http://higoge.github.io/2015/07/03/git-basic01/">Git基础01</a><br><a href="http://higoge.github.io/2015/07/03/git-basic02/">Git基础02</a><br><a href="http://higoge.github.io/2015/07/03/git-basic03/">Git基础03</a><br><a href="http://higoge.github.io/2015/07/03/git-basic04/">Git基础04</a><br><a href="http://higoge.github.io/2015/07/07/git-basic05/">Git基础05：Git版本控制的最佳实践</a><br><a href="http://higoge.github.io/2015/07/07/git-basic06/">Git基础06：介绍一个成功的 Git 分支模型</a></p>
<h2 id="Git远程"><a href="#Git远程" class="headerlink" title="Git远程"></a>Git远程</h2><p>介绍Git远程操作和服务搭建。<br><a href="http://higoge.github.io/2015/07/06/git-remote01/">Git远程01：git remote相关操作</a><br><a href="http://higoge.github.io/2015/07/06/git-remote02/">Git远程02：git clone都做了什么</a><br><a href="http://higoge.github.io/2015/07/06/git-remote03/">Git远程03：分支的upstream</a><br><a href="http://higoge.github.io/2015/07/06/git-remote04/">Git远程04：git fetch &amp; git push &amp; git pull</a><br><a href="http://higoge.github.io/2015/07/07/git-remote05/">Git远程05：远程分支的删除与同步</a><br><a href="http://higoge.github.io/2015/07/07/git-remote06/">Git远程06：push.default设置</a><br><a href="http://higoge.github.io/2015/07/07/git-remote07/">Git远程07：远程标签</a><br><a href="http://higoge.github.io/2015/07/07/git-remote08/">Git远程08：关于Git远程仓库操作的一些经验</a><br><a href="http://higoge.github.io/2015/08/05/git-remote09/">Git远程09：Git服务搭建</a><br><a href="http://higoge.github.io/2015/08/06/git-remote10/">Git远程10：搭建私有GitLab</a></p>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>介绍VMware Workstation的操作。<br><a href="http://higoge.github.io/2015/06/24/vm01/">虚拟机01：虚拟机的安装</a><br><a href="http://higoge.github.io/2015/06/24/vm02/">虚拟机02：三种网络模式</a><br><a href="http://higoge.github.io/2015/06/25/vm03/">虚拟机03：网络设置</a><br><a href="http://higoge.github.io/2015/06/25/vm04/">虚拟机04：新建虚拟机-Win7</a><br><a href="http://higoge.github.io/2015/06/26/vm05/">虚拟机05：Win7中安装VMware-Tools</a><br><a href="http://higoge.github.io/2015/06/26/vm06/">虚拟机06：快照与克隆</a><br><a href="http://higoge.github.io/2015/06/29/vm07/">虚拟机07：常用快捷键</a><br><a href="http://higoge.github.io/2015/06/29/vm08/">虚拟机08：通过网卡共享上网</a><br><a href="http://higoge.github.io/2015/06/30/vm09/">虚拟机09：添加永久磁盘</a><br><a href="http://higoge.github.io/2015/06/30/vm10/">虚拟机10：使用U盘及U盘启动</a><br><a href="http://higoge.github.io/2015/07/01/vm11/">虚拟机11：共享文件夹</a><br><a href="http://higoge.github.io/2015/07/01/vm12/">虚拟机12：其他功能</a></p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>介绍存储相关知识。<br><a href="http://higoge.github.io/2015/06/23/openfiler01/">Openfiler01：Openfiler的安装</a><br><a href="http://higoge.github.io/2015/06/23/openfiler02/">Openfiler02：Openfiler的配置</a><br><a href="http://higoge.github.io/2015/06/23/openfiler03/">Openfiler03：open-iscsi安装配置及smbclient的安装</a></p>
<p>~~ EOF ~~</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶15：Linux下MySQL数据库安装及配置]]></title>
      <url>/2018/01/28/ad-linux15/</url>
      <content type="html"><![CDATA[<p>本文以CentOS6.9为例，介绍MySQL数据库的基本安装和配置，最后达到可以远程访问数据库及建库建表的目的。</p>
<a id="more"></a>
<h2 id="安装及启动"><a href="#安装及启动" class="headerlink" title="安装及启动"></a>安装及启动</h2><p>安装命令如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql mysql-server</span><br></pre></td></tr></table></figure></p>
<p>启动命令如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysqld start</span><br><span class="line">Initializing MySQL database:  Installing MySQL system tables...</span><br><span class="line">OK</span><br><span class="line">Filling <span class="built_in">help</span> tables...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place <span class="keyword">for</span> your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To <span class="keyword">do</span> so, start the server, <span class="keyword">then</span> issue the following commands:</span><br><span class="line"></span><br><span class="line">/usr/bin/mysqladmin -u root password <span class="string">'new-password'</span></span><br><span class="line">/usr/bin/mysqladmin -u root -h demo password <span class="string">'new-password'</span></span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> will also give you the option of removing the <span class="built_in">test</span></span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended <span class="keyword">for</span> production servers.</span><br><span class="line"></span><br><span class="line">See the manual <span class="keyword">for</span> more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line"><span class="built_in">cd</span> /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">test</span> the MySQL daemon with mysql-test-run.pl</span><br><span class="line"><span class="built_in">cd</span> /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class="line"></span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br></pre></td></tr></table></figure></p>
<p>自启动配置如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig mysqld on</span><br><span class="line">$ sudo chkconfig --list mysqld</span><br><span class="line">mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure></p>
<h2 id="配置root密码"><a href="#配置root密码" class="headerlink" title="配置root密码"></a>配置root密码</h2><p>有多种方式配置root用户的密码，从上面的第一次启动MySQL服务的信息看，推荐使用<code>mysql_secure_installation</code>配置密码、禁用匿名用户以及删除<code>test</code>数据库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In order to <span class="built_in">log</span> into MySQL to secure it, we<span class="string">'ll need the current</span></span><br><span class="line"><span class="string">password for the root user.  If you'</span>ve just installed MySQL, and</span><br><span class="line">you haven<span class="string">'t set the root password yet, the password will be blank,</span></span><br><span class="line"><span class="string">so you should just press enter here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enter current password for root (enter for none):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK, successfully used password, moving on...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Setting the root password ensures that nobody can log into the MySQL</span></span><br><span class="line"><span class="string">root user without the proper authorisation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set root password? [Y/n] y</span></span><br><span class="line"><span class="string">New password:</span></span><br><span class="line"><span class="string">Re-enter new password:</span></span><br><span class="line"><span class="string">Password updated successfully!</span></span><br><span class="line"><span class="string">Reloading privilege tables..</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">By default, a MySQL installation has an anonymous user, allowing anyone</span></span><br><span class="line"><span class="string">to log into MySQL without having to have a user account created for</span></span><br><span class="line"><span class="string">them.  This is intended only for testing, and to make the installation</span></span><br><span class="line"><span class="string">go a bit smoother.  You should remove them before moving into a</span></span><br><span class="line"><span class="string">production environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Remove anonymous users? [Y/n] y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Normally, root should only be allowed to connect from '</span>localhost<span class="string">'.  This</span></span><br><span class="line"><span class="string">ensures that someone cannot guess at the root password from the network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disallow root login remotely? [Y/n] y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">By default, MySQL comes with a database named '</span><span class="built_in">test</span><span class="string">' that anyone can</span></span><br><span class="line"><span class="string">access.  This is also intended only for testing, and should be removed</span></span><br><span class="line"><span class="string">before moving into a production environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Remove test database and access to it? [Y/n] y</span></span><br><span class="line"><span class="string"> - Dropping test database...</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"> - Removing privileges on test database...</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reloading the privilege tables will ensure that all changes made so far</span></span><br><span class="line"><span class="string">will take effect immediately.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reload privilege tables now? [Y/n] y</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cleaning up...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">All done!  If you'</span>ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> using MySQL!</span><br></pre></td></tr></table></figure></p>
<p>以上操作主要包含以下内容。<br>(1) <code>Enter current password for root (enter for none):</code>，输入root用户密码，第一次设置直接输入回车。<br>(2) <code>Set root password? [Y/n]</code>，设置root用户密码。<br>(3) <code>Remove anonymous users? [Y/n]</code>，删除匿名用户。<br>(4) <code>Disallow root login remotely? [Y/n]</code>，禁用root远程登录。<br>(5) <code>Remove test database and access to it? [Y/n]</code>, 删除<code>test</code>数据库和访问权限。<br>(6) <code>Reload privilege tables now? [Y/n]</code>，重新加载表权限。</p>
<h2 id="登录及退出MySQL"><a href="#登录及退出MySQL" class="headerlink" title="登录及退出MySQL"></a>登录及退出MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>
<h2 id="新建用户及配置权限"><a href="#新建用户及配置权限" class="headerlink" title="新建用户及配置权限"></a>新建用户及配置权限</h2><p>新建learnit用户，可以从任意ip登录(<code>&#39;learnit&#39;@&#39;%&#39;</code>)，访问任意库表(<code>*.*</code>)，密码123456，开通全部权限(<code>ALL PRIVILEGES</code>)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'learnit'</span>@<span class="string">'%'</span></span><br><span class="line">    -&gt; IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p>
<p>测试远程连接MySQL。其中<code>-h</code>参数在非本机访问时使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u learnit -h 192.168.80.6 -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 17</span><br><span class="line">Server version: 5.1.73 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="字符集设置"><a href="#字符集设置" class="headerlink" title="字符集设置"></a>字符集设置</h2><p>MySQL默认字符集是<code>latin1</code>，中文会出乱码，需要修改为<code>utf8</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'character%'</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>修改<code>/etc/my.cnf</code>。内容如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p>
<p>修改完成后重启服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service mysqld restart</span><br></pre></td></tr></table></figure></p>
<p>再次查看字符集，已成功改为<code>utf8</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'character%'</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<h2 id="CentOS7的MySQL数据库安装"><a href="#CentOS7的MySQL数据库安装" class="headerlink" title="CentOS7的MySQL数据库安装"></a>CentOS7的MySQL数据库安装</h2><p>Oracle收购了MySQL后，CentOS组织担心Oracle会对MySQL收费，故CentOS7放弃了MySQL，改用了MariaDB，无法直接通过Yum安装。通过增加MySQL Yum源的方式解决。</p>
<h3 id="获取MySQL-yum源"><a href="#获取MySQL-yum源" class="headerlink" title="获取MySQL yum源"></a>获取MySQL yum源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">$ sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>安装这个包后，会获得两个MySQL的yum repo源。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -1 /etc/yum.repos.d/mysql-community*</span><br><span class="line">/etc/yum.repos.d/mysql-community.repo</span><br><span class="line">/etc/yum.repos.d/mysql-community-source.repo</span><br></pre></td></tr></table></figure></p>
<h3 id="安装MySQL、启动服务和配置自启动"><a href="#安装MySQL、启动服务和配置自启动" class="headerlink" title="安装MySQL、启动服务和配置自启动"></a>安装MySQL、启动服务和配置自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql-server</span><br><span class="line">$ sudo systemctl start mysqld</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>
<p>如果报错，那么与mariadb-server有冲突，将其删除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -e mariadb-server akonadi-mysql</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>(1) 脚本注释<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注释内容</span><br><span class="line"><span class="comment">--  注释内容</span></span><br><span class="line"><span class="comment">/* 注释内容 */</span></span><br></pre></td></tr></table></figure></p>
<p>(2) 竖排显示<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span>\G</span><br></pre></td></tr></table></figure></p>
<p>(3) 显示当前使用的数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令13：date与hwclock]]></title>
      <url>/2018/01/21/cm-linux13/</url>
      <content type="html"><![CDATA[<p>本文介绍Linux时钟设置。</p>
<a id="more"></a>
<h2 id="Linux的两个时间"><a href="#Linux的两个时间" class="headerlink" title="Linux的两个时间"></a>Linux的两个时间</h2><p>1) <strong>硬件时钟</strong>(Hardware Clock)：独立于CPU中运行的任何控制程序运行的时钟，即使在机器关机的情况下也是如此。可以简单理解为主板的时钟。<br>2) <strong>系统时间</strong>(System Time)：由Linux内核中的时钟保持的时间，系统启动时，读取硬件时钟到系统中，作为系统初始化时间，再由内核保持时间运行。</p>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p><code>date</code>命令用于显示和设置<strong>系统时间</strong>。<br>常用参数：<br><code>-s</code>：设置系统时间。<br><code>-u</code>：设置UTC时间。(UTC时间是世界标准时间或世界协调时间)。<br><code>-s</code>后面可以接时间字符串，常用的是<code>2018-01-21 18:00:00</code>或者只写时间<code>18:00:00</code>，还有更多可以识别的字符串，具体可以参考<code>info date</code>中的<code>Date input formats</code>章节。</p>
<h2 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h2><p><code>hwclock</code>命令用于显示和设置<strong>硬件时钟</strong>。所有操作需<code>root</code>权限。<br>常用参数：<br><code>--set</code>：设置时间，后面字符串与<code>date -s</code>的字符串相同。<br><code>-s, --hctosys</code>：设置系统时间与硬件时钟相同。<br><code>-w, --systohc</code>：是指硬件时钟与系统时间相同。</p>
<h2 id="NTP对时设置硬件时钟"><a href="#NTP对时设置硬件时钟" class="headerlink" title="NTP对时设置硬件时钟"></a>NTP对时设置硬件时钟</h2><p><a href="https://higoge.coding.me/2018/01/14/ad-linux14/" target="_blank" rel="noopener">Linux进阶14：NTP对时服务的配置及使用</a>中，NTP同步只同步了系统时间，没有修改硬件时钟。可以通过以下方式进行修改。<br>1) <a href="https://higoge.coding.me/2018/01/14/ad-linux14/#使用ntpdate" target="_blank" rel="noopener">使用ntpdate</a>进行同步时，<code>ntpdate</code>执行成功后，执行写入到硬件时钟。即，<code>crontab -e</code>中，修改如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate 192.168.80.6 &amp;&gt;/dev/null &amp;&amp; hwclock –-systohc</span><br></pre></td></tr></table></figure></p>
<p>2) <a href="https://higoge.coding.me/2018/01/14/ad-linux14/#使用ntpd服务进行同步" target="_blank" rel="noopener">使用NTP服务</a>进行同步时，<code>/etc/sysconfig/ntpd</code>增加一行，内容如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYNC_HWCLOCK=yes</span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶14：NTP对时服务的配置及使用]]></title>
      <url>/2018/01/14/ad-linux14/</url>
      <content type="html"><![CDATA[<p>本文以CentOS6.9为例，介绍NTP对时服务的配置及使用。</p>
<a id="more"></a>
<h2 id="NTP对时服务的配置"><a href="#NTP对时服务的配置" class="headerlink" title="NTP对时服务的配置"></a>NTP对时服务的配置</h2><h3 id="安装及配置自启动"><a href="#安装及配置自启动" class="headerlink" title="安装及配置自启动"></a>安装及配置自启动</h3><p>检查<code>ntpd</code>是否安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -q ntp</span></span><br><span class="line">ntp-4.2.6p5-10.el6.centos.2.x86_64</span><br></pre></td></tr></table></figure></p>
<p>如若没有安装，则执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install ntp</span></span><br></pre></td></tr></table></figure></p>
<p>启动NTP服务及配置NTP服务自启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service ntpd start</span></span><br><span class="line"><span class="comment"># chkconfig ntpd on</span></span><br><span class="line"><span class="comment"># chkconfig --list ntpd</span></span><br><span class="line">ntpd            0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure></p>
<h3 id="配置NTP服务"><a href="#配置NTP服务" class="headerlink" title="配置NTP服务"></a>配置NTP服务</h3><p>配置文件为<code>/etc/ntp.conf</code>。<br>下述的配置文件表示可以任意IP地址进行时间同步，不许做任何修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restrict default kod nomodify notrap nopeer noquery</span><br></pre></td></tr></table></figure></p>
<p>可以单独限制某IP地址段，在配置文件的18行左右。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hosts on local network are less restricted.</span></span><br><span class="line">restrict 192.168.80.0 mask 255.255.255.0 nomodify notrap</span><br></pre></td></tr></table></figure></p>
<p><strong>重要</strong>：如若NTP服务不能连接外网，则需要单独修改<code>server</code>为本地地址<code>127.127.1.0</code>，同时注释掉其他地址，否则NTP服务一直处于连接外网的时间服务器的状态，无法进行同步。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line">server 127.127.1.0 iburst</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br></pre></td></tr></table></figure></p>
<p>修改完成后，请重启服务。</p>
<h2 id="NTP客户端设置"><a href="#NTP客户端设置" class="headerlink" title="NTP客户端设置"></a>NTP客户端设置</h2><h3 id="使用ntpdate"><a href="#使用ntpdate" class="headerlink" title="使用ntpdate"></a>使用ntpdate</h3><p><code>ntpdate</code>命令用于手动同步NTP时间。可以添加<code>-d</code>开启<code>debug</code>模式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpdate 192.168.80.6</span></span><br><span class="line">14 Jan 17:11:12 ntpdate[2268]: adjust time server 192.168.80.6 offset 0.042004 sec</span><br></pre></td></tr></table></figure></p>
<p>可以配置定时任务，进行时间同步，如下述的例子是每30分钟手动同步一次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab -e</span></span><br></pre></td></tr></table></figure></p>
<p>输入如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/30 * * * * /usr/sbin/ntpdate 192.168.80.6 &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure></p>
<p>解释如下。<br>*/30：表示分钟数，*表示任意时刻，/30表示每30分钟。<br>后面四个*：表示任意的小时、天、月、周。<br>/usr/sbin/ntpdate：<code>ntpdate</code>的绝对路径。<br>&amp;：后台执行。<br>>/dev/null：所有的输出都忽略。</p>
<h3 id="使用ntpd服务进行同步"><a href="#使用ntpd服务进行同步" class="headerlink" title="使用ntpd服务进行同步"></a>使用ntpd服务进行同步</h3><p>也可以使用<code>ntpd</code>进行对时，即使用NTP服务同步其他NTP服务。<br>修改<code>/etc/ntp.conf</code>的<code>Public servers</code>，同时，把其他的<code>server</code>注释掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line">server 192.168.80.6 prefer</span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="一个常见的错误"><a href="#一个常见的错误" class="headerlink" title="一个常见的错误"></a>一个常见的错误</h3><p>当NTP服务重启时，需要客户端需要几分钟的时间才能同步。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpdate 192.168.80.6</span></span><br><span class="line">14 Jan 17:10:03 ntpdate[2253]: no server suitable <span class="keyword">for</span> synchronization found</span><br></pre></td></tr></table></figure></p>
<h3 id="ntpstat"><a href="#ntpstat" class="headerlink" title="ntpstat"></a>ntpstat</h3><p><code>ntpstat</code>用于显示NTP服务的状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpstat</span></span><br><span class="line">synchronised to NTP server (115.28.122.198) at stratum 3</span><br><span class="line">   time correct to within 32 ms</span><br><span class="line">   polling server every 256 s</span><br></pre></td></tr></table></figure></p>
<h3 id="ntpq"><a href="#ntpq" class="headerlink" title="ntpq"></a>ntpq</h3><p><code>ntpq</code>用于NTP查询。常用参数是<code>-p</code>，用列表显示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpq -p</span></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line">+120.25.115.19   10.137.38.86     2 u  156  256  377   46.216    1.599   0.807</span><br><span class="line">+ntp4.itcomplian 5.103.128.88     3 u  256  256  377  323.386   -1.026  22.152</span><br><span class="line">*time6.aliyun.co 10.137.38.86     2 u   18  256  377    6.348    2.909   1.105</span><br><span class="line">-ntp7.flashdance 192.36.143.152   2 u  257  256  367  358.442   -5.552  31.094</span><br></pre></td></tr></table></figure></p>
<p>注意两个参数<code>when</code>和<code>poll</code>。<br><code>when</code>：上一次成功请求之后到现在的秒数。<br><code>poll</code>：本地和远程服务器多少时间进行一次同步，单位秒。<br>其他参数具体可参考<code>man</code>手册，和<a href="http://acooly.iteye.com/blog/1993484" target="_blank" rel="noopener">NTP服务及时间同步(CentOS6.x)</a>。</p>
<h3 id="Windows对时"><a href="#Windows对时" class="headerlink" title="Windows对时"></a>Windows对时</h3><p>Windows也可使用Linux自定义的NTP服务。<br>时间和日期==&gt;Internet时间==&gt;更改设置==&gt;修改服务器。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/20.png" alt="NTP"></p>
<h3 id="几个常用的共用的NTP服务"><a href="#几个常用的共用的NTP服务" class="headerlink" title="几个常用的共用的NTP服务"></a>几个常用的共用的NTP服务</h3><p>可以配置到NTP配置的<code>public server</code>里。</p>
<ol>
<li><code>ntp.api.bz</code></li>
<li><code>time.windows.com</code></li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令12：locate与updatedb]]></title>
      <url>/2018/01/01/cm-linux12/</url>
      <content type="html"><![CDATA[<p>最常用的查找文件的命令<code>find</code>，但<code>find</code>是读盘搜索，效率较低。本文介绍<code>locate</code>，可以快速读取<code>mlocate</code>数据库文件，速度非常快。Windows的类似软件是<code>Everything</code>。</p>
<a id="more"></a>
<h2 id="updatedb"><a href="#updatedb" class="headerlink" title="updatedb"></a>updatedb</h2><p>在大多数发行版，如CentOS系统，<code>updatedb</code>每天执行一次，是一个<code>cron</code>的定时任务，即，每天不定时的更新，具体文件是如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat /etc/cron.daily/mlocate</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">nodevs=$(awk <span class="string">'$1 == "nodev" &amp;&amp; $2 != "rootfs" &amp;&amp; $2 != "zfs" &#123; print $2 &#125;'</span> &lt; /proc/filesystems)</span><br><span class="line"></span><br><span class="line">renice +19 -p $$ &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">ionice -c2 -n7 -p $$ &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">/usr/bin/updatedb -f <span class="string">"<span class="variable">$nodevs</span>"</span></span><br></pre></td></tr></table></figure></p>
<p>当系统刚刚建立时，或者新增、删除文件时，<code>mlocate</code>的数据库文件并不能同步更新，需要使用<code>root</code>用户手动执行<code>updatedb</code>命令进行更新。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># updatedb</span></span><br></pre></td></tr></table></figure></p>
<h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>当<code>mlocate</code>文件建立是，则可以使用<code>locate</code>命令查找文件。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-b</code>：只匹配base name。<br><code>-e</code>：只显示存在的文件。<br><code>-i</code>：忽略大小写。<br><code>-r</code>：正则表达式</p>
<h3 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><p>1) 查找包含<code>passwd</code>的文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locate passwd</span><br></pre></td></tr></table></figure></p>
<p>2) 精确查找名叫<code>passwd</code>的文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locate -b <span class="string">'\passwd'</span></span><br></pre></td></tr></table></figure></p>
<p>3) 查找以<code>passwd</code>结尾的文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locate <span class="string">'*passwd'</span></span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙08：XX-Net IPv6设置]]></title>
      <url>/2017/11/25/breakwall08/</url>
      <content type="html"><![CDATA[<p>前一阵网络封锁的很厉害，导致XX-Net的IP持续搜索不到，失去了中转的通道。通过开启IPv6可以解决，并且由于IPv6使用人数较少，速度反而比之前更快。<br>本文介绍Windows 10的设置方式。XX-Net需要下载到最新版，当前稳定版是<code>3.8.3</code>。<br>关于Windows 10的版本，使用快捷键<code>Win+I</code>-&gt;系统-&gt;关于-&gt;Windows规格，进行查看。</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/bw08/01.png" alt="01.png"></p>
<h3 id="家庭版"><a href="#家庭版" class="headerlink" title="家庭版"></a>家庭版</h3><p>开启管理员命令行，快捷键<code>Win+X</code>-&gt;<code>A</code>。输入如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh interface teredo set state enterpriseclient server=default</span><br><span class="line">netsh interface ipv6 reset</span><br></pre></td></tr></table></figure></p>
<p>重启，然后再次开启管理员命令行。输入如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface teredo set state server=teredo.remlab.net</span><br></pre></td></tr></table></figure></p>
<p>如若不成功，可以执行如下命令后，从第一个命令再次执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh interface Teredo set state disable</span><br><span class="line">netsh interface Teredo set state type=default</span><br></pre></td></tr></table></figure></p>
<p>最后进行测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping -6 ipv6.test-ipv6.com</span><br><span class="line">netsh int teredo show state</span><br></pre></td></tr></table></figure></p>
<p>效果如图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw08/02.png" alt="02.png"></p>
<h3 id="企业版-专业版"><a href="#企业版-专业版" class="headerlink" title="企业版/专业版"></a>企业版/专业版</h3><p>开启本地组策略编辑器，<code>Win+R</code>-&gt;<code>gpedit.msc</code>，计算机配置-&gt;管理模板-&gt;网络-&gt;TCPIP设置-&gt;IPv6转换技术<br>1) 6to4状态，改为<strong>已启用</strong>。<br>2) ISATAP状态，改为<strong>已启用</strong>。<br>3) Teredo默认限定，改为<strong>已启用</strong>。<br>4) Teredo状态，改为<strong>企业客户端</strong>。<br>5) Teredo服务器名称，改为<strong>teredo.remlab.net</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw08/03.png" alt="03.png"><br><img src="https://raw.githubusercontent.com/higoge/image/master/bw08/04.png" alt="04.png"></p>
<h3 id="可选用的teredo服务"><a href="#可选用的teredo服务" class="headerlink" title="可选用的teredo服务"></a>可选用的teredo服务</h3><p>如下服务可以进行替换，前提是能够<code>ping</code>通。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">teredo.remlab.net / teredo-debian.remlab.net (Germany)</span><br><span class="line">teredo.autotrans.consulintel.com (Spain)</span><br><span class="line">teredo.ipv6.microsoft.com (USA, Redmond) (default for WindowsXP/2003/Vista/2008 OS)</span><br><span class="line">teredo.ngix.ne.kr (South Korea)</span><br><span class="line">teredo.managemydedi.com (USA, Chicago)</span><br><span class="line">teredo.trex.fi (Finland)</span><br></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他操作系统如何开启IPv6，请参考XX-Net的官方文档<a href="https://github.com/XX-net/XX-Net/wiki/%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFIPv6" target="_blank" rel="noopener">如何开启IPv6</a></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
            <tag> XX-Net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据01：Hadoop环境搭建]]></title>
      <url>/2017/08/13/bd01/</url>
      <content type="html"><![CDATA[<p>本系列简要记录Hadoop相关的知识点及遇到的问题。<br><a id="more"></a></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>到文章发表为止，Hadoop的主要分支是<code>2.7.X</code>和<code>2.8.X</code>，二者在基本配置没有任何差别，但实际测试中，<code>2.7</code>分支的最新版<code>2.7.4</code>出现了诸多莫名其妙的问题，如内存不够无法启动，<code>SSH</code>掉线等。所以使用<code>2.8.1</code>版本进行搭建。但请注意<code>2.8.1</code>的<code>Release Note</code>，不要用于商用版本。</p>
<blockquote>
<p>Please note that 2.8.x release line continues to be not yet ready for production use. Critical issues are being ironed out via testing and downstream adoption. Production users should wait for a subsequent release in the 2.8.x line.</p>
</blockquote>
<p>所有操作都在<code>Linux</code>上进行，所以需要有一定的<code>Linux</code>操作经验。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>CentOS6.9</td>
</tr>
<tr>
<td>安装方式</td>
<td>Minimal</td>
</tr>
<tr>
<td>CPU</td>
<td>1处理器 2内核</td>
</tr>
<tr>
<td>内存</td>
<td>1024M</td>
</tr>
<tr>
<td>硬盘</td>
<td>20GB</td>
</tr>
<tr>
<td>分区</td>
<td>Swap: 2G; /home: 20G; /: 18G</td>
</tr>
</tbody>
</table>
<h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><p>(1) 添加Hadoop用户并设置为sudoer.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># visudo</span></span><br></pre></td></tr></table></figure></p>
<p>去掉<code>%wheel ALL=(ALL) ALL</code>的<code>#</code>注释(98行)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># useradd hadoop -G wheel</span></span><br><span class="line"><span class="comment"># passwd hadoop</span></span><br><span class="line"><span class="comment"># su hadoop -</span></span><br></pre></td></tr></table></figure></p>
<p>(2) 配置网络及防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/sysconfig/network-script/ifcfg-eth0</span><br></pre></td></tr></table></figure></p>
<p>其中<code>ONBOOT</code>修改为<code>yes</code>，<code>BOOTPROTO</code>修改为<code>none</code>，<code>ARPCHECK</code>及网络相关的内容，为新增内容。内容参考如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:EC:04:2B</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=f6cd105c-e861-46dd-9f74-c9194fcce20b</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">ARPCHECK=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">IPADDR=192.168.80.30</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.80.1</span><br><span class="line">DNS1=192.168.80.1</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure>
<p>修改域名为<code>NN</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOSTNAME=NN</span><br></pre></td></tr></table></figure></p>
<p>关闭防火墙。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig iptables off</span><br></pre></td></tr></table></figure></p>
<p>重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></p>
<p>(3) SSH配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir .ssh</span><br><span class="line">$ <span class="built_in">echo</span> [publick_key] &gt;&gt; .ssh/authorized_keys</span><br><span class="line">$ chmod 700 .ssh</span><br><span class="line">$ chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p><code>publick_key</code>修改为客户端(如Windows)的共有key的内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/sysconfig/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>
<p>修改如下内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UseDNS no</span><br><span class="line">GSSAPIAuthentication no</span><br><span class="line">MaxStartups 100</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></table></figure>
<p>(4) Yum源配置<br>使用本地CDROM作为Yum源。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /etc/yum.repos.d/*</span><br><span class="line">$ sudo vi /etc/yum.repos.d/cdrom.repo</span><br></pre></td></tr></table></figure></p>
<p>内容如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[cdrom]</span><br><span class="line">name=cdrom</span><br><span class="line">baseurl=file:///media/</span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount /dev/cdrom /media</span><br></pre></td></tr></table></figure>
<p>也可以用iso文件进行挂载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -o loop [.iso] /mdeia</span><br></pre></td></tr></table></figure></p>
<p>重建Yum缓存。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum clean all &amp;&amp; sudo yum makecache</span><br></pre></td></tr></table></figure></p>
<p>(5) 安装SSH客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y openssh-clients</span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 大数据 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BigData </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具10：Windows10的hosts文件修改]]></title>
      <url>/2017/08/06/tools10/</url>
      <content type="html"><![CDATA[<p>Windows10的hosts文件没有办法像Windows7直接进行修改，本文记录修改过程。<br><a id="more"></a></p>
<ul>
<li><code>win+r</code>开启运行对话框，输入<code>C:\Windows\System32\drivers\etc</code>，在hosts文件右键，选择安全标签。点击<strong>高级</strong>按钮。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/04.png" alt="04.png"></li>
<li>点击<strong>更改权限</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/05.png" alt="05.png"></li>
<li>点击<strong>添加</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/06.png" alt="06.png"></li>
<li>点击<strong>选择主体</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/07.png" alt="07.png"></li>
<li>点击<strong>高级</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/08.png" alt="08.png"></li>
<li>点击<strong>立即查找</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/09.png" alt="09.png"></li>
<li>选中本机用户。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/10.png" alt="10.png"></li>
<li>点击<strong>确定</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/11.png" alt="11.png"></li>
<li>点击<strong>完全控制</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/12.png" alt="12.png"></li>
<li>一路确定，最后点击<strong>是</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/13.png" alt="13.png"></li>
</ul>
<p>这样就完成了设置。hosts的修改规则是先写<code>IP</code>，后写<code>域名</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.80.30 NN</span><br><span class="line">192.168.80.31 S1</span><br></pre></td></tr></table></figure></p>
<p>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hosts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶13：rar和7z文件的压缩解压]]></title>
      <url>/2017/05/07/ad-linux13/</url>
      <content type="html"><![CDATA[<p>本文介绍<code>rar</code>和<code>7z</code>文件的压缩和解压，相关<code>RPM</code>包需到<a href="http://higoge.github.io/2017/04/23/ad-linux12/">RepoForge</a>去下载。</p>
<a id="more"></a>
<h2 id="rar压缩解压"><a href="#rar压缩解压" class="headerlink" title="rar压缩解压"></a>rar压缩解压</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install rar</span></span><br></pre></td></tr></table></figure>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rar a 01.rar 01   <span class="comment"># 01可以是文件也可以是目录</span></span><br></pre></td></tr></table></figure>
<h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rar e 01.rar</span><br><span class="line">$ rar x 01.rar</span><br></pre></td></tr></table></figure>
<p><code>e</code>和<code>x</code>的区别是，<code>e</code>表示保留不原有的目录结构，文件直接解压当前目录，有相同命名的文件进行提醒是覆盖还是自动重命名。<code>x</code>表示保留原有的目录结构。<br><strong>注</strong>：解压不要安装<code>unrar</code>命令，因为此命令对目录结构的解压是完全混乱的。</p>
<h3 id="显示和检测"><a href="#显示和检测" class="headerlink" title="显示和检测"></a>显示和检测</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rar l 01.rar <span class="comment"># 显示01.rar的内容，但没有目录结构信息</span></span><br><span class="line">$ rar t 01.rar <span class="comment"># 测试01.rar，同时显示目录结构</span></span><br></pre></td></tr></table></figure>
<h2 id="7z压缩解压"><a href="#7z压缩解压" class="headerlink" title="7z压缩解压"></a>7z压缩解压</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install p7zip</span></span><br></pre></td></tr></table></figure>
<h3 id="压缩-1"><a href="#压缩-1" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 7za a 01.7z 01    <span class="comment"># 01可以是文件也可以是目录</span></span><br></pre></td></tr></table></figure>
<h3 id="解压缩-1"><a href="#解压缩-1" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ 7za e 01.7z</span><br><span class="line">$ 7za x 01.7z</span><br></pre></td></tr></table></figure>
<p><code>e</code>和<code>x</code>同上。</p>
<h3 id="显示和检测-1"><a href="#显示和检测-1" class="headerlink" title="显示和检测"></a>显示和检测</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ 7za l 01.7z <span class="comment"># 显示01.7z的内容</span></span><br><span class="line">$ 7za t 01.7z <span class="comment"># 测试01.7z，同时显示目录结构</span></span><br></pre></td></tr></table></figure>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶12：CentOS第三方库RepoForge(RpmForge)]]></title>
      <url>/2017/04/23/ad-linux12/</url>
      <content type="html"><![CDATA[<p>CentOS很多软件没有直接提供Yum下载，RepoForge(原RPMForge)则提供了第三方软件的下载。</p>
<a id="more"></a>
<p><strong>注</strong>:<br>1) RepoForge需要联网使用。需要根据系统确定好<a href="http://repoforge.org/use" target="_blank" rel="noopener">安装版本</a>。<br>2) <a href="http://repoforge.org/" target="_blank" rel="noopener">RepoForge官网</a>提示，因为已经很久没有更新，所以有些包可能不是最新的。但有些工具能用即可，不需要安装最新的包。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>以CentOS6.x为例。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget http://repository.it4i.cz/mirrors/repoforge/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</span></span><br><span class="line"><span class="comment"># rpm -ivh rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</span></span><br><span class="line"><span class="comment"># yum clean all &amp;&amp; yum makecache</span></span><br></pre></td></tr></table></figure></p>
<h2 id="停用"><a href="#停用" class="headerlink" title="停用"></a>停用</h2><p>将<code>/etc/yum.repos.d/rpmforge.repo</code>中的<code>enabled=1</code>改为<code>enabled=0</code>即可，日常的<code>yum update</code>可以停用RepoForge。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令11：压缩及解压缩命令]]></title>
      <url>/2017/04/16/cm-linux11/</url>
      <content type="html"><![CDATA[<p>本文介绍Linux下常见压缩包的压缩和解压缩命令，主要有<code>zip</code>包和<code>tar</code>包。</p>
<a id="more"></a>
<h2 id="常见的压缩包"><a href="#常见的压缩包" class="headerlink" title="常见的压缩包"></a>常见的压缩包</h2><p><code>.zip</code>：zip压缩文件<br><code>.tar</code>：tar文件，未压缩<br><code>.tar.gz(.tgz)</code>：tar文件，通过gzip压缩<br><code>.tar.bz</code>：tar文件，通过bzip2压缩<br><code>.tar.xz</code>：tar文件，通过xz压缩</p>
<p><strong>注意</strong>：</p>
<ol>
<li>gzip、bzip2、xz只能压缩单个文件，无法压缩多个文件。所以要先将多个文件打包成tar包再进行压缩。</li>
<li>压缩比：xz &gt; bz2 &gt; gz &gt; zip。</li>
</ol>
<h2 id="zip包压缩及解压"><a href="#zip包压缩及解压" class="headerlink" title="zip包压缩及解压"></a>zip包压缩及解压</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>1) <code>unzip</code>：zip包解压缩命令<br><code>-d</code>：指定到解压目录</p>
<p>2) <code>zip</code>：zip包压缩命令<br><code>-r</code>：递归打包</p>
<h3 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><p>1) 解压zip包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip xx.zip -d /tmp</span><br></pre></td></tr></table></figure></p>
<p>2) 压缩文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip 1.zip 1.txt</span><br></pre></td></tr></table></figure></p>
<p>3) 压缩文件夹<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip 1.zip -r /tmp/1</span><br></pre></td></tr></table></figure></p>
<h2 id="tar包压缩及解压"><a href="#tar包压缩及解压" class="headerlink" title="tar包压缩及解压"></a>tar包压缩及解压</h2><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar [参数] 文件名 -C 目的目录</span><br></pre></td></tr></table></figure>
<p><strong>常用参数</strong>:<br><code>-x</code>：解压<br><code>-c</code>：压缩<br><code>-z</code>：gzip包解压<br><code>-j</code>：bzip2包解压<br><code>-J</code>：xz包解压<br><code>-v</code>：显示当前解压的文件<br><code>-f</code>：后面跟文件名<br><code>-C</code>：解压到目录<br><code>-t</code>：查看压缩文件的内容</p>
<h3 id="肌肉训练-1"><a href="#肌肉训练-1" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><p>1) 解压<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar xzvf xx.tar.gz -C /tmp    <span class="comment">#解压.tar.gz到/tmp</span></span><br><span class="line">$ tar xjvf xx.tar.bz2 -C /tmp   <span class="comment">#解压.tar.bz2到/tmp</span></span><br><span class="line">$ tar xJvf xx.tar.xz -C /tmp    <span class="comment">#解压.tar.xz到/tmp</span></span><br></pre></td></tr></table></figure></p>
<p>2) 压缩<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar czvf xx.tar.gz /tmp       <span class="comment">#将/tmp压缩.tar.gz</span></span><br><span class="line">$ tar cjvf xx.tar.bz2  /tmp     <span class="comment">#将/tmp压缩.tar.bz2</span></span><br><span class="line">$ tar cJvf xx.tar.xz /tmp       <span class="comment">#将/tmp压缩.tar.xz</span></span><br></pre></td></tr></table></figure></p>
<p>3) 查看压缩包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar tf xx.tar.xz</span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶11：CentOS系统救援]]></title>
      <url>/2017/04/09/ad-linux11/</url>
      <content type="html"><![CDATA[<p>前两天同事升级<code>glibc</code>库，把<code>libc.so.6</code>指向到新的位置，与系统产生了不兼容，导致了<code>kernel panic</code>，使用<a href="http://higoge.github.io/2015/08/28/ad-linux05/">Linux进阶05：忘记root密码咋办</a>中在<code>grub</code>中添加<code>single</code>也无法进入系统。只能使用系统安全盘进行救援，过程记录在此。</p>
<a id="more"></a>
<p>1) 插入系统盘，并选择CD-Rom启动，进入CentOS的安装界面。选择<code>Rescue installed system</code>。</p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/17.png" alt="17.png"></p>
<p>2) 语言选择默认，键盘选择默认。<br>3) <code>Setup Networking</code>页，选择<code>No</code>。<br>4) <code>Rescue</code>页选择<code>Continue</code>和两个<code>OK</code>。<br>5) 给出的三种选项，选择<code>shell Start shell</code>。</p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/18.png" alt="18.png"></p>
<p>6) 启动了一个命令行，分别输入如下指令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount -o remount rw /</span></span><br><span class="line"><span class="comment"># chroot /mnt/sysimage/ # 报错，libc.so.6相关的错误</span></span><br><span class="line"><span class="comment"># cd /mnt/sysimage/lib64</span></span><br><span class="line"><span class="comment"># ln -sf libc-2.12.so libc.so.6</span></span><br><span class="line"><span class="comment"># chroot /mnt/sysimage # 成功</span></span><br><span class="line"><span class="comment"># exit # 退出shell</span></span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/19.png" alt="19.png"></p>
<p><strong>注</strong>：如果启用了<code>SELinux</code>，那么启动过程时间较长。</p>
<p><strong>特别强调</strong>：尽量不要使用<code>root</code>用户进行操作。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论07：Linux的Swap分区大小]]></title>
      <url>/2017/04/02/th-linux07/</url>
      <content type="html"><![CDATA[<p>Linux中的Swap空间在物理内存（RAM）数量已满时使用。 如果系统需要更多的内存资源并且RAM已满，则内存中的不活动页面将移至交换空间。 因为交换空间位于硬盘上，其访问时间比物理内存慢。本文介绍下Swap分区大小与物理内存的关系。</p>
<a id="more"></a>
<h2 id="RedHat推荐大小"><a href="#RedHat推荐大小" class="headerlink" title="RedHat推荐大小"></a>RedHat推荐大小</h2><table>
<thead>
<tr>
<th>内存大小</th>
<th>Swap大小</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;=4GB</td>
<td>&gt;=2GB</td>
</tr>
<tr>
<td>4GB ~ 16GB</td>
<td>&gt;=4GB</td>
</tr>
<tr>
<td>16GB ~ 64GB</td>
<td>&gt;=8GB</td>
</tr>
<tr>
<td>64GB ~ 256GB</td>
<td>&gt;=16GB</td>
</tr>
<tr>
<td>256GB ~ 512GB</td>
<td>&gt;=32GB</td>
</tr>
</tbody>
</table>
<h2 id="CentOS-Fedora推荐大小"><a href="#CentOS-Fedora推荐大小" class="headerlink" title="CentOS/Fedora推荐大小"></a>CentOS/Fedora推荐大小</h2><table>
<thead>
<tr>
<th>内存大小</th>
<th>Swap大小</th>
<th>允许休眠的Swap大小</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;=2GB</td>
<td>内存2倍</td>
<td>内存3倍</td>
</tr>
<tr>
<td>2GB ~ 8GB</td>
<td>与内存相同</td>
<td>内存2倍</td>
</tr>
<tr>
<td>8GB ~ 64GB</td>
<td>4GB ~ 内存大小0.5倍</td>
<td>内存1.5倍</td>
</tr>
<tr>
<td>&gt;=64GB</td>
<td>至少4GB，根据负载确定</td>
<td>不推荐休眠</td>
</tr>
</tbody>
</table>
<h2 id="Oracle推荐大小"><a href="#Oracle推荐大小" class="headerlink" title="Oracle推荐大小"></a>Oracle推荐大小</h2><table>
<thead>
<tr>
<th>内存大小</th>
<th>Swap大小</th>
</tr>
</thead>
<tbody>
<tr>
<td>1GB ~ 2GB</td>
<td>内存1.5倍</td>
</tr>
<tr>
<td>2GB ~ 16GB</td>
<td>与内存相同</td>
</tr>
<tr>
<td>&gt;=16GB</td>
<td>16GB</td>
</tr>
</tbody>
</table>
<p>根据服务器实际负载，设置Swap分区大小。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令09：Yum]]></title>
      <url>/2017/03/26/cm-linux10/</url>
      <content type="html"><![CDATA[<p>YUM完全可以替代RPM命令。本文介绍<code>Yum</code>命令。</p>
<a id="more"></a>
<h2 id="使用前准备"><a href="#使用前准备" class="headerlink" title="使用前准备"></a>使用前准备</h2><p>使用Yum命令需要先配置好Yum库。请参考：<a href="http://higoge.github.io/2017/03/05/ad-linux09/">Linux进阶09：CentOS的Yum库设置</a>以及<a href="http://higoge.github.io/2017/03/12/ad-linux10/">Linux进阶10：Yum本地库制作</a></p>
<h2 id="常用指令解释"><a href="#常用指令解释" class="headerlink" title="常用指令解释"></a>常用指令解释</h2><p><code>yum install xxx</code>: 安装XXX，参数<code>-y</code>，自动确认<br><code>yum update [xxx]</code>: 更新<br><code>yum remove xxx</code>: 删除<br><code>yum clean all</code>: 清空缓存<br><code>yum info xxx</code>: 显示XXX包信息<br><code>yum localinstall A.rpm</code>: 本地安装A.rpm包，并自动安装关联包<br><code>yum makecache</code>: 建立缓存<br><code>yum grouplist</code>: 显示所有的组<br><code>yum groupinstall Group1</code>: 安装Group1套件<br><code>yum groupinfo Group1</code>: 显示Group1套件的信息<br><code>yum search [all] xxx</code>: 查询XXX包，<code>all</code>，同时查询描述信息<br><strong>注</strong>：执行安装删除等<code>yum</code>指令需要root用户，查询指令不需要root用户。</p>
<h2 id="常用套件"><a href="#常用套件" class="headerlink" title="常用套件"></a>常用套件</h2><p><code>yum grouplist</code>会显示已安装的套件及可安装的套件。经常需要安装的套件是包含<code>gcc</code>，<code>g++</code>等基础开发环境的<code>Development Tools</code>，以及桌面环境<code>Desktop</code>。<br>安装<code>Development Tools</code>命令如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum groupinstall -y Development Tools</span></span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令09：RPM]]></title>
      <url>/2017/03/19/cm-linux09/</url>
      <content type="html"><![CDATA[<p>RPM是RPM Package Manager的缩写，是RedHat系发行版的主要的软件包管理工具。本文介绍RPM的基本命令。</p>
<a id="more"></a>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul>
<li><code>-i</code>: 安装install<ul>
<li><code>-v</code>: 显示详细安装信息。</li>
<li><code>-h</code>: 显示安装进度，配合-v会得到更好的显示。</li>
</ul>
</li>
<li><code>-q</code>: 查询query<ul>
<li><code>-a</code>: 查询所有的安装包</li>
</ul>
</li>
<li><code>-e</code>: 删除erase</li>
</ul>
<h2 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h2><p>1) 安装包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh unzip-6.0-5.el6.x86_64.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>2) 删除包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -e unzip</span></span><br></pre></td></tr></table></figure></p>
<p>3) 查询包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -q unzip</span><br></pre></td></tr></table></figure></p>
<p>4) 模糊查询包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep un</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果安装包有依赖关系，如安装<code>A.rpm</code>需要先安装<code>B.rpm</code>，<code>B.rpm</code>需要先安装<code>C.rpm</code>，那么需同时找齐<code>ABC</code>三个RPM包。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh A.rpm B.rpm C.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>很多时候，找依赖关系是很麻烦的事情，另外，安装位置也不好确定。所以一般不推荐使用RPM安装包。系统工具包一般使用Yum安装。如果有二进制压缩包，如JDK，直接使用非root用户解压使用。如果只提供RPM包，则用本文指令安装和删除，也可以用<code>yum localinstall A.rpm</code>安装。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶10：Yum本地库制作]]></title>
      <url>/2017/03/12/ad-linux10/</url>
      <content type="html"><![CDATA[<p><a href="http://higoge.github.io/2017/03/05/ad-linux09/">Linux进阶09：CentOS的Yum库设置</a>介绍了在线的Yum库和离线的Yum库。但是因为CentOS的ISO文件有4G，携带不方便。本文介绍本地Yum库的制作。</p>
<a id="more"></a>
<h2 id="安装需要的工具包"><a href="#安装需要的工具包" class="headerlink" title="安装需要的工具包"></a>安装需要的工具包</h2><p>需要三个工具包：<code>createrepo</code>、<code>genisoimage</code>、<code>yum-utils</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y createrepo genisoimage yum-utils</span></span><br></pre></td></tr></table></figure></p>
<h2 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h2><p>以安装<code>git</code>为例，首先下载与git安装相关的所有的包。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yumdownloader --resolve git --destdir ~/myrepo</span><br></pre></td></tr></table></figure></p>
<p><code>--resolve</code>：表示检测相关联的包。<br><code>--destdir</code>：表示下载的位置。</p>
<h2 id="制作本地库"><a href="#制作本地库" class="headerlink" title="制作本地库"></a>制作本地库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ createrepo ~/myrepo/</span><br></pre></td></tr></table></figure>
<h2 id="打包传输"><a href="#打包传输" class="headerlink" title="打包传输"></a>打包传输</h2><p>打包有两种方式，一种是打包成tar包，一种是ISO文件。<br>tar包：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar czvf myrepo.tar.gz ~/myrepo</span><br></pre></td></tr></table></figure></p>
<p>ISO文件：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ genisoimage -r -o myrepo.iso ~/myrepo</span><br></pre></td></tr></table></figure></p>
<p><code>myrepo.tar.gz</code>和<code>myrepo.iso</code>就可以复制到其他机器上，进行解压或挂载。<br>注意：<br><code>/etc/repo.d/cdrom.repo</code>中<code>baseurl=file:///media/</code>改成实际地址（tar包解压路径或ISO挂载地址）即可。<code>file://</code>是本地文件协议，第三个<code>/</code>开始表示根路径。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶09：CentOS的Yum库设置]]></title>
      <url>/2017/03/05/ad-linux09/</url>
      <content type="html"><![CDATA[<p>本文介绍下CentOS的Yum在线库和离线库的设置。</p>
<a id="more"></a>
<h2 id="在线库"><a href="#在线库" class="headerlink" title="在线库"></a>在线库</h2><p>CentOS默认在线库，因为是国外的服务器，所以下载速度非常慢。推荐更换为<strong>163.com</strong>的在线库。可以参考<a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">163.com的CentOS的使用帮助</a><br>以下以<strong>CentOS6.x</strong>为例。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rm –rf /etc/yum.repos.d/*</span></span><br><span class="line"><span class="comment"># wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span></span><br><span class="line"><span class="comment"># mv CentOS6-Base-163.repo /etc/yum.repos.d/</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：<br>CentOS6-Base-163.repo文件中的<code>gpgcheck=1</code>改为<code>gpgcheck=0</code>，因为<a href="http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6" target="_blank" rel="noopener">gpgkey</a>有可能无法访问，导致无法验证下载的rpm包。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i "s/gpgcheck=1/gpgcheck=0/g" /etc/yum.repos.d/CentOS6-Base-163.repo</span></span><br><span class="line"><span class="comment"># yum clean all &amp;&amp; yum makecache</span></span><br></pre></td></tr></table></figure></p>
<h2 id="离线库"><a href="#离线库" class="headerlink" title="离线库"></a>离线库</h2><p>当CentOS服务无法上网时，可以使用CentOS的安装ISO文件作为本地离线Yum库，通过挂载ISO文件或CD-ROM来实现。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rm -rf /etc/yum.repos.d/* # 删除原有所有源</span></span><br><span class="line"><span class="comment"># mount -o loop CentOS-6.9-x86_64-bin-DVD1.iso /media/ # 挂载CentOS的iso文件到/media</span></span><br><span class="line"><span class="comment"># vi /etc/yum.repos.d/cdrom.repo</span></span><br></pre></td></tr></table></figure></p>
<p>内容如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[cdrom]</span><br><span class="line">name=cdrom</span><br><span class="line">baseurl=file:///media/ <span class="comment"># 本地yum源地址</span></span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></p>
<p>再重新更新yum缓存<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum clean all &amp;&amp; yum makecache</span></span><br></pre></td></tr></table></figure></p>
<p>或者直接挂在CD-ROM，其他步骤同上。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount /dev/cdrom /media</span></span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络04：双路由器无线桥接设置及副路由器设置原则]]></title>
      <url>/2017/02/14/net04/</url>
      <content type="html"><![CDATA[<p>最近搭建了两个路由器的无线桥接，因为不方便重新布线，无线桥接可以较好的解决无线信号放大的问题。<br><a id="more"></a></p>
<h2 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程"></a>设置过程</h2><h3 id="主路由器设置"><a href="#主路由器设置" class="headerlink" title="主路由器设置"></a>主路由器设置</h3><ol>
<li>WAN口设置。</li>
<li>LAN口设置。</li>
<li>DHCP设置。</li>
<li>无线设置，包括SSID，密码以及信道。<strong>注意</strong>：信道需要固定，而不要设置为自动。</li>
</ol>
<h3 id="副路由器设置"><a href="#副路由器设置" class="headerlink" title="副路由器设置"></a>副路由器设置</h3><ol>
<li>关闭DHCP。</li>
<li>LAN口设置，不要与主路由器的LAN口设置为相同的地址，也不要设置为主路由器的DHCP地址池的地址。</li>
<li>无线设置，设施SSID与主路由器相同，密码与主路由器相同，信道与主路由器相同。</li>
<li>开启WDS功能，点击扫描，找到主路由器的SSID，点击连接，最后输入密钥。<br><img src="https://raw.githubusercontent.com/higoge/image/master/network/04.png" alt="04"><br><img src="https://raw.githubusercontent.com/higoge/image/master/network/05.png" alt="05"></li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>副路由器的信道必须与主路由器相同。</li>
<li>副路由器的SSID和接入密码，可以与主路由器不同，但如果在两个路由器都能覆盖到的位置，移动设备不会切换信号。这就导致就算某个路由器信号更强，设备也不会去连接。所以建议设置两个路由器相同的的SSID和接入密码。</li>
<li>副路由器接入，最好采用星型拓扑结构。主路由器为A，副路由器B和C，那么接入方式为副路由器B→主路由器A←副路由器C。最好不要采用直线型拓扑结构，如副路由器C→副路由器B→主路由器A，若必须使用直线型结构，不要超过<strong>三级</strong>。</li>
<li>为保证桥接成功且运行稳定，副路由器扫描主路由器的信号强度大于<strong>20dB</strong>。</li>
<li>如果主路由器和副路由器隐藏了SSID，可能会因距离问题导致的连接不成功。此现象需要具体问题具体分析。本汪在试验中，开启SSID广播可以桥接成功，关闭SSID则无法桥接。据猜测，关闭了SSID广播会导致功率下降，信号强度减弱，桥接就不成功。</li>
</ol>
<p>参考资料：<a href="http://service.tp-link.com.cn/detail_article_1059.html" target="_blank" rel="noopener">[WDS桥接功能] 如何扩展无线网络？</a></p>
<h2 id="副路由器的设置原则"><a href="#副路由器的设置原则" class="headerlink" title="副路由器的设置原则"></a>副路由器的设置原则</h2><p>在<a href="http://higoge.github.io/2015/12/17/net01/">网络01：双无线路由器无缝对接设置</a>中提到了无线路由器的组成部分。副路由器作为主路由器的扩展，只是交换机层面的扩展，很多功能是不需要的。</p>
<ol>
<li>DHCP不需要，由主路由器分配IP地址即可。</li>
<li>WAN口不用设置，不会从副路由器的WAN口传输数据。</li>
<li>LAN口设置的ip，是所接入设备的网关，同时也是路由器管理的登入IP地址。因为主路由器设置了网关，所以副路由器的LAN口设置只为管理副路由器使用。可以设置为与主路由器LAN口不同网段的IP地址，也可以是相同网段，但不常用的IP地址。</li>
<li>两个路由器之间设置为相同的SSID和接入密码。</li>
<li>无线桥接的两个路由器的信道是相同的，可以理解为对无线信号接收后再放大，也就是<em>中继</em>。使用网线进行桥接，无线信道设置为不同，并且信号范围不交叉，如1,6,11。结合3，两种方式均可保证移动设备无缝切换。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶08：SSH相关操作]]></title>
      <url>/2017/02/08/ad-linux08/</url>
      <content type="html"><![CDATA[<p>SSH (Secure Shell)，为远程登录会话和其他网络服务提供加密传输和使用环境。传统的网络服务都是明文传输(如Telnet，FTP)，包括明文数据、明文用户名和密码，极易受到中间人攻击。SSH目前是比较可靠的通讯方式；同时，SSH压缩其传输的数据，可以加快传输速度，是目前最为常用的远程登录(代替Telnet)和文件传输(SFTP代替FTP)工具。本文介绍相关Linux下SSH服务及客户端的配置以及SSH相关命令。<br><a id="more"></a><br>之前的博客有提到过SSH的文章如下：</p>
<ul>
<li><a href="http://higoge.github.io/2015/07/15/tools01/">工具01：Cygwin的安装配置</a>：Cygwin中安装SSH。</li>
<li><a href="http://higoge.github.io/2015/07/23/tools03/">工具03：PuTTY常用配置</a>：Windows的SSH工具。</li>
<li><a href="http://higoge.github.io/2015/07/24/tools04/">工具04：PuTTY的小伙伴PuTTYgen和Plink</a>：Windows下的SSH密钥生成器。</li>
<li><a href="http://higoge.github.io/2016/02/15/tools09/#Sftp_u63D2_u4EF6">工具09：资源管理器替代者：Total Commander</a>：TC的Sftp插件。</li>
<li><a href="http://higoge.github.io/2017/02/04/ad-linux07/#u4F7F_u7528SSH_u96A7_u9053_u52A0_u5BC6">Linux进阶07：Linux远程桌面配置</a>：SSH隧道。</li>
</ul>
<h2 id="SSH的安全验证"><a href="#SSH的安全验证" class="headerlink" title="SSH的安全验证"></a>SSH的安全验证</h2><p>SSH提供两种级别的安全验证。</p>
<ul>
<li>第一种级别（基于密码的安全验证），知道帐号和密码，就可以登录到远程主机，并且所有传输的数据都会被加密。但是，可能会有别的服务器在冒充真正的服务器，无法避免被“中间人”攻击。</li>
<li>第二种级别（基于密钥的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并把公有密钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公有密钥，然后把它和你发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有密钥加密“质询”（challenge）并把它发送给客户端软件。从而避免被“中间人”攻击。<br>以上内容来自<a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener">维基百科</a>。</li>
</ul>
<h2 id="SSH服务端公有密钥查询和比对"><a href="#SSH服务端公有密钥查询和比对" class="headerlink" title="SSH服务端公有密钥查询和比对"></a>SSH服务端公有密钥查询和比对</h2><p>服务端执行如下命令，查询公有密钥(fingerprint)。默认是通过SHA256的形式展现，可以使用<code>ssh-keygen</code>的<code>-E md5</code>参数，改变公有密钥显示方式为MD5。为了避免中间人攻击，可以提前把公有密钥发送个客户端，以便进行对照。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> file <span class="keyword">in</span> /etc/ssh/*sa_key.pub; <span class="keyword">do</span> ssh-keygen -lf <span class="variable">$file</span>; <span class="keyword">done</span></span><br><span class="line">1024 SHA256:7fEJPt+wnqW89TeckoMFEMuj6rLXAjgwup2cgfXRY/0 root@Arch (DSA)</span><br><span class="line">256 SHA256:fbk0IHk1RAOWFFmN4TC7qgqIGTJ1lYvxRsiAjWOdzVc root@Arch (ECDSA)</span><br><span class="line">2048 SHA256:QP5Ku0CIEclNQQwgTguQMOXWugyVfiVsIT7MFlPOynE root@Arch (RSA)</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">for</span> file <span class="keyword">in</span> /etc/ssh/*sa_key.pub; <span class="keyword">do</span> ssh-keygen -E md5 -lf <span class="variable">$file</span>; <span class="keyword">done</span></span><br><span class="line">1024 MD5:a4:93:01:1c:f2:e4:de:c3:b8:92:0e:b5:0e:12:5f:81 root@Arch (DSA)</span><br><span class="line">256 MD5:1d:f8:f6:1c:6f:10:a1:<span class="built_in">fc</span>:50:f5:87:e2:da:e9:29:84 root@Arch (ECDSA)</span><br><span class="line">2048 MD5:19:53:68:4f:df:3f:56:8a:9f:5b:4e:7e:30:be:d7:63 root@Arch (RSA)</span><br></pre></td></tr></table></figure></p>
<p><strong>注</strong>：CentOS6.5默认使用MD5的方式进行显示，并且不支持<code>-E</code>参数。</p>
<p>PuTTY客户端<strong>首次</strong>登录服务端的公有密钥对比，采用的是MD5的方式。通讯密钥是RSA。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/16.png" alt="16.png"></p>
<p>ssh命令(如Windows的Cygwin)<strong>首次</strong>登录也可以进行公有密钥对比，默认是SHA256的形式。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh 192.168.80.23</span><br><span class="line">The authenticity of host <span class="string">'192.168.80.23 (192.168.80.23)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:fbk0IHk1RAOWFFmN4TC7qgqIGTJ1lYvxRsiAjWOdzVc.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p>
<p>或者指定为MD5的形式。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -o FingerprintHash=md5 192.168.80.23</span><br><span class="line">The authenticity of host <span class="string">'192.168.80.23 (192.168.80.23)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:1d:f8:f6:1c:6f:10:a1:fc:50:f5:87:e2:da:e9:29:84.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>~/.ssh/known_hosts</code>中会保存登录过的服务器的公有密钥信息，可以通过如下命令进行查询和比对。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -F 192.168.80.23 -l</span><br><span class="line"><span class="comment"># Host 192.168.80.23 found: line 1</span></span><br><span class="line">192.168.80.23 ECDSA SHA256:fbk0IHk1RAOWFFmN4TC7qgqIGTJ1lYvxRsiAjWOdzVc</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -F 192.168.80.23 -l -E md5</span><br><span class="line"><span class="comment"># Host 192.168.80.23 found: line 1</span></span><br><span class="line">192.168.80.23 ECDSA MD5:1d:f8:f6:1c:6f:10:a1:<span class="built_in">fc</span>:50:f5:87:e2:da:e9:29:84</span><br></pre></td></tr></table></figure></p>
<h2 id="SSH客户端常用命令"><a href="#SSH客户端常用命令" class="headerlink" title="SSH客户端常用命令"></a>SSH客户端常用命令</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>可以使用如下两种方式登录。<br>a. 用户名@主机地址<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh learnit@192.168.80.23</span><br></pre></td></tr></table></figure></p>
<p>b. 使用<code>-l</code>参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh 192.168.80.23 -l learnit</span><br></pre></td></tr></table></figure></p>
<h3 id="执行一次性命令"><a href="#执行一次性命令" class="headerlink" title="执行一次性命令"></a>执行一次性命令</h3><p>如果只想在服务器上，快速执行一条命令并返回结果，不需要登录、输入命令、退出等多个操作，只需要在登录时后添加命令即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ssh learnit@192.168.80.23 <span class="string">'ls -l'</span></span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 2 learnit learnit 4096 Feb 15  2016 Desktop</span><br><span class="line">drwx------ 2 learnit learnit 4096 Jan 29 11:19 Downloads</span><br><span class="line">drwxr-xr-x 3 learnit learnit 4096 Jan 25 11:46 git</span><br><span class="line">drwxr-xr-x 4 learnit learnit 4096 Jan 29 11:21 <span class="built_in">local</span></span><br><span class="line">drwxr-xr-x 2 learnit learnit 4096 Jan 13  2016 python</span><br><span class="line">drwxr-xr-x 5 learnit learnit 4096 Jan 27 10:03 temp</span><br></pre></td></tr></table></figure></p>
<h3 id="客户端生成密钥"><a href="#客户端生成密钥" class="headerlink" title="客户端生成密钥"></a>客户端生成密钥</h3><p>使用<code>ssh-keygen</code>命令生成本地密钥，默认存放在<code>~/.ssh/</code>目录下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/Jeremy/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/Jeremy/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/Jeremy/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:VrUMOvTHxh53W+Dm2ioPRb9Qa94nv47epD1lV2IjLLk Jeremy@Jeremy-Dell</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        . . . .  |</span></span><br><span class="line"><span class="string">|       . o * o . |</span></span><br><span class="line"><span class="string">|        o ooX = o|</span></span><br><span class="line"><span class="string">|         oo=oB+o+|</span></span><br><span class="line"><span class="string">|        S  o+o=+.|</span></span><br><span class="line"><span class="string">|       .  E. * o+|</span></span><br><span class="line"><span class="string">|          . . =o=|</span></span><br><span class="line"><span class="string">|          .. .*+.|</span></span><br><span class="line"><span class="string">|           o++.=+|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></p>
<p>常用参数：<br><code>-t</code>：密钥类型，dsa，ecdsa，ed25519，rsa，rsa1，默认rsa。<br><code>-C</code>：对密钥的注释。<br><code>-f</code>：密钥存放位置，推荐使用绝对路径。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'second ssh key'</span> -f ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure></p>
<p>此命令表示生产一个叫<code>second ssh key</code>的rsa密钥，存放位置是<code>~/.ssh/id_rsa_second</code>。</p>
<h3 id="发送密钥到服务端"><a href="#发送密钥到服务端" class="headerlink" title="发送密钥到服务端"></a>发送密钥到服务端</h3><p>有两种方式发送密钥。发送成功后，即可免密码登录。<br>a. 使用<code>ssh-copy-id</code>命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id learnit@192.168.80.23</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">"/home/Jeremy/.ssh/id_rsa_second.pub"</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">learnit@192.168.80.23<span class="string">'s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   "ssh '</span>learnit@192.168.80.23<span class="string">'"</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure></p>
<p>常用参数：<br><code>-i</code>：指定密钥的绝对路径。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa_second learnit@192.168.80.23</span><br></pre></td></tr></table></figure></p>
<p>b. 使用一次性命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh learnit@192.168.80.23 <span class="string">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">learnit@192.168.80.23<span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p>
<p>密钥发送成功后，即可免密码登录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh learnit@192.168.80.23</span><br><span class="line">Last login: Mon Feb  6 16:06:07 2017 from 192.168.80.2</span><br><span class="line">➜  /home/learnit &gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>每次输入用户名@主机地址，如果觉得比较麻烦，可以通过修改<code>~/.ssh/config</code>文件，简化输入。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/config</span><br><span class="line">Host arch</span><br><span class="line">HostName 192.168.80.23</span><br><span class="line">User learnit</span><br><span class="line">IdentityFile /home/Jeremy/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<p>登录命令可以改为：<code>ssh arch</code>。<br>使用其他用户登录可以使用命令：<code>ssh root@arch</code>。<br>客户端<code>config</code>参数详情，请参考<code>man 5 ssh_config</code>。</p>
<h3 id="Github多用户使用"><a href="#Github多用户使用" class="headerlink" title="Github多用户使用"></a>Github多用户使用</h3><p>如果有多个Github帐户，两个帐户无法使用同一个密钥。解决方法如下。<br>a. 查看哪个帐户使用了key<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T -ai ~/.ssh/id_rsa git@github.com</span><br><span class="line">Hi higoge! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p>
<p>b. 生成新的密钥。<br>c. 配置config文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/config</span><br><span class="line"><span class="comment"># Default github user(higoge@gmail.com)</span></span><br><span class="line">Host github.com <span class="comment">#任意填写</span></span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile /home/learnit/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># second user</span></span><br><span class="line">Host github-learnit</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile /home/learnit/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure></p>
<p>d. clone仓库<br>默认用户clone方式不变，第二个用户主机地址使用<code>github-learnit</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github-learnit:higoge/file.git</span><br></pre></td></tr></table></figure></p>
<h3 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h3><p>SSH隧道常用参数如下。<br><code>-N</code>：不运行远程命令，仅转发端口。<br><code>-f</code>：后台运行<code>ssh</code>命令。<br><code>-C</code>: 对传输的数据进行压缩。<br><code>-D</code>：连接远程服务器，监听本地端口作为本地Socks5服务，所有连接都将通过本隧道发送给远端服务器。<br><code>-L</code>：监听本地端口，对这个端口的数据操作会通过隧道发给远程服务器的对应端口。<br><code>-R</code>：监听远程端口，对这个端口的数据操作会通过隧道发给本地服务的对应端口。</p>
<p>a. Socks5服务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh learnit@192.168.80.23 -D 1080 -o ServerAliveInterval=60 -C -f -N</span></span><br></pre></td></tr></table></figure></p>
<p><code>-o ServerAliveInterval=60</code>：设置保活时间间隔，时间为60秒。<br>此命令可以启动本地1080端口，作为Socks5的服务端口。</p>
<p>b. 远程服务穿透到本地某端口。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 5902:127.0.0.1:5902 -N -f learnit@192.168.80.6</span><br></pre></td></tr></table></figure></p>
<p>此命令的作用是加密远程桌面的连接，将远程桌面服务的5902端口穿透到本地的5902端口。</p>
<p>c. 本地服务穿透到外网端口<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -f -N -R remote_ip:80:localhost:4000 root@remote_ip</span><br></pre></td></tr></table></figure></p>
<p>此命令将本地博客框架hexo的web端口4000，映射到远端服务器的80端口，通过浏览器访问<code>http://remote_ip</code>即能够访问本地的4000端口。</p>
<h2 id="SSH服务端配置"><a href="#SSH服务端配置" class="headerlink" title="SSH服务端配置"></a>SSH服务端配置</h2><p>SSH服务端配置文件地址为<code>/etc/ssh/sshd_config</code>。每次修改完，请重启<code>sshd</code>服务。服务端<code>config</code>参数详情，请参考<code>man 5 sshd_config</code>。</p>
<h3 id="限制模式"><a href="#限制模式" class="headerlink" title="限制模式"></a>限制模式</h3><p><code>StrictModes</code>参数表示<code>~/.ssh</code>文件夹的限制模式，如果设置为<code>yes</code>，那么<code>~/.ssh</code>文件夹权限为<code>700</code>，<code>~/.ssh/authorized_keys</code>文件权限必须是<code>600</code>。<br>如若密钥配置成功，但登录是还需要密码，请修改SSH文件和文件夹权限，或者将<code>StrictModes</code>设置为<code>no</code>。</p>
<h3 id="登录较慢"><a href="#登录较慢" class="headerlink" title="登录较慢"></a>登录较慢</h3><p>SSH如果出现登录卡顿的情况，可以使用如下命令进行调试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -vvv learnit@192.168.80.23</span><br></pre></td></tr></table></figure></p>
<p>一般会卡在<code>debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password</code>这句话。<br>修改如下参数即可解决。<br><code>UseDNS</code>改为<code>no</code>。<br><code>GSSAPIAuthentication</code>改为<code>no</code>。</p>
<h3 id="限制root用户登录"><a href="#限制root用户登录" class="headerlink" title="限制root用户登录"></a>限制root用户登录</h3><p><code>PermitRootLogin</code>参数可以限制root用户的登录。<br>常用参数如下：<br><code>yes</code>：root用户可以登录。<br><code>prohibit-password</code>：root用户不能通过输入密码登录。<br><code>without-password</code>：root用户不能通过输入密码登录。<br><code>forced-commands-only</code>：root用户仅可以执行特定命令。<br><code>no</code>：root用户不能登录。</p>
<p>如果设置了<code>forced-commands-only</code>模式，特定命令表示设置在<code>/root/.ssh/authorized_keys</code>中的添加的命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="built_in">command</span>=<span class="string">"ls -l"</span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+H6MNVJCpKx24FPvkX7gVE+bmjSjferbGxRZ/R3iPk9QBCZp2OrUcjhyWrjEjpV9DY1wXlDTUrg3+2HFqnhz+lEvhM0vl2Hlu3AgJsTEbWddDSZGayUTxCBg2mKe4Lks6MvVOubw3b+FmCSHtGc2mPfBtKNkr0GFWGZFXgEJKiZ9jFzx39nLaw0ZgR0WXkoRe2Nby+xyYsO2gs1u7j75CqFdKHs5zoLAV8C0d1x5tdFknuSGdMdYrbgpquSfrlQMJUIwJTzUnGLyE0a01IPs6OQ+c8LuuxDnEO8SCRDiJIh8Wyct1VWR3j3td/yq40NEyjPXqtd7bHVr8aBDjUb3t win10-cygwin</span><br></pre></td></tr></table></figure></p>
<p>使用root用户登录后反馈如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@192.168.80.23</span><br><span class="line">total 72</span><br><span class="line">-rw-------. 1 root root  1384 Nov 29 04:31 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root 49565 Nov 29 04:31 install.log</span><br><span class="line">-rw-r--r--. 1 root root 10033 Nov 29 04:28 install.log.syslog</span><br><span class="line">Connection to 192.168.80.6 closed.</span><br></pre></td></tr></table></figure></p>
<p>root用户登录成功后，直接执行<code>authorized_keys</code>中的command命令，反馈结果后，断开连接。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PuTTy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶07：Linux远程桌面配置]]></title>
      <url>/2017/02/04/ad-linux07/</url>
      <content type="html"><![CDATA[<p>Linux的操作有时候需要界面环境，远程桌面是即保证远程登录，又保证界面操作的解决方案。本文介绍CentOS6.5环境下远程桌面的配置与使用。客户端运行在Windows中。<br><a id="more"></a></p>
<h2 id="VNCServer安装"><a href="#VNCServer安装" class="headerlink" title="VNCServer安装"></a>VNCServer安装</h2><p>CentOS6.5的VNCServer是<code>TigerVNCServer</code>，安装方式如下。<br>a. yum安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install tigervnc-server</span></span><br></pre></td></tr></table></figure></p>
<p>b. rpm安装<br>从CentOS6.5的安装iso光盘文件中，在<code>Packages\</code>文件夹下，复制<code>tigervnc-server-1.1.0-5.el6_4.1.x86_64.rpm</code>到服务端。运行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh tigervnc-server-1.1.0-5.el6_4.1.x86_64.rpm</span></span><br></pre></td></tr></table></figure></p>
<h2 id="VNCServer使用"><a href="#VNCServer使用" class="headerlink" title="VNCServer使用"></a>VNCServer使用</h2><p>VNCServer的使用，首先设置密码，再通过单独运行或配置服务运行，最后注意配置防火墙。</p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>本地用户运行如下命令，设置远程登录的初始密码。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vncpasswd</span><br><span class="line">Password:</span><br><span class="line">Verify:</span><br></pre></td></tr></table></figure></p>
<h3 id="单独运行"><a href="#单独运行" class="headerlink" title="单独运行"></a>单独运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vncserver -geometry 1280x800</span><br><span class="line"></span><br><span class="line">New <span class="string">'CentOS:1 (learnit)'</span> desktop is CentOS:1</span><br><span class="line"></span><br><span class="line">Creating default startup script /home/learnit/.vnc/xstartup</span><br><span class="line">Starting applications specified <span class="keyword">in</span> /home/learnit/.vnc/xstartup</span><br><span class="line">Log file is /home/learnit/.vnc/CentOS:1.log</span><br></pre></td></tr></table></figure>
<p>其中参数<code>-geometry 1280x800</code>可选，表示VNC客户端的显示分辨率。<code>:1</code>表示远程桌面1。<br><strong>注意</strong>：分辨率的乘号是字母<strong>x</strong>，而不是星号<strong>*</strong>。</p>
<p>可以运行如下命令终止<code>:1</code>的远程桌面。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vncserver -<span class="built_in">kill</span> :1</span><br><span class="line">Killing Xvnc process ID 3101</span><br></pre></td></tr></table></figure></p>
<h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p><code>root</code>用户下，修改<code>/etc/sysconfig/vncservers</code>文件如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VNCSERVERS=<span class="string">"1:root 2:learnit"</span></span><br><span class="line">VNCSERVERARGS[1]=<span class="string">"-geometry 1280x800"</span></span><br><span class="line">VNCSERVERARGS[2]=<span class="string">"-geometry 1024x768"</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>:1</code>表示用户<code>root</code>的远程桌面，<code>:2</code>表示用户<code>learnit</code>的远程桌面，<code>VNCSERVERARGS[*]</code>为其运行参数。<br>配置<code>vncserver</code>开机启动。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig vncserver on</span></span><br></pre></td></tr></table></figure></p>
<p>启动<code>vncserver</code>服务。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service vncserver start</span></span><br></pre></td></tr></table></figure></p>
<h3 id="配置端口通过防火墙。"><a href="#配置端口通过防火墙。" class="headerlink" title="配置端口通过防火墙。"></a>配置端口通过防火墙。</h3><p><code>vncserver</code>的端口号规则：<code>:1</code>的端口号为<code>5901</code>，<code>:2</code>的端口号为<code>5902</code>，以此类推。防火墙配置有两种方式：增加开放规则，或直接关闭防火墙。<br>a. 增加规则，开放端口。修改<code>/etc/sysconfig/iptables</code>文件如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="comment"># this is the new rule.</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp -m multiport --dports 5901:5902,6001:6002 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：新增规则，请在<code>-j REJECT</code>这一行之前添加，否则无效。<br>重启防火墙服务。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service iptables restart</span></span><br></pre></td></tr></table></figure></p>
<p>b. 关闭防火墙<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service iptables stop</span></span><br><span class="line"><span class="comment"># chkconfig iptables off</span></span><br></pre></td></tr></table></figure></p>
<h2 id="VNC客户端的使用"><a href="#VNC客户端的使用" class="headerlink" title="VNC客户端的使用"></a>VNC客户端的使用</h2><p>Windows客户端推荐使用RealVNC的<a href="https://www.realvnc.com/download/viewer/windows/" target="_blank" rel="noopener">VNC Viewer</a>。<br>a. 填写服务器地址和端口号，回车。端口号可以使用<code>:2</code>或<code>:5902</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/10.png" alt="10.png"><br>b. 提示此链接不加密，继续。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/11.png" alt="11.png"><br>c. 输入连接密码，即<code>vncpasswd</code>设置的密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/12.png" alt="12.png"><br>d. 运行成功。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/13.png" alt="13.png"></p>
<h2 id="使用SSH隧道加密"><a href="#使用SSH隧道加密" class="headerlink" title="使用SSH隧道加密"></a>使用SSH隧道加密</h2><p>上一章的步骤b，客户端会提示此连接为非加密连接，不推荐在非安全局域网中使用。<br>解决方案有二：<br>a. <code>vncserver</code>的启动参数，添加<code>-localhost</code>参数，vnc客户端使用<code>vncviewer -via username@ip localhost:1</code>的方式进行连接，但RealVNC的Windows客户端不支持这些参数。<br>b. 通过SSH隧道的方式，加密客户端与服务端的连接，vnc客户端与本地隧道端口进行非加密通讯，从而保障连接的安全性。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/14.png" alt="14.png"></p>
<h3 id="PuTTY设置方法"><a href="#PuTTY设置方法" class="headerlink" title="PuTTY设置方法"></a>PuTTY设置方法</h3><p>PuTTY设置好远程登录的用户名和IP地址之后，选择Connection==&gt;SSH==&gt;Tunnels，在Add new forward port中，Source port是本地端口，填写<code>5902</code>，Destination是VNCServer的IP地址和端口号，填写<code>192.168.80.6:5902</code>。点击Add，添加。点击Open打开连接。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/15.png" alt="15.png"></p>
<h3 id="Cygwin设置方法"><a href="#Cygwin设置方法" class="headerlink" title="Cygwin设置方法"></a>Cygwin设置方法</h3><p>开启Cygwin，使用如下命令建立隧道。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 5902:127.0.0.1:5902 -N -f learnit@192.168.80.6</span><br><span class="line">learnit@192.168.80.6<span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p>
<p><code>-L 5902:127.0.0.1:5902</code>：远程服务器的5902端口，映射为本地<code>127.0.0.1</code>的<code>5902</code>端口。<br><code>-N</code>：不运行远程命令，仅转发端口。<br><code>-f</code>：后台运行<code>ssh</code>命令。</p>
<h3 id="VNC客户端连接方法"><a href="#VNC客户端连接方法" class="headerlink" title="VNC客户端连接方法"></a>VNC客户端连接方法</h3><p>VNC Viewer的连接服务器地址和端口号为<code>localhost:5902</code>或者<code>127.0.0.1:2</code>即可。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络03：网络连通性测试的相关命令]]></title>
      <url>/2017/02/01/net03/</url>
      <content type="html"><![CDATA[<p>本文介绍几个测试网络连通性的常用命令，以Windows平台为主，包括<code>ping</code>，<code>telnet</code>，<code>tracert</code>，<code>pathping</code>。<br><a id="more"></a></p>
<h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p><code>Ping</code>是最常用的网络连通性测试命令，作用是通过ICMP协议，测试数据包能否到达目的主机。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-t</code>: ping指定主机，直到停止。<code>Ctrl+Break</code>，查看统计信息并继续。<code>Ctrl+C</code>，停止。<br><code>-a</code>: 将地址解析为主机名。<br><code>-n size</code>: 请求size次。<br><code>-l size</code>: 发送缓冲区大小。<br><code>-f</code>: 在数据包中设置“不分段”标记(仅适用于 IPv4)。</p>
<h3 id="奇巧淫技"><a href="#奇巧淫技" class="headerlink" title="奇巧淫技"></a>奇巧淫技</h3><p>除了使用参数<code>-t</code>一直<code>ping</code>目的主机到天荒地老之外，还有其他的奇巧淫技。<br>(1) <code>-a</code>的作用：不知道谁占用了IP地址，可以尝试使用<code>-a</code>参数<code>ping</code>一下，<strong>有时候</strong>会解析到主机名，然后通过主机名查找到人。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jeremy&gt;ping -a 127.0.0.1</span><br><span class="line"></span><br><span class="line">正在 Ping Jeremy-Dell [127.0.0.1] 具有 32 字节的数据:</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">127.0.0.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br></pre></td></tr></table></figure></p>
<p>其中，<code>Jeremy-Dell</code>就是主机名。<br>(2) 测试MTU大小。<br><code>MTU</code>是最大传输单元(<em>Maximum Transmission Unit</em>)，通常指在无需分段的情况下，可以传输的最大IP报文(包含IP头)。以太网的默认MTU是<strong>1500</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jeremy&gt;ping -f -l 1472 192.168.10.1</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.10.1 具有 1472 字节的数据:</span><br><span class="line">来自 192.168.10.1 的回复: 字节=1472 时间=2ms TTL=64</span><br><span class="line">来自 192.168.10.1 的回复: 字节=1472 时间=2ms TTL=64</span><br><span class="line">来自 192.168.10.1 的回复: 字节=1472 时间=2ms TTL=64</span><br><span class="line">来自 192.168.10.1 的回复: 字节=1472 时间=2ms TTL=64</span><br><span class="line"></span><br><span class="line">192.168.10.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 2ms，最长 = 2ms，平均 = 2ms</span><br><span class="line"></span><br><span class="line">C:\Users\Jeremy&gt;ping -f -l 1473 192.168.10.1</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.10.1 具有 1473 字节的数据:</span><br><span class="line">需要拆分数据包但是设置 DF。</span><br><span class="line">需要拆分数据包但是设置 DF。</span><br><span class="line">需要拆分数据包但是设置 DF。</span><br><span class="line">需要拆分数据包但是设置 DF。</span><br><span class="line"></span><br><span class="line">192.168.10.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，</span><br></pre></td></tr></table></figure></p>
<p>由上面的测试可知，当<code>ping</code>的包大小是1472时，不需要分包，否则需要分包，提示错误。<br>IP包头长度是20，ICMP包头长度是8，加起来1472+20+8=1500，正好是MTU大小。<br>所以，当需要测试网络延时，通过<code>-l</code>不需要选择超过1472的包，因为再大的包也就分包了。</p>
<h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p><code>Telnet</code>不仅可以远程连接服务器，还可以用于<strong>测试TCP端口</strong>的连通性。在<a href="http://higoge.github.io/2015/06/25/vm03/">虚拟机03：网络设置</a>中曾经介绍过Telnet的使用方法。再总结一下。</p>
<h3 id="Telnet的安装"><a href="#Telnet的安装" class="headerlink" title="Telnet的安装"></a>Telnet的安装</h3><p>Windows7以上版本默认没有安装Telnet客户端，需要手动安装。安装路径为：控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;勾选“Telnet客户端”，确定即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/network/03.png" class="img-center"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>测试服务器<code>192.168.80.23</code>的<code>4000</code>端口。如果成功，则黑屏，如果失败，则会提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jeremy&gt;telnet 192.168.80.23 4000</span><br><span class="line">正在连接192.168.80.23...无法打开到主机的连接。 在端口 4000: 连接失败</span><br></pre></td></tr></table></figure></p>
<h2 id="Tracert"><a href="#Tracert" class="headerlink" title="Tracert"></a>Tracert</h2><p><code>Tracert</code>命令的作用是显示数据包在ip网络经过的路由器的ip地址，尤其是可以检测出哪一跳的路由不可达。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jeremy&gt;tracert 219.147.1.66</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪到 219.147.1.66 的路由</span><br><span class="line"></span><br><span class="line">  1     3 ms     1 ms     1 ms  192.168.10.1</span><br><span class="line">  2     8 ms    19 ms    11 ms  100.64.0.1</span><br><span class="line">  3     5 ms     *        5 ms  60.235.29.61</span><br><span class="line">  4    14 ms    10 ms     9 ms  219.147.1.70</span><br><span class="line">  5     6 ms     5 ms     4 ms  219.147.1.66</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure></p>
<h2 id="Pathping"><a href="#Pathping" class="headerlink" title="Pathping"></a>Pathping</h2><p><code>Pathping</code>是Windows自带的网络诊断工具，在一段时间内，从本地至目的地之间发送多个Echo Request消息给中间经过的每个节点，然后基于数据包从每个路由器返回的信息来计算结果。所以，<code>pathping</code>可以显示每个节点的数据包丢失的百分比，以便判断具体哪个节点或子网可能出现网络故障<a href="https://zh.wikipedia.org/wiki/Pathping" target="_blank" rel="noopener">[1]</a>。<br><code>pathping</code>是<code>ping</code>和<code>tracert</code>的结合体，执行与<code>tracert</code>相同的路由跟踪命令去识别这条路径上有哪些路由，然后<code>ping</code>每个节点100个数据包，获取返回信息后去计算每个节点的统计信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Jeremy&gt;pathping 219.147.1.66</span><br><span class="line"></span><br><span class="line">通过最多 30 个跃点跟踪到 219.147.1.66 的路由</span><br><span class="line"></span><br><span class="line">  0  Jeremy-Dell [192.168.10.110]</span><br><span class="line">  1  192.168.10.1</span><br><span class="line">  2  100.64.0.1</span><br><span class="line">  3  60.235.29.61</span><br><span class="line">  4     *     219.147.1.70</span><br><span class="line">  5  219.147.1.66</span><br><span class="line"></span><br><span class="line">正在计算统计信息，已耗时 125 秒...</span><br><span class="line">            指向此处的源   此节点/链接</span><br><span class="line">跃点  RTT    已丢失/已发送 = Pct  已丢失/已发送 = Pct  地址</span><br><span class="line">  0                                           Jeremy-Dell [192.168.10.110]</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  1    3ms     0/ 100 =  0%     0/ 100 =  0%  192.168.10.1</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  2    5ms     0/ 100 =  0%     0/ 100 =  0%  100.64.0.1</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  3   18ms     0/ 100 =  0%     0/ 100 =  0%  60.235.29.61</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  4  ---     100/ 100 =100%   100/ 100 =100%  219.147.1.70</span><br><span class="line">                                0/ 100 =  0%   |</span><br><span class="line">  5    5ms     0/ 100 =  0%     0/ 100 =  0%  219.147.1.66</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br></pre></td></tr></table></figure></p>
<p>通过以上跟踪<code>219.147.1.70</code>可达，但<code>ping</code>的丢包率是100%，可见加了防火墙。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令08：文件及目录管理(touch/rm/mv/cp/cd/pwd/mkdir)]]></title>
      <url>/2017/01/28/cm-linux08/</url>
      <content type="html"><![CDATA[<p>本文介绍常用的文件及目录管理命令。主要包括：<code>touch</code>、<code>rm</code>、<code>mv</code>、<code>cp</code>、<code>cd</code>、<code>pwd</code>、<code>mkdir</code>。<br><a id="more"></a></p>
<h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p><code>touch</code>的作用是修改文件的时间戳，包括Access Time和Modification Time(后期文章会讲)。如果文件不存在，则新建文件。</p>
<h3 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch [文件名] <span class="comment"># 新建文件 or 修改文件时间戳为当前时间</span></span><br></pre></td></tr></table></figure>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p><code>rm</code>的作用是删除文件和文件夹。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-f</code>: 强制删除，无任何提示。<strong>慎用！</strong><br><code>-i</code>: 删除前提示。<br><code>-r</code>: 循环删除，用于文件夹删除。</p>
<h3 id="肌肉训练-1"><a href="#肌肉训练-1" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm -i [文件名] <span class="comment"># 删除文件并提示</span></span><br><span class="line">$ rm -ri [文件夹名] <span class="comment"># 删除文件夹并提示</span></span><br><span class="line">$ rm -rf [文件名/文件夹名] <span class="comment"># 强制删除文件或文件夹</span></span><br></pre></td></tr></table></figure>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p><code>mv</code>的作用是移动(或重命名)文件或文件夹。</p>
<h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-f</code>: 强制移动，无任何提示。<strong>慎用！</strong><br><code>-i</code>: 覆盖时提示。<br><code>-u</code>: 目标文件存在且源文件仅比目标文件新时，才覆盖(update)。</p>
<h3 id="肌肉训练-2"><a href="#肌肉训练-2" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv -i [源文件名] [目标文件名] <span class="comment"># 移动或重命名文件夹</span></span><br></pre></td></tr></table></figure>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p><code>cp</code>的作用是复制文件或文件夹。</p>
<h3 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-a</code>: 相当于<code>-dr</code>。<br><code>-d</code>: 如果是符号连接，则复制符号连接本身。<br><code>-f</code>: 目标文件已存在且无法打开，删除后再尝试。<br><code>-i</code>: 覆盖时问询。<br><code>-l</code>: 如果是硬链接，则复制连接本身。<br><code>-p</code>: 连同文件属性(权限、用户、时间)一起复制（备份常用）。<br><code>-r</code>: 循环复制。用于目录。<br><code>-s</code>: 复制成符号连接。<br><code>-u</code>: 源比目标新或目标不存在时，才替换。<br><code>--preserve=all</code>: 比-p还要多，SELinux属性、link、xattr等一起复制。</p>
<h3 id="肌肉训练-3"><a href="#肌肉训练-3" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp source1 source2 directory_name <span class="comment"># 复制多个文件(目标一定是目录)</span></span><br><span class="line">$ cp –a dir1 dir2 <span class="comment"># 复制文件夹</span></span><br></pre></td></tr></table></figure>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p><code>cd</code>的作用是切换目录。</p>
<h3 id="肌肉训练-4"><a href="#肌肉训练-4" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="comment"># 到用户home目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~ <span class="comment"># 到用户home目录</span></span><br><span class="line">$ <span class="built_in">cd</span> - <span class="comment"># 返回前一个目录</span></span><br></pre></td></tr></table></figure>
<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p><code>pwd</code>的作用是显示当前所在路径。</p>
<h3 id="常用参数-3"><a href="#常用参数-3" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-P</code>: 显示实际路径，而非连接路径。</p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p><code>mkdir</code>的作用是新建文件夹。</p>
<h3 id="常用参数-4"><a href="#常用参数-4" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>-m</code>: 设定目录权限(参考<code>chmod</code>)。<br><code>-p</code>: 循环建立目录。</p>
<h3 id="肌肉训练-5"><a href="#肌肉训练-5" class="headerlink" title="肌肉训练"></a>肌肉训练</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p a/b/c <span class="comment"># 循环建立文件夹a/b/c</span></span><br></pre></td></tr></table></figure>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令07：ls]]></title>
      <url>/2017/01/26/cm-linux07/</url>
      <content type="html"><![CDATA[<p><code>ls</code>是最常用的命令，作用是列出文件夹的内容。把最常用的参数总结在此。<br><a id="more"></a></p>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><code>-a</code>: 列出全部内容。（Linux中，.开头的为隐藏文件）<br><code>-d</code>: 列出目录条目(属性)，而不是目录内容。<br><code>-F</code>: 条目结尾显示*/=@|。(无颜色识别时常用)<br><code>-h</code>：与-l一起使用，以可读方式显示文件大小。<br><code>-i</code>：打印index number。<br><code>-l</code>：用列表方式展示。<br><code>-R</code>：递归显示子文件夹。<br><code>-1</code>：1行显示1个文件。<br><code>-Z</code>：显示文件SELinux相关信息。</p>
<h2 id="F后缀的含义"><a href="#F后缀的含义" class="headerlink" title="-F后缀的含义"></a>-F后缀的含义</h2><p><code>@</code>: symbolic link (or that the file has extended attributes).<br><code>*</code>: executable.<br><code>=</code>: socket.<br><code>|</code>: named pipe.<br><code>/</code>: directory.</p>
<h2 id="肌肉反射训练："><a href="#肌肉反射训练：" class="headerlink" title="肌肉反射训练："></a>肌肉反射训练：</h2><p>显示全部信息: <code>ls –la</code><br>显示全部可读信息: <code>ls -laFh</code><br>显示某文件夹属性: <code>ls –ld [文件夹名称]</code><br>递归显示文件夹<code>ls –R [文件夹名称]</code></p>
<p><strong>注：</strong>一般的Linux发行版都会默认的把普通用户的<code>ls</code>设置别名(alias)为<code>ls --color=auto</code>，所以<code>ls</code>显示时自带颜色提示。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络02：双网卡跨内外网路由设置]]></title>
      <url>/2017/01/24/net02/</url>
      <content type="html"><![CDATA[<p>有时候工作需要一台电脑同时访问内外网，如有线网卡连接内网，无线网卡或3G上网卡连接互联网。如果不设置，每次需要停掉一个网卡，才能正常使用另一个网卡，切换太麻烦。通过添加静态路由的方式，解决此问题。<br><a id="more"></a></p>
<h3 id="Windows设置"><a href="#Windows设置" class="headerlink" title="Windows设置"></a>Windows设置</h3><p>以管理员身份运行命令提示符(Win10快捷键<code>Win+X--&gt;a--&gt;Alt+Y</code>)，输入如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;route print</span><br><span class="line"> ===========================================================================</span><br><span class="line">接口列表</span><br><span class="line"> 10...84 7b eb 4b a7 51 ......Realtek PCIe FE Family Controller</span><br><span class="line"> 23...ac 2b 6e 88 28 b9 ......Microsoft Wi-Fi Direct Virtual Adapter</span><br><span class="line">  2...00 50 56 c0 00 08 ......VMware Virtual Ethernet Adapter for VMnet8</span><br><span class="line"> 18...ac 2b 6e 88 28 b8 ......Intel(R) Dual Band Wireless-AC 3165</span><br><span class="line"> 12...ac 2b 6e 88 28 bc ......Bluetooth Device (Personal Area Network)</span><br><span class="line">  1...........................Software Loopback Interface 1</span><br><span class="line">  6...00 00 00 00 00 00 00 e0 Microsoft Teredo Tunneling Adapter</span><br><span class="line"> 38...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #3</span><br><span class="line">  5...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter #4</span><br><span class="line"> ===========================================================================</span><br></pre></td></tr></table></figure></p>
<p>接口列表中，以第一行为例，分别为<strong>编号</strong>，<strong>网卡MAC地址</strong>，<strong>网卡名称</strong>。其中<strong>网卡名称</strong>需要明确哪个网卡连接内网，哪个网卡连接外网。<br>本栗中，编号10的Realtek PCIe FE Family Controller是有线网卡，上内网；编号18的Intel(R) Dual Band Wireless-AC 3165是无线网卡，上外网。</p>
<p>添加静态路由，先添加内网路由，再添加外网路由。输入如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add 10.16.6.0 mask 255.255.255.0 10.16.6.1 metric 20 if 10</span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 192.168.1.1 metric 20 if 18</span><br></pre></td></tr></table></figure></p>
<p>访问内网<code>10.16.6.0/24</code>，路由网关为<code>10.16.6.1</code>，路由设备<code>if</code>编号为<code>10</code>的网卡。<br>访问其他网络(外网)，路由网关<code>192.168.1.1</code>，路由设备<code>if</code>编号为<code>18</code>的网卡。<br><code>metric</code>表示到达目的地址的最佳路径计量标准，越小优先级越高，通常设置为20。</p>
<h3 id="Linux设置"><a href="#Linux设置" class="headerlink" title="Linux设置"></a>Linux设置</h3><p><strong>注：</strong>本章未验证。<br>Linux的<code>route</code>命令与Windows的略有不同，具体参数可以参考<code>route</code>的<code>man</code>手册。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># route add -net 192.56.76.0 netmask 255.255.255.0 metric 1024 dev eth0</span><br></pre></td></tr></table></figure></p>
<p>不同之处是多了<code>-net</code>参数，少了网关，连接设备<code>dev</code>是设备名<code>eth0</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶06：Bash常用快捷键]]></title>
      <url>/2017/01/22/ad-linux06/</url>
      <content type="html"><![CDATA[<p>Bash是最常用的Linux工作环境，熟悉最常用的快捷键能提高工作效率。以下快捷键在Zsh中同样适用。<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+u</td>
<td>删除光标之前到剪贴板</td>
</tr>
<tr>
<td>Ctrl+k</td>
<td>删除光标之后到剪贴板</td>
</tr>
<tr>
<td>Ctrl+y</td>
<td>粘贴</td>
</tr>
<tr>
<td>Ctrl+l</td>
<td>清屏</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>到行首</td>
</tr>
<tr>
<td>Ctrl+e</td>
<td>到行尾</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>查询命令(多次按)</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>撤销</td>
</tr>
<tr>
<td>Alt–.</td>
<td>使用前一次命令的最后一个词(命令本身也是一个词)</td>
</tr>
<tr>
<td>tab</td>
<td>提示</td>
</tr>
<tr>
<td>Ctrl+c</td>
<td>中断，终结一个前台作业</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>End Of Line</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>后台运行(唤醒到前台用fg)</td>
</tr>
</tbody>
</table>
<p>其他快捷键和奇巧淫技，可以参考<a href="http://www.techug.com/bash" target="_blank" rel="noopener">Bash 快捷键大全</a></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Keyboard Flow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令06：VIM及快捷键脑图]]></title>
      <url>/2016/05/15/cm-linux06/</url>
      <content type="html"><![CDATA[<p>VIM是Linux从业人员必须学会的文本编辑器。VIM可以配置成为一个强大的命令行IDE，完成日常的编码、编译和调试的目的。另一款编辑器神器Emacs也是好用到无敌，其学习之路却特别曲折。个人从没使用过Emacs，对VIM的使用，也仅仅停留在编辑单个文件上，并没有将其配置为IDE的需求。很多编辑器也有专门的VI模式，说明掌握VIM的基本操作是必备的技能。本文简单介绍VIM的基本操作。<br><a id="more"></a></p>
<h2 id="VI-vs-VIM"><a href="#VI-vs-VIM" class="headerlink" title="VI vs VIM"></a>VI vs VIM</h2><p>VIM是VI的Improved版本。VI可以算是一个标准，VIM是这个标准的一个实现，并增加了许多功能，参考<a href="http://unix.stackexchange.com/questions/61021/vi-vs-vim-or-is-there-any-reason-why-i-would-ever-want-to-use-vi" target="_blank" rel="noopener">[1]</a>。几乎所有的类Unix版本都提供VI编辑器，但很多默认没有安装VIM，需要单独安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt-get install vim # Ubuntu</span></span><br><span class="line"><span class="comment"># yum install vim # CentOS</span></span><br></pre></td></tr></table></figure></p>
<h2 id="VIM-Tutorial"><a href="#VIM-Tutorial" class="headerlink" title="VIM Tutorial"></a>VIM Tutorial</h2><p>安装完VIM，系统就有了一个本地的VIM指南，就不需要联网找其他的帮助文档了，此指南对于掌握VIM的基本操作完全够了，顺便还能练习下英语阅读。使用如下命令即可调出。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vimtutor</span><br></pre></td></tr></table></figure></p>
<h2 id="VIM的三种模式及切换"><a href="#VIM的三种模式及切换" class="headerlink" title="VIM的三种模式及切换"></a>VIM的三种模式及切换</h2><p>三种模式如下。</p>
<ol>
<li>浏览模式</li>
<li>编辑模式</li>
<li>命令模式</li>
</ol>
<p>切换方式如下。<br>浏览模式切换到编辑模式，需要使用编辑命令，如<code>i, I, o, O, a, A, s, c</code>等。<br>编辑模式退回到浏览模式，使用<code>Esc</code>。<br>浏览模式切换到命令模式，使用<code>:</code>。<br>命令模式切换到浏览模式，使用<code>Enter</code>或<code>Esc</code>。<br>命令模式和编辑模式无法直接互相切换。</p>
<h2 id="VIM的快捷键"><a href="#VIM的快捷键" class="headerlink" title="VIM的快捷键"></a>VIM的快捷键</h2><p>曾经看到一个VIM快捷键的脑图，英文的而且还有错误，我用Xmind将其重新绘制，改正了错误，并增加了几个常用的命令。此脑图适合A4纸打印出来贴在桌子上随时查看。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cmlinux/VIM-Key.png" class="img-center"><br>源文件<a href="https://github.com/higoge/file/raw/master/VIM-Key.xmind" target="_blank" rel="noopener">下载地址</a>。PDF版<a href="https://github.com/higoge/file/raw/master/VIM-Key.pdf" target="_blank" rel="noopener">下载地址</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具09：资源管理器替代者：Total Commander]]></title>
      <url>/2016/02/15/tools09/</url>
      <content type="html"><![CDATA[<p>Total Commander绝对是神器，是键盘流必备的软件。TC的入门比较难，学习有一定的难度，但是学成后对于工作效率的提升有巨大的帮助。<br>本文不介绍TC的使用，强烈推荐<a href="http://weibo.com/xbeta" target="_blank" rel="noopener">xbeta大神</a>的教材<a href="http://yuedu.baidu.com/ebook/1ec4abf0f46527d3240ce0ab###" target="_blank" rel="noopener">一本关于 Total Commander 的书</a>。<br>TC的定制化很强，而我又喜欢极简的风格，所以xbeta的TC配置文件非常符合我的口味。wincmd.ini<a href="http://img.xbeta.info/2016/wincmd.ini" target="_blank" rel="noopener">下载地址1</a>，<a href="https://raw.githubusercontent.com/higoge/file/master/wincmd.ini" target="_blank" rel="noopener">下载地址2</a>。<br><a id="more"></a><br>目前个人使用的TC的界面。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/01.png" class="img-center"></p>
<h3 id="TC快捷键"><a href="#TC快捷键" class="headerlink" title="TC快捷键"></a>TC快捷键</h3><p>制作了一个TC快捷键脑图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/02.png" class="img-center"><br>此脑图使用Xmind制作。源文件<a href="https://github.com/higoge/file/raw/master/tc.xmind" target="_blank" rel="noopener">下载地址</a>。PDF版<a href="https://github.com/higoge/file/raw/master/tc.pdf" target="_blank" rel="noopener">下载地址</a>。</p>
<h3 id="TC的插件"><a href="#TC的插件" class="headerlink" title="TC的插件"></a>TC的插件</h3><p>个人安装的插件如下。</p>
<table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>7ZIP</td>
<td>7Z压缩格式支持</td>
</tr>
<tr>
<td>DiskDir Extended</td>
<td>各种TAR包的支持</td>
</tr>
<tr>
<td>ISO</td>
<td>ISO压缩格式支持</td>
</tr>
<tr>
<td>sftpplug</td>
<td>sftp插件</td>
</tr>
<tr>
<td>wcx_xz</td>
<td>XZ压缩格式支持</td>
</tr>
<tr>
<td>ulister</td>
<td>快速查看Office文件</td>
</tr>
</tbody>
</table>
<p>一般的插件的安装直接到TC的<a href="http://www.ghisler.com/plugins.htm" target="_blank" rel="noopener">官网</a>插件下载，在TC中打开即可。<br>ulistr插件不在TC的官方列表中，请到其<a href="http://totalcmd.net/plugring/oilister.html" target="_blank" rel="noopener">官网</a>下载安装。</p>
<h3 id="Sftp插件"><a href="#Sftp插件" class="headerlink" title="Sftp插件"></a>Sftp插件</h3><p>sftpplug是比较好的插件，一般的与服务器文件的复制粘贴，只要服务器支持SSH，就可以操作，省去了搭建FTP服务的麻烦。<br>在安装完Sftp插件后，需要curl的库，在bin目录下，将<code>libeay32.dll</code>，<code>libssh2.dll</code>和<code>zlib1.dll</code>这三个文件，复制到Sftp插件的目录下，重启TC。下载地址：<a href="http://curl.haxx.se/gknw.net/7.40.0/dist-w32/renamed-curl-7.40.0-devel-mingw32.zip" target="_blank" rel="noopener">32位，libcurl</a>，<a href="http://curl.haxx.se/gknw.net/7.40.0/dist-w64/curl-7.40.0-devel-mingw64.7z" target="_blank" rel="noopener">64位，devel</a>。<br>快捷键<code>Alt+R</code>进入网络文件夹，选择<code>Secure FTP</code>进入SFTP目录。<code>F7</code>新建连接。<br>根据图片填写相关信息即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/tools/03.png" class="img-center"><br>如果使用SSH KEY直接免密码登录，则需要使用<code>puttygen.exe</code>，生成Public Key和Private Key，具体过程如下。</p>
<ol>
<li>开启<code>puttygen.exe</code>。点击读取Putty Key或Generate一个新Key，具体参考<a href="http://higoge.github.io/2015/07/24/tools04/">工具04：PuTTY的小伙伴PuTTYgen和Plink</a>。<br><s>2. 将“Public key for pasting into OpenSSH authorized_key file”框中的所有文字复制到剪贴板。</s><br><s>3. TC中使用<code>Shift+F4</code>快捷键新建文本文件，后缀为<code>.pub</code>，将剪贴板内容粘贴到文本文件中。</s></li>
<li>点击<code>save pulbic key</code>按钮，保存后缀为<code>.pub</code>的文件。</li>
<li><code>puttygen.exe</code>中菜单栏，选择Conversions，Export OpenSSH key，保存为.pem文件。</li>
<li>Sftp的连接中，Public key file选择.pub文件。Private key file选择.pem文件。<br>2017.01.22更新：SFTP目录，其他快捷键：<code>F8/Del</code>删除连接，<code>Enter</code>连接，<code>Alt+Enter</code>更改属性。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Total Commader </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络01：双无线路由器无缝对接设置]]></title>
      <url>/2015/12/17/net01/</url>
      <content type="html"><![CDATA[<p>如果家太大或者墙太多，无线路由器总会有覆盖不到的地方。一般有如下解决方法。</p>
<ol>
<li>再加一个WiFi，利用两个WiFi的WDS(Wireless Distribution System)，进行中继或桥接。优点是省去了布线的麻烦，缺点是传输速率有所下降。不知道网络延时是否会增加，个人感觉延时会增大。</li>
<li>使用<a href="http://item.mi.com/1153200003.html" target="_blank" rel="noopener">小米WiFi放大器</a>。此设备配置简单，价格也便宜(RMB39算是良心价)。从原理来说，也是一个WiFi中继器。所以优缺点同1。</li>
<li>用网线连接两个WiFi。优点是通过网线会降低延时，不会影响传输速率，缺点是物理上要布线，配置也比较麻烦。如果两个WiFi不能很好的配合，会造成客户端仅连接一个WiFi，而不会根据信号强度自动切换WiFi，达不到实际使用效果。</li>
</ol>
<p>本文介绍双无线路由器无缝对接设置。<br><a id="more"></a></p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>日常使用的无线路由器，其实是有三部分组成。</p>
<ol>
<li>无线AP(Access Point)。也就是无线的接入点。仅有无线连接的作用。</li>
<li>二层交换机。实现无线AP和无线路由器的LAN口的数据交换。</li>
<li>路由器。将二层交换网络通过路由协议从WAN口路由到下一跳。</li>
</ol>
<p>其他方面，一般的无线路由器都会有DHCP功能，给客户端自动分配IP地址。</p>
<p>双无线路由器无缝对接，理论上就是用网线连接两个二层交换机，每个交换机又连接无线AP，每个AP设置相同的SSID但不同的信道。这样，客户端会根据信号强度自动选择连接相应的无线AP。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>过程如下。</p>
<ol>
<li>准备两个无线路由器。主路由器A拨号上网，辅助路由器B作为无线AP的扩展使用。</li>
<li>A路由器采用日常配置：配置SSID，WiFi密码，PPPoE拨号连接，开启DHCP并配置相关地址池。无线信道设置为1。</li>
<li>用网线连接A路由器的LAN端口和B路由器的LAN端口。</li>
<li>路由器B的SSID和WiFi密码设置为跟路由器A相同，关闭DHCP功能，WAN口不用设置，LAN口的IP地址和子网掩码设置的与路由器A的DHCP地址池不在同一个网段。无线信道设置为6或11。<br>这样，客户端会根据信号强弱自动连接对应的WiFi，实现无缝对接。</li>
</ol>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>采用Cisco Packet Tracer软件，模拟配置过程。<br>Wireless Router0，作为主路由器，WAN口设置为静态IP地址192.168.10.2，连接服务器192.168.10.1。DHCP连接池从192.168.0.100~192.168.0.127。<br>Wireless Router1，作为扩展路由器，关闭DHCP功能，LAN口地址设置为192.168.1.2/24。<br>两个路由器的SSID为test，信道分别是1和6。<br>开启Physical视图，Laptop拖拽到任何WiFi的信号覆盖范围，都可以打开服务器的主页(Logical视图下用Laptop的浏览器打开<code>http://192.168.10.1</code>)。Laptop的切换连接的WiFi时也不需要重新设定SSID以及用户名密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/network/01.png" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/network/02.png" class="img-center"><br><a href="https://github.com/higoge/file/raw/master/double_wifi.pkt" target="_blank" rel="noopener">文件下载地址</a>，Cisco Packet Tracer软件，请到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)下载(Cisco_Packet_Tracer.7z)。<br>2017.01.20更新：搬家之后亲测有效。</p>
<p>参考：<a href="https://www.v2ex.com/t/88368" target="_blank" rel="noopener">V2EX</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流媒体04：VLC2.2.1的Linux编译及调试]]></title>
      <url>/2015/12/14/sm04/</url>
      <content type="html"><![CDATA[<p>Windows环境下编译的VLC或通过Linux交叉编译的VLC，调试起来非常麻烦，之前的51CTO的博客写过老版本的<a href="http://jeremiah.blog.51cto.com/539865/291032" target="_blank" rel="noopener">VLC的调试</a>，改动太多，速度也很慢，故新版本并没有继续在类似环境下继续折腾VLC的调试。偶然发现Ubuntu下直接编译VLC很快很好很方便，而且配合GDB调试只要加一条指令即可。<br>另外，配合QT Creator，在IDE中设置断点，读取打印变量等都非常的直观。<br>本文介绍VLC2.2.1的Linux编译，当然，编译的主要目的是：<strong>调试</strong>。<br><a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>与交叉编译VLC2.2.1一样的环境，请参考<a href="http://higoge.github.io/2015/07/17/sm02/">流媒体02：Linux交叉编译VLC-2.2.1</a>。</p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在此只记录命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get build-dep vlc -y</span><br><span class="line">$ tar xJvf vlc-2.2.1.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> vlc-2.2.1/</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ ./configure --<span class="built_in">enable</span>-debug</span><br><span class="line">$ make -j2</span><br></pre></td></tr></table></figure></p>
<p>编译完成后，运行测试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./vlc ~/01.avi</span><br></pre></td></tr></table></figure></p>
<p>从运行结果看，VLC的播放窗口与原有界面分离了，没有找到解决原因。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/07.png" class="img-center"></p>
<p>官方的VLC并没有此问题。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vlc</span><br><span class="line">$ vlc ~/01.avi</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/sm/08.png" class="img-center"></p>
<p>通过运行如下命令，可以看到官网VLC的编译脚本，有兴趣的可以研究下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vlc --extraintf=logger -vvv ~/01.avi</span><br></pre></td></tr></table></figure></p>
<p>编译脚本如下。请酌情修改<code>${prefix}</code>相关参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">./configure  &apos;--includedir=$&#123;prefix&#125;/include&apos; \</span><br><span class="line">&apos;--mandir=$&#123;prefix&#125;/share/man&apos; &apos;--infodir=$&#123;prefix&#125;/share/info&apos; \</span><br><span class="line">&apos;--localstatedir=/var&apos; &apos;--libdir=$&#123;prefix&#125;/lib/x86_64-linux-gnu&apos; \</span><br><span class="line">&apos;--libexecdir=$&#123;prefix&#125;/lib/x86_64-linux-gnu&apos; \</span><br><span class="line">&apos;--disable-dependency-tracking&apos; &apos;--build=x86_64-linux-gnu&apos; \</span><br><span class="line">&apos;CPPFLAGS=-D_FORTIFY_SOURCE=2&apos; &apos;LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro&apos; \</span><br><span class="line">&apos;--config-cache&apos; &apos;--disable-maintainer-mode&apos; &apos;--disable-silent-rules&apos; \</span><br><span class="line">&apos;--disable-update-check&apos; &apos;--enable-fast-install&apos; &apos;--prefix=/usr&apos; \</span><br><span class="line">&apos;--docdir=/usr/share/doc/vlc-nox&apos; &apos;--libdir=/usr/lib&apos; &apos;--sysconfdir=/etc&apos; \</span><br><span class="line">&apos;--with-binary-version=1&apos; &apos;--enable-a52&apos; &apos;--enable-aa&apos; &apos;--enable-bluray&apos; \</span><br><span class="line">&apos;--enable-bonjour&apos; &apos;--enable-caca&apos; &apos;--enable-chromaprint&apos; &apos;--enable-dbus&apos; \</span><br><span class="line">&apos;--enable-dca&apos; &apos;--enable-directfb&apos; &apos;--enable-dvbpsi&apos; &apos;--enable-dvdnav&apos; \</span><br><span class="line">&apos;--enable-faad&apos; &apos;--enable-flac&apos; &apos;--enable-fluidsynth&apos; &apos;--enable-freerdp&apos; \</span><br><span class="line">&apos;--enable-freetype&apos; &apos;--enable-fribidi&apos; &apos;--enable-gles1&apos; &apos;--enable-gles2&apos; \</span><br><span class="line">&apos;--enable-gnutls&apos; &apos;--enable-jack&apos; &apos;--enable-kate&apos; &apos;--enable-libass&apos; \</span><br><span class="line">&apos;--enable-libmpeg2&apos; &apos;--enable-libxml2&apos; &apos;--enable-lirc&apos; &apos;--enable-live555&apos; \</span><br><span class="line">&apos;--enable-mad&apos; &apos;--enable-mkv&apos; &apos;--enable-mod&apos; &apos;--enable-mpc&apos; &apos;--enable-mtp&apos; \</span><br><span class="line">&apos;--enable-mux_ogg&apos; &apos;--enable-ncurses&apos; &apos;--enable-notify&apos; &apos;--enable-ogg&apos; \</span><br><span class="line">&apos;--enable-opus&apos; &apos;--enable-pulse&apos; &apos;--enable-qt&apos; &apos;--enable-realrtsp&apos; \</span><br><span class="line">&apos;--enable-samplerate&apos; &apos;--enable-schroedinger&apos; &apos;--enable-sdl&apos; &apos;--enable-sftp&apos; \</span><br><span class="line">&apos;--enable-shine&apos; &apos;--enable-shout&apos; &apos;--enable-skins2&apos; &apos;--enable-speex&apos; \</span><br><span class="line">&apos;--enable-svg&apos; &apos;--enable-taglib&apos; &apos;--enable-theora&apos; &apos;--enable-twolame&apos; \</span><br><span class="line">&apos;--enable-upnp&apos; &apos;--enable-vcdx&apos; &apos;--enable-vdpau&apos; &apos;--enable-vnc&apos; \</span><br><span class="line">&apos;--enable-vorbis&apos; &apos;--enable-x264&apos; &apos;--enable-zvbi&apos; \</span><br><span class="line">&apos;--with-kde-solid=/usr/share/kde4/apps/solid/actions/&apos; \</span><br><span class="line">&apos;--disable-decklink&apos; &apos;--disable-dxva2&apos; &apos;--disable-fdkaac&apos; \</span><br><span class="line">&apos;--disable-gnomevfs&apos; &apos;--disable-goom&apos; &apos;--disable-libtar&apos; \</span><br><span class="line">&apos;--disable-mfx&apos; &apos;--disable-opencv&apos; &apos;--disable-projectm&apos; \</span><br><span class="line">&apos;--disable-sndio&apos; &apos;--disable-svgdec&apos; &apos;--disable-telx&apos; \</span><br><span class="line">&apos;--disable-vpx&apos; &apos;--disable-vsxu&apos; &apos;--disable-wasapi&apos; \</span><br><span class="line">&apos;--enable-alsa&apos; &apos;--enable-atmo&apos; &apos;--enable-dc1394&apos; \</span><br><span class="line">&apos;--enable-dv1394&apos; &apos;--enable-linsys&apos; &apos;--enable-omxil&apos; \</span><br><span class="line">&apos;--enable-udev&apos; &apos;--enable-v4l2&apos; &apos;--enable-libva&apos; &apos;--enable-vcd&apos; \</span><br><span class="line">&apos;--enable-smbclient&apos; &apos;--disable-oss&apos; &apos;--enable-crystalhd&apos; &apos;--enable-mmx&apos; \</span><br><span class="line">&apos;--enable-sse&apos; &apos;--disable-neon&apos; &apos;--disable-altivec&apos; \</span><br><span class="line">&apos;CFLAGS=-g -O2 -fstack-protector-strong -Wformat -Werror=format-security&apos; \</span><br><span class="line">&apos;CXXFLAGS=-g -O2 -fstack-protector-strong -Wformat -Werror=format-security&apos; \</span><br><span class="line">&apos;build_alias=x86_64-linux-gnu&apos; \</span><br><span class="line">&apos;OBJCFLAGS=-g -O2 -fstack-protector-strong -Wformat -Werror=format-security&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><p>运行GDB。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gdb ./vlc</span><br><span class="line">$ b 115</span><br><span class="line">$ run ~/01.avi</span><br></pre></td></tr></table></figure></p>
<p>程序会在<code>vlc.c</code>第116行停止。这就是<code>main</code>函数的入口。</p>
<h3 id="QT-Creator调试"><a href="#QT-Creator调试" class="headerlink" title="QT Creator调试"></a>QT Creator调试</h3><p>安装并启动QT Creator。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install qt-creator</span><br><span class="line">$ qtcreator</span><br></pre></td></tr></table></figure></p>
<p>“New Project” -&gt; “Import Project” -&gt; “Import Existing Project”，输入Project名称，选择VLC-2.2.1的路径。“File Selection”，默认。<br>在<code>bin/vlc.c</code>的115行设置断点，按F5调试，选取VLC的可执行文件，即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/09.png" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 流媒体 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Streaming Media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙07：XX-Net]]></title>
      <url>/2015/12/11/breakwall07/</url>
      <content type="html"><![CDATA[<p>XX-Net是集成了GoAgent和GoGotester，自动扫描可用IP地址添加到GoAgent，一体化配置，非常方便跳墙初学者的使用。<br>IP持续扫描出3000个备用，并根据网络状况选取最快的IP进行访问。速度比GoAgent快太多了，配置也简单太多。<br><a id="more"></a><br><strong>注意</strong>：XX-Net刚开始使用时，速度并不会特别快，因为还没有扫描到足够的IP地址，需要耐性等待几分钟甚至几天的时间，等到其扫描足够多的IP地址，速度就没什么问题了。<br>XX-Net是汪汪目前最常用的科学上网工具。一次搭建，终身使用。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md" target="_blank" rel="noopener">XX-net的GitHub</a>，下载<strong>稳定版</strong>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压后运行<code>start.bat</code>，提示“已导入GoAgent证书”，点击“确定”。桌面上会生成XX-Net的图标。并自动运行浏览器开启配置。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在XX-Net的配置界面，“配置”项中，输入自己的AppID。不输入AppID无法使用。申请AppID可参考<a href="http://higoge.github.io/2015/07/09/breakwall02/#u4F7F_u7528_u81EA_u5DF1_u7684_u8D26_u53F7_u548Cappid">狗急跳墙02：GoAgent &amp; GoGo Tester</a>。临时使用，AppID可填写<code>higoge01</code>。<br>“扫描IP”中，如果是<strong>Windows10用户</strong>，建议关闭“自动调整扫描线程数”并修改“最大扫描线程数”为20，否则会出现声音卡顿的现象。<br>“导入导出IP”中，如果有自己使用的GoGoTester测试出的IP，可在此导入。<br>在“系统”的“配置”页中，根据需求设置“开机自动启动”，“启动时弹出状态页”等。</p>
<h3 id="局域网代理"><a href="#局域网代理" class="headerlink" title="局域网代理"></a>局域网代理</h3><p>XX-Net默认只支持本机代理，若想变为局域网代理，供其他机器上网，则新建配置文件<code>data\gae_proxy\manual.ini</code>，内容如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[listen]</span><br><span class="line">ip = 0.0.0.0</span><br></pre></td></tr></table></figure></p>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>右下角托盘右键，选取代理模式。如选择“全局通过GAEProxy代理”。测试结果如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw07/02.jpg" class="img-center"></p>
<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p>“状态”页，看几个参数。<br><code>IP num/good</code>，<code>good</code>的数量越多越好。<br><code>10th IP handshake(ms)</code>越小越好。<br><code>connected link</code>，是未用过的ssl连接池/通用的gae连接池，只要这两个连接池有可用连接，即可正常使用。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw07/01.jpg" class="img-center"></p>
<p>参考资料：<br><a href="https://github.com/XX-Net/XX-Net/wiki" target="_blank" rel="noopener">XX-net的Wiki</a></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
            <tag> XX-Net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具08：Hexo博客搭建过程]]></title>
      <url>/2015/12/08/tools08/</url>
      <content type="html"><![CDATA[<p>本博客采用<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>搭建在Github上，Hexo是基于Node.js的博客框架，并配合大量的主题，定制个性化的博客。写文章采用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>语法，简单快速，再也不必为各种HTML样式而烦恼。<br>本文记录下搭建的过程。<br><a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：CentOS 7。<br>必备软件：文本编辑器，<a href="http://higoge.github.io/categories/Git/">Git</a>。</p>
<h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl --silent --location https://rpm.nodesource.com/setup | bash -</span></span><br><span class="line"><span class="comment"># yum makecache fast</span></span><br><span class="line"><span class="comment"># yum install -y nodejs</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install -g hexo-cli --https-proxy=http://192.168.80.2:808 \</span></span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<p>参数<code>--https-proxy</code>和<code>--https-proxy</code>是Http代理设置；<code>--registry</code>是从某宝的库安装，原因是Nodejs的官方库被墙了，你懂的。<br>执行过程的时间比较长，需耐心等待。</p>
<h3 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h3><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install  --https-proxy=http://192.168.80.2:808 \</span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>我只是用四个插件，<code>hexo-deployer-git</code>是发布到Git托管服务器上的插件，<code>hexo-generator-feed</code>是博客RSS的插件，<code>hexo-generator-sitemap</code>是给Google搜索使用的插件，<code>hexo-generator-search</code>是内部搜索插件。(2017.02.01更新<code>hexo-generator-search</code>)<br>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save \</span><br><span class="line">        --https-proxy=http://192.168.80.2:808 \</span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">$ npm install hexo-generator-feed --save \</span><br><span class="line">        --https-proxy=http://192.168.80.2:808 \</span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">$ npm install hexo-generator-sitemap --save \</span><br><span class="line">        --https-proxy=http://192.168.80.2:808 \</span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">$ npm install hexo-generator-search --save \</span><br><span class="line">        --https-proxy=http://192.168.80.2:808 \</span><br><span class="line">        --proxy=http://192.168.80.2:808 \</span><br><span class="line">        --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h3><p>执行<code>hexo help</code>可调出命令参考。而<code>hexo</code>命令支持简写。即<code>s</code>可代表<code>server</code>，<code>cl</code>代表<code>clean</code>。<br>常用命令如下。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo cl</td>
<td>清空生产的文件和缓存</td>
</tr>
<tr>
<td>hexo n <title></title></td>
<td>生成标题为<title>的文章</title></td>
</tr>
<tr>
<td>hexo g</td>
<td>生成静态网页</td>
</tr>
<tr>
<td>hexo d</td>
<td>部署到网站</td>
</tr>
<tr>
<td>hexo d -g</td>
<td>生成静态网页并部署到网站</td>
</tr>
<tr>
<td>hexo s</td>
<td>开启Web服务</td>
</tr>
<tr>
<td>–debug</td>
<td>开启调试模式</td>
</tr>
</tbody>
</table>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>修改博客目录下<code>_config.yml</code>文档，请遵循<a href="http://yaml.org/" target="_blank" rel="noopener">YAML</a>语言规范，尤其要注意<code>:</code>后必须有<strong>空格</strong>。<br>修改的参数记录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: XXX</span><br><span class="line">subtitle: XXX</span><br><span class="line">description: XXX</span><br><span class="line">author: XXX</span><br><span class="line">language: XXX</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">url: XXX</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">theme: XXX</span><br><span class="line">stylus:</span><br><span class="line">    compress: true</span><br><span class="line"></span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom       #feed 类型 (atom/rss2)</span><br><span class="line">  path: atom.xml   #rss 路径</span><br><span class="line">  limit: 20        #在 rss 中最多生成的文章数(0显示所有)</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: XXX</span><br><span class="line"></span><br><span class="line"># Local Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p>
<p>基本过程就是这样，执行<code>hexo s</code>后开启浏览器访问<code>http://IP:4000</code>就可看到博客的样貌了。(2017.02.21更新Local Search配置)</p>
<p>(2017.02.21更新) 若主题支持本地搜索，那么修改主题的配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p>
<p>参考文档：<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo Docs</a><br><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="noopener">Hexo系列教程</a></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔03：无题]]></title>
      <url>/2015/08/31/essay03/</url>
      <content type="html"><![CDATA[<p>这篇没想好题目，因为想说的事很凌乱。<br><a id="more"></a></p>
<ol>
<li>上周休假了三天，陪孩子去西霞口野生动物园玩了一圈，这个动物园真心不错，规划的非常好，强烈推荐有孩子的带着去玩玩，没孩子的记住这个地方，这也是个把妹的好去处。威海还有几处温泉，顺便去泡了下，也很不错，各种草药的温泉里面泡泡，什么治疗脱发的壮阳的，不知道有没有用，心理作用可能更大一些吧，泡完了身上光滑了这个是事实。</li>
<li>因为休假，加上本月两个操作失误手机没流量了，导致错过了上海那场著名单口相声曲艺表演的直播。回家后先把这个功课补上了，顺便看了下360的发布会、一加2的发布会。虽然老罗的发布会问题很多，比如被DDOS，比如现场PPT出状况，但都不妨碍那场发布会的效果，不能说成功，只能说效果达到了预期，甚至更好。360的看10分钟就看不下去了，周红衣主教真心的XX，给人的感觉就是其他人都是傻X，就我牛X。一加的刘作虎讲的不错，比雷军说的要好，笑容可掬，至少全程下来，没有让我出门左拐的冲动。</li>
<li>至于手机么，我不玩游戏，看看微信、刷刷微博、偶尔使用下便签，对拍照的要求也不是特别高，国产的这些手机用着都差不多。但因为有孩子，手头这个小米2S摔了不知道多少次了，有一次还被车碾过，居然还坚挺的活着。未来手机要么抗摔点，要么别给孩子玩。总之，不管坚果还是一加2还是小米Note，时间点不对，没有购买的冲动也欲望。等T2吧，等下一场发布会再被情怀和梦想感染一次再说吧。我也不会觉得拿着iPhone6 Plus就是时髦，拿着小米2S就是土鳖。总之，我不是那种追求时髦的人。</li>
<li>不过我媳妇是。9月9日之后，iPhone6S Plus出来，必须买一台送媳妇。</li>
<li>说到360手机，真心没兴趣关注。儿童手表？还是奉劝不要过度依赖这个产品，但凡偷孩子的，估计现在偷到后第一件事就是把孩子手表扔了。教育孩子提升安全意识，如记住家长的电话号码比使用电子跟踪设备更加安全有效。所以，别拿安全说事。就像安全卫士电脑关键之流，不是一个比一个安全，而是一个比一个流氓。百度腾讯就不说了，傅盛做猎豹之前搞的金山杀毒和安全卫士，也强不到哪去，真心不好用。卫士系列还是360的好。可360是流氓头子啊，咋办？我的办法是，安装完了，搞定其他流氓软件之后，把其所有的服务都停了，把自身的自动启动关了，然后退出。用的时候，调出来，处理完了，再关闭。这样能最大限度的降低流氓软件带来伤害，同时也让其为我们服务。至于杀毒么，免费的小红伞就很好用。</li>
<li>今天看到秋叶大叔(说是大叔，也比我大不了几岁，装回90后)发的评论罗辑思维的文章，里面提到了黑罗胖的那篇知乎，找了看了看，看完后想到一个比喻。你说你花2000块找了个高级失足妇女，结果自己秒射了，然后大呼上当受骗智商被碾压，我只想说，是你那几秒的快感，碾压了你的智商。</li>
<li>感觉上当了就别再上当了就是了，感觉人家手机做的不好就不关注呗，翻出人家以前的废话打完人家脸过瘾了就够了。最简单的事情就是作个评论家，而且是永远胜利的评论家。现在兴趣小组那么多，盯着别人的情怀，别人的商业化没完没了的，你不是贱那是什么？关于第2条，我承认我犯贱，果断取关360的一切关注。</li>
<li>非常无语的是，狗急也没用了。百度搜不到这个博客，Google可以。可Google被墙了，那些狗急系列的文章，怎么看都像把解压软件压缩发布一样愚蠢。</li>
<li>前两天收到了自开博客以来，包括以前在51CTO老博客开通以来的第一笔打赏。一个来自学生的打赏，50元。我退回了45元。只留下了5元。理由有两个：学生有闲钱多买书，请我喝东西5元买杯奶茶就够了；我有工作，养活一家四口没问题，不会去实现什么财务自由，搞什么自媒体，没那个实力。打赏就像游戏掉的装备，满足下个人的成就感；同时，让那些一直喊着请我吃饭请我喝茶的朋友有个渠道实现其诺言。</li>
<li>本博说到底，是我个人的知识体系。从印象笔记剪贴收藏网络信息，到OneNote自己整理读书笔记，到最后都想整理到博客中。内容都很基础，或许也很无聊。基于7，不想看的别看行了，其他废话别多说。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶05：忘记root密码咋办]]></title>
      <url>/2015/08/28/ad-linux05/</url>
      <content type="html"><![CDATA[<p><code>root</code>密码是Linux管理员绝对不能忘记的，但总有些马虎的人，需要管理很多系统时尤其容易忘记，。那忘记了咋办？<br>首先，面壁思过五分钟。然后，接着往下看。<br>本文介绍个人使用的四个系统的修改方式。<br><a id="more"></a></p>
<h2 id="CentOS6-6"><a href="#CentOS6-6" class="headerlink" title="CentOS6.6"></a>CentOS6.6</h2><p>重启，进入<code>Grub</code>时，上下方向键选择CentOS6，按<code>e</code>，选择<code>kernel</code>那一项。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/05.png" class="img-center"><br>按<code>e</code>，在后面输入<code>single</code>，回车，按<code>b</code>启动。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/06.png" class="img-center"><br>使用命令<code>passwd root</code>修改<code>root</code>密码，重启。</p>
<h2 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h2><p>重启，进入<code>Grub</code>时，上下方向键选择第一项，按<code>e</code>，进入编辑。<br>在倒数第二行最后，输入<code>rd.break</code>，使用快捷键<code>Ctrl+x</code>启动。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/07.png" class="img-center"><br>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">switch_root <span class="comment"># mount -o rw,remount /sysroot/</span></span><br><span class="line">switch_root <span class="comment"># chroot /sysroot/</span></span><br><span class="line">sh-4.2 <span class="comment"># passwd root</span></span><br><span class="line">sh-4.2 <span class="comment"># touch /.autorelabel</span></span><br><span class="line">sh-4.2 <span class="comment"># exit</span></span><br><span class="line">switch_root <span class="comment"># exit</span></span><br></pre></td></tr></table></figure></p>
<p>若系统启动了SELinux，<code>touch /.autorelabel</code>会保证不出错。最后一个<code>exit</code>之后，SELinux会重新设定文件的Context，需要等待一会，之后就可以正常运行了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/08.png" class="img-center"></p>
<h2 id="Ubuntu15-04-Linuxmint17-2"><a href="#Ubuntu15-04-Linuxmint17-2" class="headerlink" title="Ubuntu15.04/Linuxmint17.2"></a>Ubuntu15.04/Linuxmint17.2</h2><p>Ubuntu系列的修改方式都一样。<br>重启，进入<code>Grub</code>时，上下方向键选择第一项，按<code>e</code>，进入编辑。<br>倒数第二行最后，输入<code>rw init=/bin/bash</code>，快捷键<code>Ctrl+x</code>重启。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/09.png" class="img-center"><br>使用命令<code>passwd root</code>修改<code>root</code>密码，重启。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论06：Linux的启动级别]]></title>
      <url>/2015/08/27/th-linux06/</url>
      <content type="html"><![CDATA[<p>本文介绍Linux的启动级别，属于基础性理论。<br><a id="more"></a></p>
<h2 id="启动级别"><a href="#启动级别" class="headerlink" title="启动级别"></a>启动级别</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/inittab</span><br><span class="line"><span class="comment"># (...)</span></span><br><span class="line"><span class="comment"># Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="comment">#   0 - halt (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#   1 - Single user mode</span></span><br><span class="line"><span class="comment">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span></span><br><span class="line"><span class="comment">#   3 - Full multiuser mode</span></span><br><span class="line"><span class="comment">#   4 - unused</span></span><br><span class="line"><span class="comment">#   5 - X11</span></span><br><span class="line"><span class="comment">#   6 - reboot (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">id:5:initdefault:</span><br></pre></td></tr></table></figure></p>
<p>通过注释，就能了解Linux有7个启动级别，翻译如下。</p>
<blockquote>
<p>0 - 关机(默认级别不要设置为此项)<br>1 - 单用户模式<br>2 - 多用户模式，但没有NFS(同3，如果需要网络)<br>3 - 全多用户模式<br>4 - 此项保留未使用<br>5 - X11(即图形界面)<br>6 - 重启(默认级别不要设置为此项)</p>
</blockquote>
<p>上一篇中使用命令<code>init 0</code>关机，<code>init 6</code>重启，其实就是让Linux系统到达对应的级别。<br>常用级别是<code>3</code>命令行界面和<code>5</code>图形界面，<code>1</code>在系统崩溃开机救援时用的较多。</p>
<h2 id="设置启动级别"><a href="#设置启动级别" class="headerlink" title="设置启动级别"></a>设置启动级别</h2><p><code>/etc/initab</code>中唯一没有注释一行<code>id:5:initdefault:</code>，其中数字<code>5</code>就是当前对应的启动级别。<br>使用<code>root</code>用户修改启动级别，保存，然后重启。</p>
<h2 id="界面的切换"><a href="#界面的切换" class="headerlink" title="界面的切换"></a>界面的切换</h2><p>如果默认启动基本设置为<code>3</code>，系统不启动图形界面，可以节省部分资源。系统默认可以启动6个命令行界面<code>`tty1~tty6</code>，使用快捷键<code>Alt+F*</code>来切换。<code>*</code>的范围是<code>1-6</code>。<br>如果想切换到图像界面，可以使用<code>startx</code>命令。(<code>init 5</code>普通用户无法使用)。若再次退回命令行界面，在X11界面上<code>Log Out</code>或使用快捷键<code>Ctrl + Alt + F*</code>，不退出切换到其他<code>tty</code>，<code>*</code>的范围是<code>1-6</code>，切换回界面使用<code>Alt+F7</code>。<br>如果默认启动级别是<code>5</code>，则占用<code>tty1</code>，使用<code>Log Out</code>会直接登出系统，在图形界面使用快捷键<code>Ctrl + Alt + F*</code>切换到其他<code>tty</code>，再此切换则使用快捷键<code>Alt + F*</code>，如再此切换到图形界面，使用<code>Alt + F1</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令05：重启关机]]></title>
      <url>/2015/08/21/cm-linux05/</url>
      <content type="html"><![CDATA[<p>Linux重启和关机是基本操作，必须掌握。所有操作必须是<code>root</code>或超级管理员权限。普通用户使用<code>su -</code>切换为<code>root</code>用户。<br><a id="more"></a></p>
<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>最常用关机命令为<code>shutdown</code>。<br>其用法如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shutdown [option] time [message]</span></span><br></pre></td></tr></table></figure></p>
<p>参数如下。<br><code>-r</code>: reboot<br><code>-h</code>: halted or powered off<br><code>-P</code>: powered off<br><code>-c</code>: cancels a running shutdown<br><code>-k</code>: only send out warning messages and disable logins</p>
<h2 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shutdown -h now # 关机</span></span><br><span class="line"><span class="comment"># shutdown -h 09:15 # 09:15 关机</span></span><br><span class="line"><span class="comment"># shutdown -h 10 '10分钟之后关机' # 10分钟后关机并发送信息</span></span><br><span class="line"><span class="comment"># shutdown -k 20:00 '虚假关机信息' # 发送关机信息，但并不真正关机</span></span><br><span class="line"><span class="comment"># shutdown -c # 取消正在准备执行的关机指令</span></span><br><span class="line"><span class="comment"># shutdown -r now # 重启</span></span><br></pre></td></tr></table></figure>
<h2 id="reboot，halt，poweroff"><a href="#reboot，halt，poweroff" class="headerlink" title="reboot，halt，poweroff"></a>reboot，halt，poweroff</h2><p><code>reboot</code>，重启。<br><code>halt</code>，挂起。<br><code>poweroff</code>，关机。<br>三个命令有一个共同的参数。<br><code>-f</code>：强制，不去处理<code>init</code>相关操作。</p>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p><code>init</code>是到达某个启动级别，其中，级别<code>0</code>是关机，级别<code>6</code>是重启。故关机重启也可以用如下命令(仅在使用<code>init</code>作为系统管理的操作系统才有效)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># init 6 # 重新启动</span><br><span class="line"># init 0 # 关机</span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶04：cheat--命令的栗子]]></title>
      <url>/2015/08/20/ad-linux04/</url>
      <content type="html"><![CDATA[<p>Linux基础命令中介绍了<code>man</code>和<code>info</code>来获得命令的在线帮助文档，获取命令信息还可以使用帮助参数<code>--help</code>，Bash的内建命令可以使用<code>help command</code>的方式。但所有的信息中，大多数介绍参数的用法，真正的栗子很少。<code>cheat</code>命令可以提供命令的很多栗子，很简洁也很实用。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>基于CentOS6.6解释下安装过程。<br>A. 安装Python和Git<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y python git</span></span><br></pre></td></tr></table></figure></p>
<p>B. 安装pip<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://bootstrap.pypa.io/get-pip.py</span></span><br><span class="line"><span class="comment"># python get-pip.py</span></span><br><span class="line"><span class="comment"># pip install -U pip</span></span><br></pre></td></tr></table></figure></p>
<p>C. 安装依赖文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install docopt pygments</span></span><br></pre></td></tr></table></figure></p>
<p>D. 下载cheat<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/chrisallenlane/cheat.git</span></span><br></pre></td></tr></table></figure></p>
<p>E. 安装cheat<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd cheat</span></span><br><span class="line"><span class="comment"># python setup.py install</span></span><br></pre></td></tr></table></figure></p>
<p>F. 测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cheat -v</span><br><span class="line">cheat 2.1.13</span><br></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>看<code>man</code>的<code>cheat</code>帮助。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cheat man</span><br><span class="line"><span class="comment"># Convert a man page to pdf</span></span><br><span class="line">man -t bash | ps2pdf - bash.pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># View the ascii chart</span></span><br><span class="line">man 7 ascii</span><br></pre></td></tr></table></figure></p>
<p>查看<code>cheat</code>支持的命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cheat -l</span><br><span class="line">7z             /usr/lib/python2.6/site-packages/cheat/cheatsheets/7z</span><br><span class="line">ab             /usr/lib/python2.6/site-packages/cheat/cheatsheets/ab</span><br><span class="line">apk            /usr/lib/python2.6/site-packages/cheat/cheatsheets/apk</span><br><span class="line">apparmor       /usr/lib/python2.6/site-packages/cheat/cheatsheets/apparmor</span><br><span class="line">apt-cache      /usr/lib/python2.6/site-packages/cheat/cheatsheets/apt-cache</span><br><span class="line">apt-get        /usr/lib/python2.6/site-packages/cheat/cheatsheets/apt-get</span><br><span class="line">aptitude       /usr/lib/python2.6/site-packages/cheat/cheatsheets/aptitude</span><br><span class="line">asciiart       /usr/lib/python2.6/site-packages/cheat/cheatsheets/asciiart</span><br><span class="line">asterisk       /usr/lib/python2.6/site-packages/cheat/cheatsheets/asterisk</span><br><span class="line">at             /usr/lib/python2.6/site-packages/cheat/cheatsheets/at</span><br><span class="line">...... <span class="comment"># 后面省略</span></span><br></pre></td></tr></table></figure></p>
<p>自己编写<code>foo</code>命令的<code>cheat</code>。前提是要配置好<code>EDITOR</code>变量，<code>export EDITOR=&#39;vim&#39;</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cheat -e foo</span><br></pre></td></tr></table></figure></p>
<p>编写好的<code>foo</code>命令的cheatsheet放置在<code>~/.cheat</code>目录下。</p>
<p>设置语法高亮，不过设置了没啥用感觉。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> CHEATCOLORS=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>设置自动补全。将以下指令加入到<code>$HOME/.bashrc</code>中。注意<code>cheat.bash</code>的路径。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/cheat/cheat/autocompletion/cheat.bash</span><br></pre></td></tr></table></figure></p>
<p>执行<code>source $HOME/.bashrc</code>中生效。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cheat [tab][tab]</span><br><span class="line">Display all 125 possibilities? (y or n)</span><br></pre></td></tr></table></figure></p>
<p>目前，<code>cheat</code>有125个命令的栗子。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流媒体03：VLC2.2.1的ActiveX编译]]></title>
      <url>/2015/08/19/sm03/</url>
      <content type="html"><![CDATA[<p>VLC2.2.1的ActiveX以及Firefox插件已经从原有的代码中移除，另存了一个工程。本文介绍ActiveX的编译。<br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>与交叉编译VLC2.2.1一样的环境，请参考<a href="http://higoge.github.io/2015/07/17/sm02/">流媒体02：Linux交叉编译VLC-2.2.1</a>。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>在此只记录命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://git.videolan.org/npapi-vlc.git</span><br><span class="line">$ <span class="built_in">cd</span> npapi-vlc</span><br><span class="line">$ git submodule init</span><br><span class="line">$ git submodule update</span><br><span class="line">$ <span class="built_in">export</span> FETCH_NPAPI_FALSE=<span class="string">"#"</span></span><br><span class="line">$ <span class="built_in">export</span> LIBVLC_LIBS=<span class="string">"-L<span class="variable">$HOME</span>/vlc-2.2.1/win32/lib/.libs/ -lvlc"</span></span><br><span class="line">$ <span class="built_in">export</span> LIBVLC_CFLAGS=<span class="string">"-I<span class="variable">$HOME</span>/vlc-2.2.1/win32/_win32/include/ -O2"</span></span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --host=i686-w64-mingw32 --<span class="built_in">disable</span>-npapi</span><br><span class="line">$ make -j2</span><br></pre></td></tr></table></figure></p>
<p><code>--disable-npapi</code>目的是不编译Firefox插件。<code>LIBVLC_LIBS</code>及<code>LIBVLC_CFLAGS</code>路径不要写错，否则编译不通过。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将<code>npapi-vlc\activex\.lib\axvlc.dll</code>和<code>npapi-vlc\share\test</code>两个文件夹复制到编译好的VLC目录中(Windows下)。编辑<code>install.bat</code>脚本，内容如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 axvlc.dll</span><br></pre></td></tr></table></figure></p>
<p>编辑<code>uninstall.bat</code>卸载脚本，内容如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 axvlc.dll /u</span><br></pre></td></tr></table></figure></p>
<p>目录结构如图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/03.png" class="img-center"><br>运行<code>install.bat</code>，提示成功。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/04.png" class="img-center"><br>用<code>IE</code>打开<code>test/test.html</code>，MRL输入本地视频路径<code>file:///e:/98.temp/01.avi</code>或网络路径<code>http://streams.videolan.org/streams/mp4/Mr_MrsSmith-h264_aac.mp4</code>，点击<code>Go</code>即可播放。<strong>注意</strong>：本地路径一定要加前缀<code>file:///</code>，分隔符用<code>/</code>，否则会提示播放失败。</p>
<p><code>IE8</code>测试结果。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/05.png" class="img-center"><br><code>IE11</code>测试结果。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/06.png" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 流媒体 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Streaming Media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令04：info]]></title>
      <url>/2015/08/18/cm-linux04/</url>
      <content type="html"><![CDATA[<p><code>info</code>是Linux的另一个帮助文档，相对于<code>man</code>将所有的信息都显示在一页上，<code>info</code>增加了节点(章节)，对于大型文档，对其进行章节分类显得更加友好。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/cmlinux/03.png" class="img-center"><br>如图所示，带<code>*</code>的都是节点，可以移动光标过去，按<code>Enter</code>键进入。</p>
<h2 id="操作按键"><a href="#操作按键" class="headerlink" title="操作按键"></a>操作按键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>n</td>
<td>下一个</td>
</tr>
<tr>
<td>p</td>
<td>上一个</td>
</tr>
<tr>
<td>u</td>
<td>上一层节点</td>
</tr>
<tr>
<td>tab</td>
<td>节点间切换</td>
</tr>
<tr>
<td>PgUp</td>
<td>上翻页</td>
</tr>
<tr>
<td>PgDn</td>
<td>下翻页</td>
</tr>
<tr>
<td>b</td>
<td>第一个node处</td>
</tr>
<tr>
<td>e</td>
<td>最后一个node处</td>
</tr>
<tr>
<td>s(/)</td>
<td>搜索</td>
</tr>
<tr>
<td>{</td>
<td>上一个搜索关键词</td>
</tr>
<tr>
<td>}</td>
<td>下一个搜索关键词</td>
</tr>
<tr>
<td>h</td>
<td>帮助</td>
</tr>
<tr>
<td>?</td>
<td>命令一览表</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
</tbody>
</table>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><code>--vi-keys</code>：使用类似<code>vi</code>或者<code>less</code>命令的操作按键。<br>在此模式下，使用<code>tab</code>切换节点，按<code>ctrl+x Enter</code>进入节点，按<code>PgUp</code>返回上一层节点。<br><code>info</code>是基于<code>emacs</code>的按键，因此使用此参数后，第1章所有的按键均失效。按<code>h</code>调出按键帮助菜单，里面有详细的按键说明。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令03：man]]></title>
      <url>/2015/08/17/cm-linux03/</url>
      <content type="html"><![CDATA[<p><code>man</code>命令是Linux在线参考手册的接口命令，所有的Linux命令都有参考手册，虽然是英文的，但耐心认真的读参考手册，可以学到<strong>无穷</strong>的知识，也可以解决Linux的大部分问题。<br><a id="more"></a></p>
<h2 id="手册分类"><a href="#手册分类" class="headerlink" title="手册分类"></a>手册分类</h2><p>最常用的是<code>1</code>用户命令，<code>3(p)</code>库函数，<code>7</code>惯例和协议。</p>
<table>
<thead>
<tr>
<th>分类号</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>User Commands</td>
</tr>
<tr>
<td>2</td>
<td>System Calls</td>
</tr>
<tr>
<td>3</td>
<td>C Library Functions</td>
</tr>
<tr>
<td>4</td>
<td>Devices and Special Files</td>
</tr>
<tr>
<td>5</td>
<td>File Formats and Conventions</td>
</tr>
<tr>
<td>6</td>
<td>Games et. Al.</td>
</tr>
<tr>
<td>7</td>
<td>Miscellanea</td>
</tr>
<tr>
<td>8</td>
<td>System Administration tools and Deamons</td>
</tr>
<tr>
<td>p</td>
<td>POSIX Programmer’s Manual</td>
</tr>
</tbody>
</table>
<p>关于Linux Programmer’s Manual和POSIX Programmer’s Manual的区别，也就是如<code>3</code>和<code>3p</code>的区别，见<a href="http://stackoverflow.com/questions/479173/linux-newbie-linux-vs-posix-manual" target="_blank" rel="noopener">此</a>。</p>
<blockquote>
<p>Basically, the linux manuals are documentation of the commands/APIs from their writers; The POSIX manuals are from the POSIX standard. Usually, the “normal” ones are shorter and terser, but deal with the specific implementation; the POSIX ones are longer and more detailed (see man 3p read), but only tell what is in the standard.</p>
<p>The best is to look in both.</p>
</blockquote>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><code>-f</code>: 按照完整全名查找手册。其实，是调用<code>whatis</code>命令，用完整名查询<code>whatis</code>数据库。<br><code>-k</code>: 查询匹配的手册。其实，是调用<code>apropos</code>命令，用字符串匹配<code>whatis</code>数据库。<br><code>no</code>: <code>no</code>就是分类号码。直接进入命令的对应分类手册。</p>
<h2 id="肌肉训练"><a href="#肌肉训练" class="headerlink" title="肌肉训练"></a>肌肉训练</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ man -f man <span class="comment"># 查询man的手册分类</span></span><br><span class="line">man (7)              - macros to format man pages</span><br><span class="line">man (1)              - an interface to the on-line reference manuals</span><br><span class="line">man (1p)             - display system documentation</span><br><span class="line"></span><br><span class="line">$ man man <span class="comment"># 进入man命令的参考手册 默认进入分类1</span></span><br><span class="line"></span><br><span class="line">$ man 7 man <span class="comment"># 进入man的分类7的手册</span></span><br><span class="line"></span><br><span class="line">$ man -k <span class="built_in">printf</span> <span class="comment"># 查询所有包含printf字符串的手册</span></span><br><span class="line">asprintf (3)         - <span class="built_in">print</span> to allocated string</span><br><span class="line">dprintf (3)          - <span class="built_in">print</span> to a file descriptor</span><br><span class="line">fprintf (3)          - formatted output conversion</span><br><span class="line">fprintf (3p)         - <span class="built_in">print</span> formatted output</span><br><span class="line">fwprintf (3)         - formatted wide-character output conversion</span><br><span class="line">fwprintf (3p)        - <span class="built_in">print</span> formatted wide-character output</span><br><span class="line">ldns_buffer_printf (3) - (unknown subject)</span><br><span class="line"><span class="built_in">printf</span> (1)           - format and <span class="built_in">print</span> data</span><br><span class="line"><span class="built_in">printf</span> (1p)          - write formatted output</span><br><span class="line"><span class="built_in">printf</span> (3)           - formatted output conversion</span><br><span class="line"><span class="built_in">printf</span> (3p)          - <span class="built_in">print</span> formatted output</span><br><span class="line">...... <span class="comment"># 省略了中间内容</span></span><br><span class="line">wprintf (3p)         - <span class="built_in">print</span> formatted wide-character output</span><br></pre></td></tr></table></figure>
<h2 id="操作按键"><a href="#操作按键" class="headerlink" title="操作按键"></a>操作按键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>j</td>
<td>向下</td>
</tr>
<tr>
<td>k</td>
<td>向上</td>
</tr>
<tr>
<td>space</td>
<td>下翻页</td>
</tr>
<tr>
<td>PgUp/u</td>
<td>上翻页</td>
</tr>
<tr>
<td>PgDn/d</td>
<td>下翻页</td>
</tr>
<tr>
<td>Home/gg</td>
<td>第一页</td>
</tr>
<tr>
<td>End/G</td>
<td>最后一页</td>
</tr>
<tr>
<td>/string</td>
<td>向下查找string</td>
</tr>
<tr>
<td>?string</td>
<td>向上查找string</td>
</tr>
<tr>
<td>n</td>
<td>下一个</td>
</tr>
<tr>
<td>N</td>
<td>上一个</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>no</td>
<td>跳转到no行</td>
</tr>
</tbody>
</table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>注意</strong>，<code>man</code>命令其实是调用的<code>less</code>命令显示<code>whatis</code>数据库的内容，所以<code>man</code>的按键和<code>less</code>的按键是一样的，而<code>less</code>的命令和<code>vim</code>阅读模式的光标移动的按键是一样的。学了<a href="http://higoge.github.io/2016/05/15/cm-linux06/">vim</a>后，所有按键都会统一。<br>CentOS6.6的<code>/etc/man.conf</code>是<code>man</code>的配置文档，<code>MANSECT</code>参数可以设置显示分类的顺序。<br>CentOS7对应的是<code>/etc/man_db.conf</code>，参数是<code>SECTION</code>。<br>2017.01.20更新：如果使用<code>man -f</code>或者<code>man -k</code>找不到任何信息，尤其是新系统刚建立的时候，那么是因为<code>whatis</code>数据库尚未建立或更新，请执行如下命令。<br>CentOS6.6：<code>makewhatis</code>。<br>CentOS7：<code>mandb</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶03：双网卡绑定]]></title>
      <url>/2015/08/14/ad-linux03/</url>
      <content type="html"><![CDATA[<p>昨天有位亲问询我Linux关于双网卡绑定的事，以前折腾过，这回的折腾记录在此。</p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>测试环境是CentOS6.6的虚拟机，添加了一个网卡，网络连接模式NAT。</p>
<h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><p><code>NetworkManager</code>服务是供界面使用网盘配置服务，其会影响网络服务的运行，故关闭之。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service NetworkManager stop</span></span><br><span class="line"><span class="comment"># chkconfig NetworkManager off</span></span><br><span class="line"><span class="comment"># chkconfig --list NetworkManager</span></span><br><span class="line">NetworkManager  0:off   1:off   2:off    3:off    4:off    5:off    6:off</span><br></pre></td></tr></table></figure></p>
<h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><p>新建<code>bond0</code>网卡文件，内容如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-bond0</span></span><br><span class="line">DEVICE=bond0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">IPADDR=192.168.80.6</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.80.1</span><br><span class="line">DNS1=192.168.80.1</span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=<span class="string">"System bond0"</span></span><br><span class="line">ARPCHECK=NO</span><br></pre></td></tr></table></figure></p>
<p>修改<code>eth0</code>，<code>eth1</code>网卡文件内容。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br><span class="line"><span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth1</span></span><br><span class="line">DEVICE=eth1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure></p>
<p>在文件<code>/etc/modprobe.d/dist.conf</code>文件下添加如下内容。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> bond0 bonding</span><br><span class="line">options bond0 mode=1 miimon=100</span><br></pre></td></tr></table></figure></p>
<p><code>mode=0</code>是负载均衡模式，即双网卡分流网络负载。若两个网卡接入同一个交换机，交换机需将这两个网口用聚合方式绑定。<br><code>mode=1</code>是主备模式，一个网卡工作，一个网卡备用，某个网卡断掉，另一个网卡启动工作。<br><code>miimon=100</code>是链路检测时间，100毫秒检测一次。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重启虚拟机。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure></p>
<p>查看运行信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/net/bonding/bond0</span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.6.0 (September 26, 2009)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: eth0</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth0</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:8c:f7:3d</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth1</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:8c:f7:47</span><br><span class="line">Slave queue ID: 0</span><br></pre></td></tr></table></figure></p>
<p><code>Currently Active Slave: eth0</code>现在主要工作的是<code>eth0</code>。<br>虚拟机断开网卡1的连接。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/03.png" class="img-center"><br>再查看信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/net/bonding/bond0</span></span><br><span class="line">Ethernet Channel Bonding Driver: v3.6.0 (September 26, 2009)</span><br><span class="line"></span><br><span class="line">Bonding Mode: fault-tolerance (active-backup)</span><br><span class="line">Primary Slave: None</span><br><span class="line">Currently Active Slave: eth1</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 100</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth0</span><br><span class="line">MII Status: down</span><br><span class="line">Speed: Unknown</span><br><span class="line">Duplex: Unknown</span><br><span class="line">Link Failure Count: 1</span><br><span class="line">Permanent HW addr: 00:0c:29:8c:f7:3d</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eth1</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:8c:f7:47</span><br><span class="line">Slave queue ID: 0</span><br></pre></td></tr></table></figure></p>
<p><code>eth0</code>的<code>MII Status: down</code>，所以现在<code>Currently Active Slave: eth1</code>。<code>ping</code>一下连通性没有问题，中间断了一下，是那个ICMP包正好处于链路检测时间内，系统尚未判断<code>eth0</code>挂掉，也就还没有启动<code>eth1</code>，导致了无响应。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/04.png" class="img-center"><br>此时，如果再断开网卡2，则网络全部挂掉；或若重启网卡1，由于网卡2工作正常，网卡1变为备用网卡。通过命令<code>cat /proc/net/bonding/bond0</code>均能看到其详细信息。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>本章未亲自测试过</strong>。<br>A. CentOS7的双网卡绑定可以采用<a href="https://www.centos.org/forums/viewtopic.php?f=50&amp;t=48744" target="_blank" rel="noopener">Team模式</a>，或者旧有的<a href="http://phreek.org/blog/2014/11/centos-7-lacp-network-bonding" target="_blank" rel="noopener">bond模式</a>。<br>B. 多网卡绑定多个<code>bond</code>，只是在<code>/etc/modprobe.d/dist.conf</code>的内容有所不同。<br>多个<code>bond</code>设置成相同的模式。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> bond0 bonding</span><br><span class="line"><span class="built_in">alias</span> bond1 bonding</span><br><span class="line">options bonding max_bonds=2 miimon=200 mode=1</span><br></pre></td></tr></table></figure></p>
<p>多个<code>bond</code>设置成不同的模式。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> bond0 bonding</span><br><span class="line">options bond0 miimon=100 mode=1</span><br><span class="line">install bond1 /sbin/modprobe bonding -o bond1 miimon=200 mode=0</span><br></pre></td></tr></table></figure></p>
<p>具体设置方法可以参考<a href="http://blog.csdn.net/wuweilong/article/details/39720571" target="_blank" rel="noopener">这篇</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令02：nano编辑器]]></title>
      <url>/2015/08/13/cm-linux02/</url>
      <content type="html"><![CDATA[<p>nano(Nano’s ANOther editor)是一种简单小巧的文本编辑器，是Linux命令行的记事本。相对于编辑器大神Emacs和vim，nano简单易学上手快，对于初学者编辑文档完全够用。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一般的CentOS系统都默认安装了nano，如果未安装，则执行如下命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install nano</span></span><br></pre></td></tr></table></figure></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nano [filename]</span><br></pre></td></tr></table></figure>
<p>可直接启动nano，也可启动nano时打开文件。<br>启动后界面如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cmlinux/02.png" class="img-center"><br>其中快捷键的<code>^</code>表示<code>Ctrl</code>键，<code>M</code>表示<code>Alt</code>键。<br>编辑文档，上下左右移动，<code>Ctrl+o</code>保存，<code>Ctrl+x</code>退出。</p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+g(F1)</td>
<td>Get Help</td>
</tr>
<tr>
<td>ctrl+x(F2)</td>
<td>退出</td>
</tr>
<tr>
<td>ctrl+o(F3)</td>
<td>保存文件</td>
</tr>
<tr>
<td>ctrl+r(F5)</td>
<td>读取文件</td>
</tr>
<tr>
<td>ctrl+w(F6)</td>
<td>搜索字符串</td>
</tr>
<tr>
<td>ctrl+k(F9)</td>
<td>剪切当前行</td>
</tr>
<tr>
<td>ctrl+u(F10)</td>
<td>粘贴</td>
</tr>
<tr>
<td>ctrl+_</td>
<td>到达某行</td>
</tr>
</tbody>
</table>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令01：命令的反馈形式]]></title>
      <url>/2015/08/12/cm-linux01/</url>
      <content type="html"><![CDATA[<p>本文开始正式介绍Linux命令。</p>
<p>Linux的命令一般有三种反馈形式。<br>A. 无任何反馈，表示成功。<br>B. 有输出反馈或交互提示。大部分命令都有输出反馈，如查看文件列表<code>ls</code>，如删除文件的确认<code>rm -r</code>。<br>C. 进入命令环境。<br><a id="more"></a></p>
<p>举个栗子。<br>A. 在虚拟机中执行<code>yam makecache</code>时，会狂写硬盘导致系统不流畅，可以执行<code>sync</code>命令刷新操作系统缓冲，让其写到硬盘中。<code>sync</code>命令执行成功后无任何反馈。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[learnit@CentOS ~]$ sync</span><br><span class="line">[learnit@CentOS ~]$</span><br></pre></td></tr></table></figure></p>
<p>B. 大多数命令有输出的，反馈如查看文件列表<code>ls</code>。有些命令会有交互提示，如输入密码，确认等。如普通用户使用<code>sudo</code>开启服务<code>sudo service start XXX</code>时，需要密码提示，删除文件<code>rm -i XXX</code>时需要确认。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[learnit@CentOS ~]$ ls <span class="comment"># 查看文件</span></span><br><span class="line">01.c  Desktop  man.config  man.config.dos</span><br><span class="line">[learnit@CentOS ~]$ sudo service network restart <span class="comment"># 重启网络服务</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> learnit:</span><br><span class="line">Shutting down interface eth0:  Device state: 3 (disconnected)</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Shutting down loopback interface:                          [  OK  ]</span><br><span class="line">Bringing up loopback interface:                            [  OK  ]</span><br><span class="line">Bringing up interface eth0:  Active connection state: activated</span><br><span class="line">Active connection path: /org/freedesktop/NetworkManager/ActiveConnection/1</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">[learnit@CentOS ~]$ rm -i man.config.dos <span class="comment"># 删除文件，删除时确认</span></span><br><span class="line">rm: remove regular file `man.config.dos<span class="string">'? y</span></span><br></pre></td></tr></table></figure></p>
<p>C. 进入命令环境。最典型的是编辑器或文本查看器。如<code>man XXX</code>，<code>less XXX</code>，<code>vim XXX</code>等。进入命令环境后，根据命令的内部指令进行操作。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cmlinux/01.png" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础06：开源协议]]></title>
      <url>/2015/08/11/basic06/</url>
      <content type="html"><![CDATA[<p>一直没有把开源协议搞搞清楚，最近研究了下，记录在此。</p>
<p>主要参考文档：</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">如何选择开源许可证？</a></li>
<li><a href="http://coolshell.cn/articles/4657.html" target="_blank" rel="noopener">狗日的开源软件许可证</a></li>
<li><a href="http://choosealicense.com/" target="_blank" rel="noopener">Choosing an OSS license doesn’t need to be scary</a></li>
<li><a href="http://www.zhihu.com/question/28292322/answer/40238421" target="_blank" rel="noopener">知乎-开源许可证都有什么区别,一般开源项目用什么许可证?</a><a id="more"></a>
</li>
</ol>
<p>最简单的区别，<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰</a>大神的图片。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic-new/03.png" class="img-center"><br>还有两张来自<a href="http://coolshell.cn/articles/4657.html" target="_blank" rel="noopener">耗子哥</a>的图片，也可作为参考。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic-new/04.png" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/basic-new/05.png" class="img-center"></p>
<p>废话不多说，看图比说一万个字更有效。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论05：Linux的目录结构]]></title>
      <url>/2015/08/10/th-linux05/</url>
      <content type="html"><![CDATA[<p>本文介绍Linux的目录结构，属于基础理论。<br><a id="more"></a></p>
<h2 id="Linux的目录"><a href="#Linux的目录" class="headerlink" title="Linux的目录"></a>Linux的目录</h2><p>Linux的所有目录都是从根目录开始，根目录表示为<code>/</code>。此与Windows不同，Windows的所有目录是从盘符开始，如<code>C:</code>，<code>D:</code>。<br>根目录下的一级目录有其各自特定的功能，一般是遵循一定的规则。这个规则是由<a href="http://www.pathname.com/fhs/" target="_blank" rel="noopener">FHS</a>规定的。用脑图展示如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/thlinux/01.png" class="img-center"><br><strong>注意</strong>：<code>usr</code>不是User的缩写，而是<strong><code>Unix Software Resource</code></strong>的缩写。脑图原版<a href="https://github.com/higoge/file/raw/master/Linux_FHS.xmind" target="_blank" rel="noopener">下载</a>。</p>
<h2 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h2><p>绝对路径是以根目录开始的路径。如<code>/etc/sysconfig/network-scripts/ifcfg-eno1</code>。<br>相对路径不以根目录开始的路径。如当前目录是<code>~</code>，即<code>/home/learnit</code>，则上述绝对路径的相对于<code>~</code>的路径为<code>../../etc/sysconfig/network-scripts/ifcfg-eno1</code>。<br>每个目录下都有两个文件夹，<code>.</code>表示当前路径，<code>..</code>表示上一层文件夹。根目录的<code>.</code>=<code>..</code>=<code>/</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础05：硬盘分区和硬盘模式]]></title>
      <url>/2015/08/07/basic05/</url>
      <content type="html"><![CDATA[<p>最近学习Linux硬盘分区，研究了GPT分区表以及硬盘模式，记录在此。<br><a id="more"></a></p>
<h2 id="硬盘分区表"><a href="#硬盘分区表" class="headerlink" title="硬盘分区表"></a>硬盘分区表</h2><p>传统分区表采用MBR模式，硬盘的第一个扇区(Sector)512B中，MBR(Master Boot Record)占有446字节；分区表(Partition Table)占有64字节，即4个16字节的硬盘分区表(DPT)；结束标识占2B(0x55AA)，MBR分区表不支持容量大于2.2TB(2.2 × 1012字节)的分区，也不支持大于2TB的硬盘，支持最多4个主分区或最多3个主分区+1个扩展分区。扩展分区中，支持多个逻辑分区。一般电脑都会支持MBR模式。</p>
<p>GPT(GUID Partition Table)全局唯一标识分区表是另一种硬盘分区表结构。相对MBR，GPT支持2TB以上硬盘，分区个数几乎没限制(Windows支持128个分区)，故不存在主分区和扩展分区的概念，每个分区都是主分区。另外，分区表自带备份，在磁盘的首尾部分别保存了一份相同的分区表，其中一份被破坏后，可以通过另一份恢复。<br>GPT方式需要主板BIOS支持EFI系统(说BIOS支持可能不太准确，因为EFI系统跟BIOS系统是平级的，没具体研究)，操作系统也要支持。目前，Windows Vista以上系统支持GPT分区表，Linux主流发行版大部分均支持GPT分区表。</p>
<p>但Windows7安装在GPT分区表中可能会出现找不到硬盘的情况，解决方法见<a href="http://blog.csdn.net/techzero/article/details/8921206" target="_blank" rel="noopener">此</a> (此文章没有亲自验证)。</p>
<p>个人电脑BIOS切换为UEFI方式，见图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic-new/01.png" class="img-center"></p>
<p>VMWare Workstation建立Windows 10虚拟机时，会提示固件类型，可选择EFI方式。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic-new/02.png" class="img-center"></p>
<p>如果VMware Workstation没有提示，如安装Linux系统时，则可在建立虚拟机后，修改<a href="http://higoge.github.io/2015/07/01/vm12/#vmx文件">虚拟机配置文件</a><code>.vmx</code>，加入一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firmware=&quot;efi&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="硬盘模式"><a href="#硬盘模式" class="headerlink" title="硬盘模式"></a>硬盘模式</h2><p>主要是ATA和AHCI的区别。<br>ATA(Advanced Technology Attachment)是IDE硬盘的接口规范，也可以理解为一种工作模式。<br>AHCI(Advanced Host Controller Interface)是串行ATA高级主控接口的一种硬盘工作模式，主要用于SATA接口硬盘。此种工作模式会提高硬盘运行速度。<br>所以，SATA硬盘选用AHCI模式即可。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程10：搭建私有GitLab]]></title>
      <url>/2015/08/06/git-remote10/</url>
      <content type="html"><![CDATA[<p><a href="&quot;http://higoge.github.io/2015/08/05/git-remote09/&quot;">上一篇</a>博文介绍了搭建私有的Git Server。此方式适合小型团队使用，而且项目最好比较单一。如果是人数较多的团队，工程比较多，日常的维护工作量会很大。GitHub和GitLab很好用，但GitHub只能提供Public机制的库。GitLab可以提供Private机制的库，可是速度实在是太慢了。最好的方法是在团队服务器上搭建类似的服务，安全性和服务均可保障，本文介绍如何搭建GitLab服务。<br><a id="more"></a></p>
<h2 id="环境和准备工作"><a href="#环境和准备工作" class="headerlink" title="环境和准备工作"></a>环境和准备工作</h2><p>操作系统：CentOS6.6<br>IP地址：192.168.80.6<br>建立<code>git</code>用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># useradd git</span><br><span class="line"># passwd git # 输入git密码</span><br><span class="line">Changing password for user git.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: it is WAY too short</span><br><span class="line">BAD PASSWORD: is too simple</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure></p>
<p>关闭防火墙。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service iptables stop</span></span><br><span class="line"><span class="comment"># chkconfig iptables off</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install curl openssh-server postfix cronie</span></span><br><span class="line"><span class="comment"># service postfix start</span></span><br><span class="line"><span class="comment"># chkconfig postfix on</span></span><br><span class="line"><span class="comment"># lokkit -s http -s ssh</span></span><br></pre></td></tr></table></figure>
<h2 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span></span><br><span class="line"><span class="comment"># yum install gitlab-ce</span></span><br></pre></td></tr></table></figure>
<p>整个包有300多MB，如果使用<code>yum</code>无法下载，可以直接<a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="noopener">下载RPM包</a>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget -c https://packages.gitlab.com/gitlab/gitlab-ce/el/6/x86_64/gitlab-ce-7.13.3-ce.1.el6.x86_64.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>若还是很慢，复制下载地址用下载工具下载。<s>汪汪的网盘也提供了下载，路径为<code>/GitLab</code></s>。<br>手动安装rpm包。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh gitlab-ce-7.13.3-ce.1.el6.x86_64.rpm</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置GitLab"><a href="#配置GitLab" class="headerlink" title="配置GitLab"></a>配置GitLab</h2><p>直接启动GitLab并不能正常工作，需要进行配置，其所有的配置都在配置文件<code>/etc/gitlab/gitlab.rb</code>中。此文件太长，太多的注释，后期研究可以查看此文档，在此从简配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mv /etc/gitlab/gitlab.rb&#123;,.bck&#125;</span><br><span class="line"># echo external_url \&apos;http://192.168.80.6:8081\&apos; &gt;&gt; /etc/gitlab/gitlab.rb</span><br><span class="line"># echo gitlab_rails[\&apos;gitlab_email_from\&apos;] = \&apos;higoge@learnit.com\&apos; &gt;&gt; /etc/gitlab/gitlab.rb</span><br><span class="line"># echo git_data_dir \&quot;/home/git\&quot; &gt;&gt; /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure></p>
<p>解释如下：第一个命令是备份配置文件，第二个命令是配置访问IP和端口，第三个命令是发送确认邮件的邮箱(无需真实存在)，第四个命令是git的数据dir。<br>每次修改完配置文件，都需要执行如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<h2 id="测试及注册用户"><a href="#测试及注册用户" class="headerlink" title="测试及注册用户"></a>测试及注册用户</h2><p>开启浏览器输入<code>http://192.168.80.6:8081</code>，应该就可以看到主界面了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/github01.png" class="img-center"><br>按照步骤进行注册，会给注册邮箱发送确认信息邮件。Gmail直接把邮件当垃圾邮件了，不管如何，点击“Confirm your account”，确认即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/github02.png" class="img-center"><br>之后就可以创建Project，配置SSH Key，进行Clone和推送拉取了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/github03.png" class="img-center"><br>新建的项目在服务器的地址是<code>/home/git/repositories/learnit</code>下，每个项目有两个git目录，一个是项目本身的，一个是项目WIKI的。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls /home/git/repositories/learnit</span></span><br><span class="line">firstproject.git  firstproject.wiki.git</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>第1章为了简化配置，我们关闭了防火墙，如有需要，请自行配置防火墙。<br>关于GitLab的更加详细的配置，请参考GitLab的<a href="http://doc.gitlab.com/omnibus/" target="_blank" rel="noopener">官方文档</a>。<br>GitLab的免费社区版和收费企业版的区别<a href="https://about.gitlab.com/features/#compare" target="_blank" rel="noopener">见此</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
            <tag> GitLab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程09：Git服务搭建]]></title>
      <url>/2015/08/05/git-remote09/</url>
      <content type="html"><![CDATA[<p>GitHub和Gitlab是最常见的两个免费的Git Server，本博客就是搭建在GitHub上，GitLab没有于GitHub出名，其提供了免费的私有Git库，GitHub的私有库则是收费的。也可以在自己的服务器上搭建Git远程库，推送和拉取的速度比直接使用GitHub快，也不会存在安全性问题，本文介绍相关操作。<br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS6.6<br>服务器IP地址：192.168.80.6<br>服务器Git版本：1.7.1<br>若服务器没有安装Git，请先安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install git</span></span><br></pre></td></tr></table></figure></p>
<p>客户端：Win7，Cygwin<br>客户端IP地址：192.168.80.2</p>
<h2 id="创建Git用户"><a href="#创建Git用户" class="headerlink" title="创建Git用户"></a>创建Git用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># useradd git</span></span><br><span class="line"><span class="comment"># passwd git # 输入git密码</span></span><br><span class="line">Changing password <span class="keyword">for</span> user git.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: it is WAY too short</span><br><span class="line">BAD PASSWORD: is too simple</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>
<h2 id="创建裸仓库"><a href="#创建裸仓库" class="headerlink" title="创建裸仓库"></a>创建裸仓库</h2><p>假设仓库名为<code>gitserver.git</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># su - git # 切换到git用户</span></span><br><span class="line">$ <span class="built_in">cd</span> ~git</span><br><span class="line">$ mkdir gitserver.git; <span class="built_in">cd</span> gitserver.git</span><br><span class="line">$ git init --bare <span class="comment"># 创建裸仓库</span></span><br></pre></td></tr></table></figure></p>
<p>裸与普通仓库的区别是，裸仓库不放置具体代码，仅放置Git的信息，即裸仓库的根文件夹就是普通仓库的.git文件夹。</p>
<h2 id="配置SSH连接"><a href="#配置SSH连接" class="headerlink" title="配置SSH连接"></a>配置SSH连接</h2><p>Git客户端可以为TortoiseGit，msysGit，本人使用Cygwin下自带的Git。请参考<a href="http://higoge.github.io/2015/07/15/tools01/">工具01：Cygwin的安装配置</a>，<a href="http://higoge.github.io/2015/07/24/tools04/">工具04：PuTTY的小伙伴PuTTYgen和Plink</a>。</p>
<p>开启Cygwin。先连接之前PuTTYgen生成的SSH的Key文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /cygdrive/e/putty.pem id_rsa</span><br><span class="line">$ ln -s /cygdrive/e/putty.pub id_rsa.pub</span><br></pre></td></tr></table></figure></p>
<p>将Key发送给服务器，过程中输入git密码。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id git@192.168.80.6</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">git@192.168.80.6<span class="string">'s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   "ssh '</span>git@192.168.80.6<span class="string">'"</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure></p>
<p>验证下是否可以免密码登录。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh git@192.168.80.6 <span class="comment"># 无输入密码提示</span></span><br><span class="line">[git@CentOS ~]$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to 192.168.80.6 closed.</span><br></pre></td></tr></table></figure></p>
<p>其他客户端也可类似配置PuTTYgen生成的key</p>
<h2 id="clone仓库并操作"><a href="#clone仓库并操作" class="headerlink" title="clone仓库并操作"></a>clone仓库并操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@192.168.80.6:gitserver</span><br><span class="line">正克隆到 <span class="string">'gitserver'</span>...</span><br><span class="line">warning: 您似乎克隆了一个空版本库。</span><br><span class="line">检查连接... 完成。</span><br><span class="line">$ <span class="built_in">cd</span> gitserver</span><br><span class="line">$ mkdir 测试</span><br><span class="line">$ <span class="built_in">echo</span> hello测试 &gt; 测试/测试文本.txt <span class="comment"># 测试中文路径</span></span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line">$ git config user.name learnit</span><br><span class="line">$ git config user.email <span class="string">"higoge(AT)gmail(DOT)com"</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"第一次提交"</span></span><br><span class="line">[master（根提交） 8c3a846] 第一次提交</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 测试/测试文本.txt</span><br><span class="line"></span><br><span class="line">$ git push origin master</span><br><span class="line">对象计数中: 4, 完成.</span><br><span class="line">写入对象中: 100% (4/4), 295 bytes | 0 bytes/s, 完成.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.80.6:gitserver</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>
<h2 id="服务器端查看"><a href="#服务器端查看" class="headerlink" title="服务器端查看"></a>服务器端查看</h2><p>在CentOS6.6上操作本章。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/git/gitserver.git</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 8c3a846e6b96abbd2cb22a097148f015101b0530</span><br><span class="line">Author: learnit &lt;higoge(AT)gmail(DOT)com&gt;</span><br><span class="line">Date:   Wed Aug 4 19:53:53 2015 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br><span class="line"></span><br><span class="line">$ git show HEAD</span><br><span class="line">commit 8c3a846e6b96abbd2cb22a097148f015101b0530</span><br><span class="line">Author: learnit &lt;higoge(AT)gmail(DOT)com&gt;</span><br><span class="line">Date:   Wed Aug 4 19:53:53 2015 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br><span class="line"></span><br><span class="line">diff --git <span class="string">"a/\346\265\213\350\257\225/\346\265\213\350\257\225\346\226\207\346\</span></span><br><span class="line"><span class="string">new file mode 100644</span></span><br><span class="line"><span class="string">index 0000000..b47b693</span></span><br><span class="line"><span class="string">--- /dev/null</span></span><br><span class="line"><span class="string">+++ "</span>b/\346\265\213\350\257\225/\346\265\213\350\257\225\346\226\207\346\234\254</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+hello测试</span><br></pre></td></tr></table></figure></p>
<p>发现<strong>中文路径名乱码</strong>。进行如下配置。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>再次测试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git show HEAD</span><br><span class="line">commit 8c3a846e6b96abbd2cb22a097148f015101b0530</span><br><span class="line">Author: learnit &lt;higoge(AT)gmail(DOT)com&gt;</span><br><span class="line">Date:   Wed Aug 4 19:53:53 2015 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br><span class="line"></span><br><span class="line">diff --git a/测试/测试文本.txt b/测试/测试文本.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..b47b693</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/测试/测试文本.txt</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+hello测试</span><br></pre></td></tr></table></figure></p>
<h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p><code>git</code>用户可以通过用户名密码进行访问是非常不安全的，<strong>建议</strong>禁止<code>git</code>用户远程Bash访问。<br>使用<code>root</code>修改<code>/etc/passwd</code>文件的用户<code>git</code>的信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git:x:503:503::/home/git:/bin/bash</span></span><br><span class="line">git:x:503:503::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p>
<p>将<code>git</code>用户的默认<code>shell</code>改为<code>git-shell</code>。<br>Cygwin测试如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh git@192.168.80.6</span><br><span class="line">Last login: Wed Aug  4 20:06:59 2015 from 192.168.80.2</span><br><span class="line">fatal: What <span class="keyword">do</span> you think I am? A shell?</span><br><span class="line">Connection to 192.168.80.6 closed.</span><br></pre></td></tr></table></figure></p>
<p>服务器拒绝了远程登录。</p>
<p>但是，屏蔽了Bash后，无法使用<code>ssh-copy-id</code>进行Key的登记。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id git@192.168.80.6</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">git@192.168.80.6<span class="string">'s password:</span></span><br><span class="line"><span class="string">fatal: unrecognized command '</span></span><br><span class="line">                <span class="built_in">umask</span> 077 ;</span><br><span class="line">                mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys || <span class="built_in">exit</span> 1 ;</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span> restorecon &gt;/dev/null 2&gt;&amp;1 ; <span class="keyword">then</span> restorecon -F .ssh .ssh/authorized_keys ; <span class="keyword">fi</span><span class="string">'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>解决方法</strong>使用<code>root</code>用户手动修改<code>~git/.ssh/authorized_keys</code>，添加客户端的.<code>pub</code>信息。或在Cygwin下使用如下复杂的命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@192.168.80.6 <span class="string">'mkdir -p ~git/.ssh ; cat &gt;&gt; ~git/.ssh/authorized_keys ; chmod 700 ~git/.ssh; chmod 600 ~git/.ssh/authorized_keys; chown -R git:git ~git/.ssh'</span> &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">root@192.168.80.6<span class="string">'s password:</span></span><br></pre></td></tr></table></figure></p>
<p>解释下此命令：使用<code>root</code>登录服务器，执行单引号内的内容，首先建立<code>~git/.ssh</code>文件夹，将一些信息复制到<code>~git/.ssh/authorized_keys</code>的末尾，修改<code>.ssh</code>权限为<code>700</code>，<code>authorized_keys</code>权限为<code>600</code>，因为是<code>root</code>创建，默认创建的文件夹和文件都是属于<code>root</code>用户，用<code>chown</code>修改文件夹及内部所有文件为<code>git</code>用户和组。刚才说的一些信息就是Cygwin下的<code>~/.ssh/id_rsa.pub</code>文件的内容。<br>之所以使用<code>;</code>而不用<code>&amp;&amp;</code>，是因为如果<code>.ssh</code>文件夹存在，<code>mkdir</code>命令会失败，使用<code>&amp;&amp;</code>后续的命令都将不执行直接返回错误。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具07：等宽字体]]></title>
      <url>/2015/08/04/tools07/</url>
      <content type="html"><![CDATA[<p>前面的博文介绍了字体的设置，如Cygwin和PuTTY的字体设置。一个好看的等宽字体，会充分保护眼睛，让工作更加愉快。</p>
<p>选择好的字体，主要看能否轻易分辨易混淆字符，如<code>I L 1</code>，<code>0 o O</code>，<code>: ;</code>，<code>‘ ’ “</code>，至于字符高矮，符号大小，个人觉得不是问题。</p>
<p>分享下我常用的几种字体。</p>
<ul>
<li><a href="http://www.dafont.com/bitstream-vera-mono.font" target="_blank" rel="noopener">Bitstream Vera Sans Mono</a></li>
<li><a href="https://github.com/todylu/monaco.ttf" target="_blank" rel="noopener">MONACO</a></li>
<li><a href="https://github.com/adobe-fonts/source-code-pro" target="_blank" rel="noopener">Source Code Pro</a></li>
<li><a href="http://font.ubuntu.com/" target="_blank" rel="noopener">Ubuntu Mono</a></li>
<li><a href="http://www.iplaysoft.com/consolas.html" target="_blank" rel="noopener">YaHei Consolas Hybrid</a></li>
<li><a href="http://www.zhihu.com/question/20299865" target="_blank" rel="noopener">Tsentsiu Mono</a></li>
</ul>
<a id="more"></a>
<p>效果如图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/font/01.png" class="img-center"><br>前四种字体只有英文的等宽显示，中文采用宋体显示。后两种均采用特定的中文显示，并且中文英文严格按照2:1显示。(不知道为什么YaHei Consolas Hybrid作为浏览器字体中文混搭时不等宽。)</p>
<p>个人目前设置：中英文，如文本编辑器，采用<code>Tsentsiu Mono HG</code>字体(果断弃用<code>YaHei.Consolas</code>)；纯英文，如PuTTY连接Linux，采用<strong>Bitstream Vera Sans Mono</strong>。<br>效果如图。<br><img src="https://raw.githubusercontent.com/higoge/image/master/font/02.png" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/font/03.png" class="img-center"></p>
<p>以上所有字体，汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)均提供下载(Fonts.7Z)。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Fonts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论04：网络配置和其他配置]]></title>
      <url>/2015/08/03/th-linux04/</url>
      <content type="html"><![CDATA[<p>本篇介绍CentOS的网络配置和一些其他配置。</p>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>屏幕右上角邮件点击网络图标。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/40.jpg" class="img-center"><br>编辑连接。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/41.jpg" class="img-center"><br>选择System eth0，点击编辑。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/42.jpg" class="img-center"><br>点击自动连接，点击IPv4设置，添加，输入IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/43.jpg" class="img-center"><br>需要root授权。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/44.jpg" class="img-center"><br>点击网络图标，点击System eth0。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/45.jpg" class="img-center"><br>开启终端。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/46.jpg" class="img-center"><br>先<code>ping</code>网关，看是否联通。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/47.jpg" class="img-center"><br>开启Firefox。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/48.jpg" class="img-center"><br>打开一个网页测试。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/49.jpg" class="img-center"></p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>本章所述的配置项不配置也可，仅让系统更加符合个人习惯。</p>
<ul>
<li>系统-&gt;首选项-&gt;屏幕保护程序-&gt;将启动时间改为2小时。</li>
<li>系统-&gt;首选项-&gt;键盘快捷键。<br>开启终端快捷键设置为<code>Win+r</code>。<br>窗口最大化快捷键设置为<code>Win+↑</code>。<br>窗口最小化快捷键设置为<code>Win+↓</code>。</li>
<li>重启，登录界面，语言设置为English (United State)。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/50.jpg" class="img-center"></li>
<li>登入后更新文件夹名称。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/51.jpg" class="img-center"></li>
<li>开启终端，运行命令<code>gedit ~/.config/user-dirs.dirs</code>，每一项引号内的内容改为<code>$HOME/Desktop</code>，保存关闭。运行命令<code>cd ~ &amp;&amp; rm -rf * &amp;&amp; mkdir Desktop</code>。删除无用的文件和文件夹，让用户文件夹全部指向Desktop。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/52.jpg" class="img-center"></li>
<li><p>为了避免引起不必要的错误，如乱码问题，<strong>建议</strong>将系统语言还原为英文。<br>开启终端，使用<code>su -</code>并输入密码，更改为root用户。输入<code>gedit /etc/sysconfig/i18n</code>，修改此文件内容如下，修改完成后，重启系统。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#LANG=&quot;zh_CN.UTF-8&quot; # 表示注释</span><br><span class="line">LANG=&quot;en_US.UTF-8&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据<a href="http://higoge.github.io/2015/07/24/tools03/">工具03：PuTTY常用配置</a>和<a href="http://higoge.github.io/2015/07/24/tools04/">工具04：PuTTY的小伙伴PuTTYgen和Plink</a>配置好SSH的连接。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/53.jpg" class="img-center"></p>
</li>
</ul>
<p><strong>建议</strong>关机做一个快照，保存为初始化。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论03：安装VMware Tools和配置共享文件夹]]></title>
      <url>/2015/07/31/th-linux03/</url>
      <content type="html"><![CDATA[<p>文本接上一篇博文，介绍CentOS6.6下安装VMware Tools、配置和Windows宿主机的共享文件夹。<br><a id="more"></a></p>
<h2 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h2><p>VMware Workstation菜单点击虚拟机-&gt;安装VMware Tools。CentOS系统桌面会出现一个光盘图标。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/33.jpg" class="img-center"><br>双击图标后，复制VMware Tools的<code>tar.gz</code>文件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/34.jpg" class="img-center"><br>打开主文件夹，粘贴。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/35.jpg" class="img-center"><br>桌面点击右键-&gt;在终端中打开。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/36.jpg" class="img-center"><br>输入命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ tar xzvf VMwareTools-9.9.0-2304977.tar.gz</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/centos/37.jpg" class="img-center"><br>输入命令<code>su -</code>，输入root用户密码。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /home/learnit/vmware-tools-distrib</span></span><br><span class="line"><span class="comment"># ./vmware-install.pl -d</span></span><br></pre></td></tr></table></figure></p>
<p><code>-d</code>表示所有的配置均默认处理。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/38.jpg" class="img-center"><br>安装完成后，输入命令<code>reboot</code>重启。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/39.jpg" class="img-center"></p>
<h2 id="配置共享文件夹"><a href="#配置共享文件夹" class="headerlink" title="配置共享文件夹"></a>配置共享文件夹</h2><p><a href="http://higoge.github.io/2015/07/01/vm11/">虚拟机11：共享文件夹</a>是通过Windows操作系统举得例子。本章介绍CentOS配置与Windows宿主机共用的共享文件夹。<br>快捷键<code>Ctrl+d</code>打开虚拟机设置-&gt;选项-&gt;共享文件夹-&gt;点击“总是启用”-&gt;点击“添加”-&gt;下一步-&gt;设置主路径和名称-&gt;选中“启用此共享”-&gt;完成即可。<br>本例设置主路径为<code>E:/Linux_share</code>，名称为<code>Linux_share</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/54.jpg" class="img-center"><br>CentOS中，此共享文件夹路径为<code>/mnt/hgfs/Linux_share</code>。写个脚本测试下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;hello windows&quot; &gt; /mnt/hgfs/Linux_share/01.txt</span><br></pre></td></tr></table></figure></p>
<p>Windows宿主机上查看一下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/55.jpg" class="img-center"><br>Windows上新建02.txt，内容为<code>hello linux</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/56.jpg" class="img-center"><br>CentOS上查看一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /mnt/hgfs/Linux_share/02.txt</span><br><span class="line">hello Linux</span><br></pre></td></tr></table></figure></p>
<p>CentOS虚拟机和Windows宿主机之间就通过此文件夹共享文件。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论02：CentOS6.6的安装]]></title>
      <url>/2015/07/30/th-linux02/</url>
      <content type="html"><![CDATA[<p>安装Linux是学习Linux的第一步。本文介绍CentOS6.6的安装。多图。</p>
<h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>硬件配置如下：</p>
<ul>
<li>CPU：1个处理器，2个内核。</li>
<li>内存：1024MB。</li>
<li>硬盘：30GB。</li>
<li>CDROM：挂载CentOS-6.6-x86_64-bin-DVD1.iso。</li>
</ul>
<p>主要注意事项，请看下面的图片。<br><a id="more"></a><br>选择稍后安装操作系统，避免VMware Workstation运行内置的安装脚本。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/01.jpg" class="img-center"><br>操作系统选择CentOS 64位。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/02.jpg" class="img-center"></p>
<h2 id="安装CentOS6-6"><a href="#安装CentOS6-6" class="headerlink" title="安装CentOS6.6"></a>安装CentOS6.6</h2><p>回车。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/03.jpg" class="img-center"><br>按<code>Tab</code>键，选中<code>Skip</code>，回车。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/04.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/05.jpg" class="img-center"><br>用中文安装，下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/06.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/07.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/08.jpg" class="img-center"><br>是。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/09.jpg" class="img-center"><br>主机名为<code>CentOS</code>。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/10.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/11.jpg" class="img-center"><br><code>root</code>密码为<code>wangwang</code>。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/12.jpg" class="img-center"><br>创建自定义布局。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/13.jpg" class="img-center"><br>点击空闲，创建。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/14.jpg" class="img-center"><br>选择标准分区，创建。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/15.jpg" class="img-center"><br>文件系统类型选择<code>swap</code>，大小为2048MB。<strong>推荐</strong>在内存小于2GB的情况下，SWAP分区为内存的两倍大小。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/16.jpg" class="img-center"><br>类似的，创建根文件系统分区<code>/</code>大小为15000MB。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/17.jpg" class="img-center"><br>创建<code>/home</code>分区为使用全部可用空间。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/18.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/19.jpg" class="img-center"><br>格式化。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/20.jpg" class="img-center"><br>将修改写入磁盘。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/21.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/22.jpg" class="img-center"><br>选择安装为Desktop，下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/23.jpg" class="img-center"><br>安装中…<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/24.jpg" class="img-center"><br>重新引导。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/25.jpg" class="img-center"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>前进。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/26.jpg" class="img-center"><br>前进。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/27.jpg" class="img-center"><br>创建用户<code>learnit</code>，密码<code>wangwang</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/28.jpg" class="img-center"><br>设置时间，注意时间快8小时，建议改回来。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/29.jpg" class="img-center"><br>不启用Kdump。完成。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/30.jpg" class="img-center"><br>输入密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/31.jpg" class="img-center"><br>主界面如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/centos/32.jpg" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具06：快速打开程序的方法]]></title>
      <url>/2015/07/29/tools06/</url>
      <content type="html"><![CDATA[<p>桌面和开始菜单一堆快捷方式，找半天找不到？鼠标用起来没完没了的手腕疼肩膀疼成了鼠标手？如果真有这些问题，请尝试使用本文的方法。<br>一个优雅的键盘侠，是只用键盘就能搞定日常的工作。鼠标再快，也不如键盘快；鼠标在精准，也不如指向键盘按键精准(艺术创造如PPT、PS和游戏如LOL、CF之类的除外)。<br>快速启动程序，是成为键盘流高手的第一步。<br>很多快速启动命令的方法和工具，都是直接设置快捷键，如在快捷方式的属性中设置快捷键，或者使用<a href="www.autohotkey.com/">AutoHotkey</a>设置热键脚本。<br><img src="https://raw.githubusercontent.com/higoge/image/master/winr/01.png" class="img-center"><br>个人使用后发现，热键资源有限，同时也记不住那么多热键，这个方法不太实用。本文介绍两个方法，不需要使用任何工具，仅简单设置即可。<br><a id="more"></a></p>
<h2 id="Win-R法"><a href="#Win-R法" class="headerlink" title="Win+R法"></a>Win+R法</h2><p>Windows快捷键<code>Win+r</code>，调用出运行窗口，输入命令即可执行。Windows系统不会找到用户自己安装的程序，除非程序的安装包有特殊的设置。仅需几步就可让其找到我们的命令。</p>
<ul>
<li>新建文件夹，将所有常用的命令的快捷方式放入此文件夹中。如建立文件夹<code>d:\shortcuts</code>，将Word、Excel、PowerPoint的快捷方式放入此文件夹，并改名为<code>wd</code>，<code>ex</code>，<code>ppt</code>。</li>
<li><code>Win+Pause</code>打开系统属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;<code>Path</code>，点击编辑，最开头加入<code>d:\shortcuts;</code>。<strong>注意，必须有分号</strong>。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/winr/02.png" class="img-center"><br>设置后，开启命令只需要三步。速度不比直接使用快捷键慢多少，同时也不需要记那么多的快捷键。<br>开启word：<code>Win+r</code>-&gt;wd-&gt;Enter。<br>开启PowerPoint：<code>Win+r</code>-&gt;ppt-&gt;Enter。</p>
<h2 id="Win-数字法"><a href="#Win-数字法" class="headerlink" title="Win+数字法"></a>Win+数字法</h2><p>最常用的程序，建议采用此方法。<strong>注意</strong>：此方法对于XP及以下操作系统无效。<br>先开启程序，在任务栏的程序图标上右键-&gt;将此程序锁定到任务栏。<br>任务栏的图标自左至右就可以用<code>Win+数字</code>快捷键开启和切换了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/winr/03.png" class="img-center"></p>
<h2 id="Windows常用命令"><a href="#Windows常用命令" class="headerlink" title="Windows常用命令"></a>Windows常用命令</h2><p><code>Win+r</code>后可以输入命令，快速开启Windows相关程序。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>程序</th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd</td>
<td>命令行</td>
</tr>
<tr>
<td>regedit</td>
<td>注册表编辑器</td>
</tr>
<tr>
<td>notepad</td>
<td>记事本</td>
</tr>
<tr>
<td>mspaint</td>
<td>画板</td>
</tr>
<tr>
<td>calc</td>
<td>计算器</td>
</tr>
<tr>
<td>services.msc</td>
<td>服务</td>
</tr>
<tr>
<td>ncpa.cpl</td>
<td>网络连接</td>
</tr>
<tr>
<td>inetcpl.cpl</td>
<td>Internet属性</td>
</tr>
<tr>
<td>secpol.msc</td>
<td>本地安全策略</td>
</tr>
<tr>
<td>msconfig</td>
<td>系统配置</td>
</tr>
<tr>
<td>shutdown -s -t [second]</td>
<td>[second]秒后关机</td>
</tr>
<tr>
<td>shutdown -r -t [second]</td>
<td>[second]秒后重启</td>
</tr>
<tr>
<td>shutdown -a</td>
<td>取消定时关机</td>
</tr>
<tr>
<td>net start,stop [service]</td>
<td>启动/停止[service]服务</td>
</tr>
<tr>
<td>mstsc</td>
<td>远程桌面连接</td>
</tr>
<tr>
<td>logoff</td>
<td>注销</td>
</tr>
</tbody>
</table>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Keyboard Flow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux理论01：Linux发行版的选择]]></title>
      <url>/2015/07/28/th-linux01/</url>
      <content type="html"><![CDATA[<p>Linux的重要性不言而喻，只要从事挨踢行业，都要学习Linux。<br>学习Linux的材料很多，<a href="http://linux.vbird.org/" target="_blank" rel="noopener">《鸟哥的Linux私房菜》</a>是首选。这本书介绍了很多常用的不常用的Linux命令，可以定位成一本工具书。</p>
<h2 id="Linux是个啥"><a href="#Linux是个啥" class="headerlink" title="Linux是个啥"></a>Linux是个啥</h2><p><a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">维基百科</a>(需翻墙)解释的很清楚，在此不多说了。</p>
<h2 id="关于发行版的选择"><a href="#关于发行版的选择" class="headerlink" title="关于发行版的选择"></a>关于发行版的选择</h2><p>最常见的两大发行版系列：</p>
<ul>
<li>Debian系，最著名的是<a href="www.ubuntu.org.cn/">Ubuntu</a>。</li>
<li>RedHat系，包括<a href="www.redhat.com/">RedHat</a>，<a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a>，<a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a>。<a id="more"></a>
</li>
</ul>
<p>根据功能的分为桌面版和服务版。其区别类似于Windows 7和Windows Server 2012。桌面版的侧重点在于日常办公，提供了很多的办公软件和漂亮的界面。服务版的侧重点在于提供各种服务，着重于稳定，所以相对比较朴素，并不特别华丽。<br>Ubuntu和Fedora是两大著名的桌面版本。RedHat和CentOS是两大著名的服务版本，欧洲SUSE用的较多。Ubuntu也有Server版本，默认全命令行模式，对于Oracle的支持不太好，所以不太常用。</p>
<p><strong>推荐发行版</strong>如下：</p>
<ul>
<li>基于桌面的版本，推荐使用<a href="www.linuxmint.com/">LinuxMint</a>，比Ubuntu漂亮好用的Debian系发行版，可以使用Ubuntu的软件库。</li>
<li>基于服务的版本，推荐使用<a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a>，它是依据商用版本RedHat开放源代码所编译而成，并不包含闭源软件，可以避免版权问题。(2015.08.11添加)其实免费使用RedHat也没问题，但无法获得的官方的更新和技术支持。</li>
</ul>
<p>CentOS的最新版是CentOS7，它与CentOS6.X最大的不同是系统管理使用<code>systemd</code>代替了<a href="https://zh.wikipedia.org/wiki/Init" target="_blank" rel="noopener">init</a>，其相关的使用和配置，与传统的<code>init</code>有所不同，孰优孰劣，目前业界还有<a href="http://www.zhihu.com/question/25873473" target="_blank" rel="noopener">争论</a>，但趋势看，<code>systemd</code>必将取代<code>init</code>。<strong>个人建议</strong>先学好<code>init</code>相关的理论和配置后，再转入<code>systemd</code>的学习。</p>
<p>综上，服务版比桌面版稳定，先学习<code>init</code>，后期博文的命令和配置全部基于<strong><a href="http://isoredirect.centos.org/centos/6/isos/x86_64/" target="_blank" rel="noopener">CentOS6.x</a></strong>。</p>
<h2 id="物理机还是虚拟机"><a href="#物理机还是虚拟机" class="headerlink" title="物理机还是虚拟机"></a>物理机还是虚拟机</h2><p>物理机的优势是真实的硬件环境，运行较快。最主要的问题是驱动，有些显卡驱动比如NVIDIA的显卡就被<a href="http://zhihu.com/question/24318706/answer/27404288" target="_blank" rel="noopener">Linus竖了中指</a>。<br>虚拟机的问题是运行速度较慢，优点是可以做快照，出问题时快速还原，不会对物理机产生影响，不需要折腾驱动等。<br><strong>不推荐使用物理机</strong>，如果非要使用物理机，建议安装桌面发行版LinuxMint。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux理论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具05：XShell]]></title>
      <url>/2015/07/27/tools05/</url>
      <content type="html"><![CDATA[<p>XShell类似于PuTTY，也是一款远程连接的客户端。XShell提供了更强大的功能，如果有诸多服务器需要管理，那XShell绝对是首选。本文介绍XShell的相关配置。</p>
<h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><p>请到XShell的<a href="https://www.netsarang.com/download/down_xsh5.html" target="_blank" rel="noopener">官方网站</a>下载最新版。需要填写邮箱发送下载地址。也可到汪汪的网盘下载，路径是<code>/XShell</code>。<br>安装需要指出的是，<strong>许可</strong>请使用“免费为家庭/学校”。免费版本暂未发现与商业版本有区别且自带汉化。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/01.png" class="img-center"></p>
<h2 id="连接及使用Key"><a href="#连接及使用Key" class="headerlink" title="连接及使用Key"></a>连接及使用Key</h2><p>点击“新建”，填写“名称”，主机，端口号等信息。用户身份验证的方法可选择“Password”或“Public Key”并输入用户名。<br>如果选择“Public Key”，点击“浏览”会打开用户秘钥管理框。点击“导入”，选择OpenSSH的Key。<strong>注意</strong>：XShell不支持PuTTY的ppk文件，请选择<strong>OpenSSH的Key</strong>(请参考上一篇pem文件)。<br>若小键盘失效，终端-&gt;VT模式-&gt;初始数字键盘模式-&gt;设置为普通。<br>点击“打开”，会话对话框显示保存的各Session，<strong>提示</strong>可以在此建立文件夹管理。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>工具-&gt;选项。</p>
<ul>
<li>修改会话文件夹路径，不建议放置到C盘，根据需求选择启动时打开的会话。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/02.png" class="img-center"></li>
<li>键盘和鼠标，修改鼠标中间和右键功能。一般习惯为右键粘贴。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/03.png" class="img-center"></li>
<li>高级，根据需求修改退出时的提示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/04.png" class="img-center"></li>
</ul>
<h2 id="快速指令集"><a href="#快速指令集" class="headerlink" title="快速指令集"></a>快速指令集</h2><p>工具-&gt;快速指令集，可添加常用指令。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/05.png" class="img-center"><br>查看-&gt;快速指令。点击即可发送指令。快捷键<code>Ctrl+F1</code>~<code>Ctrl+F9</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/06.png" class="img-center"></p>
<h2 id="发送给多个会话"><a href="#发送给多个会话" class="headerlink" title="发送给多个会话"></a>发送给多个会话</h2><p>工具-&gt;撰写栏，并选择“全部会话”，就可将命令发送给所有的Session。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/07.png" class="img-center"></p>
<h2 id="ZMODEM模式"><a href="#ZMODEM模式" class="headerlink" title="ZMODEM模式"></a>ZMODEM模式</h2><p>确认会话的ZMODE处于激活状态。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/08.png" class="img-center"><br>Linux安装<code>lrzsz</code>包后，可以上传下载文件，对于仅传输单个文件来说，可省去再次开启相关SFtp软件的麻烦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sz filename   # 从服务器发送文件到客户端</span><br><span class="line">$ rz            # 服务器接收客户端发来的文件</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>A. 标准按钮有很多有用的工具，如查找、配色方案、编码、字体、快捷键配置、排列等。<br>其中排列可以组合出类似Tmux的效果。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/09.png" class="img-center"></p>
<p>B. 快捷键不能直接修改。只能修改其后面的指令。所以，要修改快捷键，先新建，指定类型和参数，再删除原有快捷键。<br>建议修改关闭选项卡快捷键<code>Ctrl+Shift+F4</code>为<code>Ctrl+w</code>和新建选项卡<code>Shift+Alt+N</code>为<code>Ctrl+t</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/xshell/10.png" class="img-center"></p>
<p>C. ‘Alt+s`切换精简模式会带来更好的体验。</p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alter+Enter</td>
<td>全屏</td>
</tr>
<tr>
<td>Alter+s</td>
<td>精简模式</td>
</tr>
<tr>
<td>Alt+[0~9]</td>
<td>转到[1~10]号标签</td>
</tr>
<tr>
<td>Alt+a</td>
<td>总在最前</td>
</tr>
<tr>
<td>Alt+c</td>
<td>断开</td>
</tr>
<tr>
<td>Alt+i</td>
<td>转到撰写栏</td>
</tr>
<tr>
<td>Alt+n</td>
<td>新建会话</td>
</tr>
<tr>
<td>Alt+o</td>
<td>打开会话</td>
</tr>
<tr>
<td>Alt+p</td>
<td>会话属性</td>
</tr>
<tr>
<td>Ctrl+F1~F9</td>
<td>快速命令1~9</td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>下一个标签</td>
</tr>
<tr>
<td>Shift+↑↓</td>
<td>上下滚动</td>
</tr>
<tr>
<td>Shift+Tab</td>
<td>转到最近的标签</td>
</tr>
</tbody>
</table>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Keyboard Flow </tag>
            
            <tag> XShell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具04：PuTTY的小伙伴PuTTYgen和Plink]]></title>
      <url>/2015/07/24/tools04/</url>
      <content type="html"><![CDATA[<p>PuTTY的好基友PuTTYgen是SSH的key的生成器，可以免密码登录系统。<br>PuTTY的另一个好基友Plink是PuTTY的命令行接口，可以执行远程命令。<br>本文介绍两个软件的使用。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>请到<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="noopener">PuTTY下载页面</a>下载这两个软件的最新版。<br><a id="more"></a></p>
<h2 id="PuTTYgen"><a href="#PuTTYgen" class="headerlink" title="PuTTYgen"></a>PuTTYgen</h2><p>运行<code>puttygen.exe</code>，点击“Generate”按钮，然后用鼠标在下图红框位置不断画圈，直到进度条结束。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/06.png" class="img-center"><br>修改“Key Comment”。根据需求“Key passphrase”和“Confirm passphrase”。点击“Save private key”，保存到本地。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/07.png" class="img-center"><br>若没有“Key passphrase”，会有提示，确认即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/08.png" class="img-center"><br>将“Public key for pasting into OpenSSH authorized_key file”框中的所有文字复制到剪贴板。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/09.png" class="img-center"><br>登录的服务端，将此信息复制到<code>$HOME/.ssh/authorized_keys</code>文件内(若没有，则请创建相关文件夹和文件)。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/10.png" class="img-center"><br><strong>注意</strong>，有些Linux发行版对于<code>.ssh</code>的权限要求是<code>700</code>，<code>authorized_keys</code>文件的权限是<code>600</code>，若出现<code>Server refused our key</code>的提示，还需要密码登录，请执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 700 ~/.ssh</span><br><span class="line">$ chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>PuTTY的设置如下。</p>
<ul>
<li>Connection-&gt;Data-&gt;Auto login username填写默认登录名。</li>
<li>Connection-&gt;SSH-&gt;Auth-&gt;Private Key file for authentication选择ppk路径<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/11.png" class="img-center"></li>
<li>将Session保存为“Default Settings”，以后打开PuTTY连接此服务器，<strong>直接按回车</strong>即可，再不需要输入用户名密码了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/12.png" class="img-center"></li>
</ul>
<h2 id="PuTTYgen转换通用Key"><a href="#PuTTYgen转换通用Key" class="headerlink" title="PuTTYgen转换通用Key"></a>PuTTYgen转换通用Key</h2><p>上一章生成的ppk文件，并非OpenSSH通用的Key，通过下述方法将ppk转换为通用Key。<br>点击“Load”按钮读取ppk文件，将“Public key for pasting into OpenSSH authorized_key file”框中的所有文字复制到以<code>.pub</code>为后缀的文本文件中。<br>2017.01.19更新：或者点击<code>save pulbic key</code>按钮，保存后缀为<code>.pub</code>的文件。<br>点击菜单栏的Conversion-&gt;Export OpenSSH key，保存为<code>.pem</code>文件即可。<br>后续的文章会用到这两个文件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/15.png" class="img-center"></p>
<h2 id="Plink"><a href="#Plink" class="headerlink" title="Plink"></a>Plink</h2><p>Plink需要在命令行运行，如果只需要执行一下远程命令并获取结果，可以不用使用PuTTY，而仅用Plink即可。<br>命令如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plink -load &quot;session name&quot; command</span><br><span class="line">plink username@host command</span><br></pre></td></tr></table></figure></p>
<p>执行结果如图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/13.png" class="img-center"><br>Plink会自动寻找PuTTY保存的Session的信息，而无需输入用户名密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/14.png" class="img-center"></p>
<h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>通过Putty的两个小伙伴PuTTYgen和Plink，访问远程服务器无需每次都输入密码。目前我所知的其他应用如下。</p>
<ul>
<li>Sublime Text可以自定义Build System，使用Plink编译执行远程服务器的代码。</li>
<li>Eclipse也可以通过其RSE插件及自定义Build Command远程编辑执行代码。</li>
</ul>
<p>以上应用后期的文章都会介绍。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PuTTY </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具03：PuTTY常用配置]]></title>
      <url>/2015/07/23/tools03/</url>
      <content type="html"><![CDATA[<p>如果在Windows上从事Linux开发，那么PuTTY可能是最常用的工具。小巧，绿色。正因为小巧，有些操作比较奇怪，比如配置的保存等。<br>本文介绍PuTTY的常用配置。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>请到<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="noopener">PuTTY下载页面</a>下载最新版的PuTTY。<br><strong>特别强调</strong>：<strong>不要</strong>到其他网站下载<strong>中文汉化版</strong>的PuTTY，请参考<a href="http://www.cnbeta.com/articles/171116.htm" target="_blank" rel="noopener">中文版后门事件</a>。<br><a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/03.png" class="img-center"></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>输入IP地址，端口号，连接类型，打开即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/01.png" class="img-center"><br>会有个提示，确定即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/02.png" class="img-center"></p>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p><strong>注意</strong>：PuTTY的配置不是自动保存的，故配置完成后，在关闭PuTTY之前，一定要Save到Session中。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/04.png" class="img-center"><br>修改配置有两个方式：(a)在启动界面就配置。(b)运行后，在标题栏右键-&gt;Change Settings。<br>推荐使用(a)方式。<strong>一定要先选中Session的名称，点击Load读取配置</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/putty/05.png" class="img-center"></p>
<ul>
<li><p>Window<br>Columns和Rows 调整启动的行列数。<br>Lines of scrollback 回滚行数。建议设置的大一点。</p>
</li>
<li><p>Window-&gt;Appearance<br>Font setting 调整字体</p>
</li>
<li><p>Window-&gt;Behaviour<br>去掉Warn before closing Window的勾选。退出不会提示。<br>勾选System menu appears on ALT alone。点击Alt即可调出菜单。<br>勾选Full screen on Alt-Enter。快捷键<code>Alt+Enter</code>全屏切换。</p>
</li>
<li><p>Window-&gt;Translation<br>确定Remote character set是否为UTF-8。乱码问题就调整此选项。</p>
</li>
<li><p>Connection-&gt;Data<br>Auto-login username 可填写登录用户名。省去每次需要填写Username的麻烦。</p>
</li>
</ul>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>PuTTY的颜色并不是很鲜艳，有些颜色甚至看不清楚。需要手动调整颜色(貌似最新版的PuTTY的颜色还不是很难看)。<br>Window-&gt;Colours，可勾选Use system colours，使用系统默认颜色。<br>也可以使用下述颜色配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Default Foreground: 255/255/255</span><br><span class="line">Default Bold Foreground: 255/255/255</span><br><span class="line">Default Background: 51/51/51</span><br><span class="line">Default Bold Background: 85/85/85</span><br><span class="line">Cursor Text: 0/0/0</span><br><span class="line">Cursor Color: 0/255/0</span><br><span class="line">ANSI Black: 77/77/77</span><br><span class="line">ANSI Black Bold: 85/85/85</span><br><span class="line">ANSI Red: 150/150/50</span><br><span class="line">ANSI Red Bold: 255/85/85</span><br><span class="line">ANSI Green: 152/251/152</span><br><span class="line">ANSI Green Bold: 85/255/85</span><br><span class="line">ANSI Yellow: 240/230/140</span><br><span class="line">ANSI Yellow Bold: 255/255/85</span><br><span class="line">ANSI Blue: 0/128/192</span><br><span class="line">ANSI Blue Bold 125/206/235</span><br><span class="line">ANSI Magenta: 205/92/92</span><br><span class="line">ANSI Magenta Bold: 255/85/255</span><br><span class="line">ANSI Cyan: 255/160/160</span><br><span class="line">ANSI Cyan Bold: 255/215/0</span><br><span class="line">ANSI White: 245/222/179</span><br><span class="line">ANSI White Bold: 245/222/179</span><br></pre></td></tr></table></figure></p>
<h2 id="配置备份还原"><a href="#配置备份还原" class="headerlink" title="配置备份还原"></a>配置备份还原</h2><p>PuTTY的配置保存在注册表，位置是<code>[HKEY_CURRENT_USER\Software\SimonTatham]</code>，运行命令<code>regedit</code>，找到此文件夹，右键导出为<code>reg</code>文件。<br>双击reg文件写入注册表，即可还原配置。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>a. Telnet时Backspace失效<br>右键标题栏-&gt;Change Settings-&gt;Terminal-&gt;Keyboard：</p>
<ul>
<li>the backspace key-&gt;Control-H</li>
<li>the function keys and keypad-&gt;VT100+</li>
</ul>
<p>b. 复制粘贴</p>
<ul>
<li>鼠标左键拖动即复制。</li>
<li>右键粘贴，快捷键<code>Shift+Insert</code>。</li>
</ul>
<p>c. 使用快捷键打开保存的Session<br>先按4次<code>Tab</code>键，焦点到达Session的列表，上下选择Session，再按<code>Alt+L Enter</code>即可。更简单的方法请见下一篇文章。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Keyboard Flow </tag>
            
            <tag> PuTTY </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具02：cmd的替代品ConEmu+Clink]]></title>
      <url>/2015/07/22/tools02/</url>
      <content type="html"><![CDATA[<p>Windows自带的cmd难看难用，就算是在其属性中勾选了快速编辑模式，复制还需要在拖选后点左键，粘贴需要点右键，效率不高。<br><a href="https://github.com/Maximus5/ConEmu" target="_blank" rel="noopener">ConEmu</a>是一款多标签的集成工具，不但可以集成cmd，还可以集成Cygwin和PuTTY窗口，<a href="http://mridgers.github.io/clink/" target="_blank" rel="noopener">clink</a>加强了cmd的功能，如<code>ctrl+v</code>粘贴，<code>tab</code>提示等。具体的功能，请参考两个软件的主页。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>推荐使用绿色版。下载ConEmuPack.150716.7z并解压，启动<code>ConEmu.exe</code>即可。<s>汪汪的网盘提供了下载，目录为<code>/ConEmu+Clink</code></s>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/01.png" class="img-center"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>字体配置<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/02.png" class="img-center"></li>
<li>确认对话框<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/03.png" class="img-center"></li>
<li>鼠标右键添加<code>ConEmu Here</code><br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/04.png" class="img-center"></li>
<li>强制使用ConEmu代替cmd<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/05.png" class="img-center"></li>
<li>取消<code>Win+数字</code>的Tab切换快捷键关联(与Windows自带快捷键冲突)<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/06.png" class="img-center"></li>
</ul>
<h2 id="关联Cygwin和Putty"><a href="#关联Cygwin和Putty" class="headerlink" title="关联Cygwin和Putty"></a>关联Cygwin和Putty</h2><ul>
<li>关联Cygwin</li>
</ul>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/emu/07.png" class="img-center"></p>
<p>新建Task，命令如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set HOME=d:\cygwin\home\XXX &amp; &quot;d:\cygwin\bin\mintty.exe&quot; -i /Cygwin.ico -</span><br></pre></td></tr></table></figure></p>
<p>新建Tab时，可以输入<code>{cw}</code>开启Cygwin。<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/08.png" class="img-center"></p>
<ul>
<li>关联Putty</li>
</ul>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/emu/09.png" class="img-center"></p>
<p>新建Task，命令如下。<code>default settings</code>请更换为自己的session的名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\LiteSoftware\putty\putty.exe -new_console -load &quot;default settings&quot;</span><br></pre></td></tr></table></figure></p>
<p>效果如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/10.png" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/11.png" class="img-center"></p>
<h2 id="Clink"><a href="#Clink" class="headerlink" title="Clink"></a>Clink</h2><p>解压clink_0.4.4.zip，将<code>clink_0.4.4</code>目录下所有内容复制到ConEmu根目录下<code>ConEmu\clink\</code>文件夹下。即<code>ConEmu\clink\</code>需要有<code>clink_x86.exe</code>文件。<br>配置中开启Clink即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/emu/12.png" class="img-center"></p>
<p>2015.07.23更新：Clink也可以注入到cmd，使cmd启动时就加载Clink。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;d:</span><br><span class="line">D:\&gt;cd LiteSoftware\conemu\ConEmu\clink\</span><br><span class="line"></span><br><span class="line">D:\LiteSoftware\conemu\ConEmu\clink&gt;clink_x86 autorun</span><br><span class="line">Clink v0.4.4 [git:a60c0a] Copyright (c) 2014 Martin Ridgers</span><br><span class="line">http://mridgers.github.io/clink</span><br><span class="line"></span><br><span class="line">  -i, --install         Installs an autorun entry for cmd.exe.</span><br><span class="line">  -u, --uninstall       Uninstalls an autorun entry.</span><br><span class="line">  -s, --show            Displays the current autorun settings.</span><br><span class="line">  -v, --value &lt;string&gt;  Sets the autorun to &lt;string&gt;.</span><br><span class="line">  -h, --help            Shows this help text.</span><br><span class="line">  -- &lt;args&gt;             Pass &lt;args&gt; that follow &apos;--&apos; on to Clink.</span><br><span class="line"></span><br><span class="line">Access to cmd.exe&apos;s registry entries is restricted to members of the</span><br><span class="line">Administors group so you must have sufficient rights to edit</span><br><span class="line"> the registry.</span><br><span class="line"></span><br><span class="line">D:\LiteSoftware\conemu\ConEmu\clink&gt;clink_x86 autorun -i</span><br></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/emu/13.png" class="img-center"></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>win+w</td>
<td>新建一个窗口，输入{cw}或{putty}</td>
</tr>
<tr>
<td>win+x</td>
<td>新建一个cmd</td>
</tr>
<tr>
<td>win+q</td>
<td>标签切换</td>
</tr>
<tr>
<td>win+alt+p</td>
<td>开启setting</td>
</tr>
<tr>
<td>win+alt+t</td>
<td>配置tasks</td>
</tr>
</tbody>
</table>
<h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><p>复制：鼠标左键拖动即复制。<br>粘贴：<code>Shift+Insert</code>或<code>ctrl+v</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Keyboard Flow </tag>
            
            <tag> ConEmu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶02：tmux好基友Tmuxinator]]></title>
      <url>/2015/07/21/ad-linux02/</url>
      <content type="html"><![CDATA[<p>上一篇介绍的tmux，存在一个比较严重的问题，当运行tmux server的机器重启后，所有tmux的信息都将失效。我们需要重新开启tmux，分配并调整窗格，每个窗格再开启相关的命令。很麻烦。<br>本文介绍tmux的好基友<a href="https://github.com/tmuxinator/tmuxinator" target="_blank" rel="noopener">Tmuxinator</a>可以根据配置快速创建tmux的session。<br><a id="more"></a></p>
<h2 id="Tmuxinator的安装"><a href="#Tmuxinator的安装" class="headerlink" title="Tmuxinator的安装"></a>Tmuxinator的安装</h2><p>Tmuxinator基于Ruby，首先安装Ruby。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install ruby</span></span><br></pre></td></tr></table></figure></p>
<p>安装Tmuxinator。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem install tmuxinator</span></span><br></pre></td></tr></table></figure></p>
<p>若由于(你懂得的)网络原因无法安装，则更新Ruby的gem源后再次尝试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gem source -a https://ruby.taobao.org/</span></span><br><span class="line"><span class="comment"># gem source -r https://rubygems.org/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><p>将下述文本保存为<code>$HOME/.tmuxinator/.tmuxinator.bash</code>，提供<code>tab</code>键提示功能。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_tmuxinator</span></span>() &#123;</span><br><span class="line">    COMPREPLY=()</span><br><span class="line">    <span class="built_in">local</span> word</span><br><span class="line">    word=<span class="string">"<span class="variable">$&#123;COMP_WORDS[COMP_CWORD]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$COMP_CWORD</span>"</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">local</span> commands=<span class="string">"<span class="variable">$(compgen -W "$(tmuxinator commands)</span>"</span> -- <span class="string">"<span class="variable">$word</span>"</span>)<span class="string">"</span></span><br><span class="line"><span class="string">        local projects="</span>$(compgen -W <span class="string">"<span class="variable">$(tmuxinator completions start)</span>"</span> -- <span class="string">"<span class="variable">$word</span>"</span>)<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        COMPREPLY=( <span class="variable">$commands</span> <span class="variable">$projects</span> )</span></span><br><span class="line"><span class="string">    elif [ "</span><span class="variable">$COMP_CWORD</span><span class="string">" -eq 2 ]; then</span></span><br><span class="line"><span class="string">        local words</span></span><br><span class="line"><span class="string">        words=("</span><span class="variable">$&#123;COMP_WORDS[@]&#125;</span><span class="string">")</span></span><br><span class="line"><span class="string">        unset words[0]</span></span><br><span class="line"><span class="string">        unset words[<span class="variable">$COMP_CWORD</span>]</span></span><br><span class="line"><span class="string">        local completions</span></span><br><span class="line"><span class="string">        completions=<span class="variable">$(tmuxinator completions "$&#123;words[@]&#125;")</span></span></span><br><span class="line"><span class="string">        COMPREPLY=( <span class="variable">$(compgen -W "$completions" -- "$word")</span> )</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">complete -F _tmuxinator tmuxinator mux</span></span><br></pre></td></tr></table></figure></p>
<p><code>$HOME/.bashrc</code>下增加下述内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.tmuxinator/.tmuxinator.bash</span><br><span class="line">export EDITOR=&apos;vim&apos;</span><br></pre></td></tr></table></figure></p>
<p><code>source $HOME/.bashrc</code>使其生效。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Tmuxinator的一个工程(Project)对应tmux的一个session<br><code>tmuxinator</code>命令已<code>alias</code>为<code>mux</code>。<br><code>new</code>简写为<code>n</code>，<code>open</code>简写为<code>o</code>，<code>edit</code>简写为<code>e</code>，<code>list</code>简写为<code>l</code>，<code>copy</code>简写为<code>c</code>，<code>delete</code>简写为<code>d</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mux n ws      <span class="comment"># 创建工程ws</span></span><br><span class="line">$ mux o ws      <span class="comment"># 打开工程ws的配置文件</span></span><br><span class="line">$ mux e ws      <span class="comment"># 同上</span></span><br><span class="line">$ mux c ws ws1  <span class="comment"># 复制ws工程到ws1</span></span><br><span class="line">$ mux d ws      <span class="comment"># 删除ws工程</span></span><br><span class="line">$ mux l         <span class="comment"># 显示所有工程</span></span><br><span class="line">$ mux ws        <span class="comment"># 开启ws工程</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>当<code>new</code>一个工程后，会出现如下信息(省略注释)。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: ws <span class="comment"># session名称</span></span><br><span class="line">root: ~/ <span class="comment"># 工程根目录，活动Pane会首先cd到此目录</span></span><br><span class="line"></span><br><span class="line">windows:</span><br><span class="line">  - editor: <span class="comment"># 第1个名为Editor的Window</span></span><br><span class="line">      layout: main-vertical <span class="comment"># Pane的布局</span></span><br><span class="line">      panes: <span class="comment"># 各个Pane</span></span><br><span class="line">        - vim <span class="comment"># 第一个Pane运行vim命令</span></span><br><span class="line">        - guard <span class="comment"># 第二个Pane运行guard命令</span></span><br><span class="line">  - server: bundle <span class="built_in">exec</span> rails s <span class="comment"># 第2个名为server的Window，运行命令为bundle</span></span><br><span class="line">  - logs: tail -f <span class="built_in">log</span>/development.log <span class="comment"># 第3个名为logs的Window，运行命令为tail</span></span><br></pre></td></tr></table></figure></p>
<p>可以根据注释配置自己的工程。</p>
<h2 id="自定义layout"><a href="#自定义layout" class="headerlink" title="自定义layout"></a>自定义layout</h2><p>工程配置中的layout项，有5个默认的值。</p>
<ul>
<li>even-horizontal</li>
<li>even-vertical</li>
<li>main-horizontal</li>
<li>main-vertical</li>
<li>tiled</li>
</ul>
<p>开启tmux后，可以使用快捷键<code>prefix space</code>切换layout，建议开启4个Pane进行测试。</p>
<p>其中main-horizontal和main-vertical可以设置默认主Pane的宽度和高度。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .tmux.conf</span></span><br><span class="line"><span class="built_in">set</span>-window-option -g main-pane-width 100 <span class="comment"># 设置主Pane宽度</span></span><br><span class="line"><span class="built_in">set</span>-window-option -g main-pane-height 80 <span class="comment"># 设置主Pane高度</span></span><br></pre></td></tr></table></figure></p>
<p>如果不满足layout默认值，layout项可以自定义值。<br>首先调整好窗口的Pane，<code>prefix d</code>关闭Session。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tmux list-windows</span><br><span class="line">1: bash* (4 panes) [211x47] [layout 9a0a,211x47,0,0&#123;110x47,0,0,12,100x47,111,0[100x23,111,0,13,100x23,111,24&#123;49x23,111,24,14,50x23,161,24,15&#125;]&#125;] @3 (active)</span><br></pre></td></tr></table></figure></p>
<p>将上述信息之后layout之后的信息(到最后一个<code>]</code>前)，复制到工程配置中的layout项即可。<strong>注意</strong>pane的个数必须与执行命令的个数对应。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">  - editor:</span><br><span class="line">      layout: 9a0a,211x47,0,0&#123;110x47,0,0,12,100x47,111,0[100x23,111,0,13,100x23,111,24&#123;49x23,111,24,14,50x23,161,24,15&#125;]&#125;</span><br><span class="line">        - <span class="comment"># empty</span></span><br><span class="line">        - <span class="comment"># empty</span></span><br><span class="line">        - <span class="comment"># empty</span></span><br><span class="line">        - <span class="comment"># empty</span></span><br></pre></td></tr></table></figure></p>
<h2 id="多命令"><a href="#多命令" class="headerlink" title="多命令"></a>多命令</h2><p>当某个Pane需要执行多命令时，官方不推荐使用<code>&amp;&amp;</code>或<code>;</code>的形式。可以采用如下方式发送命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">  - editor:</span><br><span class="line">      layout: main-vertical</span><br><span class="line">      panes:</span><br><span class="line">        - list: # 多命令方式</span><br><span class="line">          - cd ~/temp</span><br><span class="line">          - ls -la</span><br><span class="line">        - # empty</span><br></pre></td></tr></table></figure></p>
<h2 id="CentOS6-X手动安装Ruby"><a href="#CentOS6-X手动安装Ruby" class="headerlink" title="CentOS6.X手动安装Ruby"></a>CentOS6.X手动安装Ruby</h2><p><strong>2015.08.03新增本章</strong>。<br>上述篇章是在CentOS7安装的，没有问题。CenOS6.X默认安装的Ruby版本太低不符合Tmuxinator的要求，需要手动下载Ruby源码安装，之后在下载安装Tmuxinator。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum remove -y ruby</span></span><br><span class="line"><span class="comment"># yum -y install zlib-devel curl-devel openssl-devel httpd-devel apr-devel apr-util-devel mysql-devel</span></span><br><span class="line"><span class="comment"># wget https://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p598.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxvf ruby-2.0.0-p598.tar.gz &amp;&amp; cd ruby-2.0.0-p598</span></span><br><span class="line"><span class="comment"># ./configure --disable-install-doc &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line"><span class="comment"># cd -</span></span><br><span class="line"><span class="comment"># wget http://production.cf.rubygems.org/rubygems/rubygems-2.0.14.tgz</span></span><br><span class="line"><span class="comment"># tar zxvf rubygems-2.0.14.tgz &amp;&amp; cd rubygems-2.0.14</span></span><br><span class="line"><span class="comment"># ruby setup.rb</span></span><br></pre></td></tr></table></figure></p>
<p>安装完成后，继续执行<a href="#Tmuxinator的安装">第1步</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进阶01：tmux]]></title>
      <url>/2015/07/20/ad-linux01/</url>
      <content type="html"><![CDATA[<p>tmux是linux中一种管理窗口的程序。当执行多任务时，不用开启多个客户端来回使用<code>Alt + Tab</code>切换，开一个客户端即可。而且，所有的状态都可以保存。<br>这里的状态，包括：</p>
<ul>
<li>当前的窗口内容。例如，左边窗口使用<code>VI</code>编辑代码，右边是调试信息。当关闭客户端，重新连接时，左右的窗口保持不变。</li>
<li>当前的窗口的工作状态。尤其是多任务时的状态，此状态不收客户端连接Session状态的干扰，不管是前台Job还是后台Job(使用<code>[commander] &amp;</code>执行命令)。省去了我们遗忘使用<code>nohup</code>或者<code>at</code>指令时，客户端异常断掉带来的麻烦。</li>
</ul>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/01.png" class="img-center"></p>
<h2 id="tmux的基本概念"><a href="#tmux的基本概念" class="headerlink" title="tmux的基本概念"></a>tmux的基本概念</h2><ul>
<li>Session：连接。是一组Window的集合。</li>
<li>Window：单个可见窗口。类似一个标签页。是一组Pane的组合。</li>
<li>Pane：窗格。可以理解为一个分屏。<br>三个元素在tmux的具体展现如下图，盗取自<a href="http://blog.jobbole.com/87562/" target="_blank" rel="noopener">伯乐在线</a>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/adlinux/02.png" class="img-center"></li>
</ul>
<h2 id="tmux的安装"><a href="#tmux的安装" class="headerlink" title="tmux的安装"></a>tmux的安装</h2><p>一般采用网络直接安装的方式。版本为1.8。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install tmux</span></span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install tmux</span><br></pre></td></tr></table></figure></p>
<h2 id="tmux的常用命令"><a href="#tmux的常用命令" class="headerlink" title="tmux的常用命令"></a>tmux的常用命令</h2><p>以注释的方式解释命令的含义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tmux # 开启一个新的Session</span><br><span class="line">$ tmux ls # 查看各个Session的信息，详细命令为tmux list-session</span><br><span class="line">0: 2 windows (created Mon Jul 20 14:08:12 2015) [191x45]\ (attached) # Session的编号(或名称)为0，有2个Window，当前连接(attached)状态。</span><br><span class="line">$ tmux a -t 0 # 连接编号为0的Session，可简写为tmux attach-session -t 0</span><br><span class="line">$ tmux kill-session -t 0 # 关闭编号为0的session，session的所有状态都会删除。不加-t则删除全部session</span><br><span class="line">$ tmux kill-serser # 关闭tmux服务</span><br><span class="line">$ tmux start # 或start-server 重启tmux服务，重新读取配置文件</span><br></pre></td></tr></table></figure></p>
<p>其他关于Session、Window和pane的操作，建议使用快捷键以及配置操作。</p>
<h2 id="tmux的快捷键"><a href="#tmux的快捷键" class="headerlink" title="tmux的快捷键"></a>tmux的快捷键</h2><p>本章prefix表示<code>Ctrl + b</code>。下一章介绍如何更换prefix。</p>
<ul>
<li>有关Session的快捷键。</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix s</td>
<td>查看/切换Session</td>
</tr>
<tr>
<td>prefix d</td>
<td>离开Session</td>
</tr>
<tr>
<td>prefix $</td>
<td>重命名当前Session</td>
</tr>
</tbody>
</table>
<ul>
<li>有关Window的快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix c</td>
<td>创建Window</td>
</tr>
<tr>
<td>prefix &amp;</td>
<td>关闭Window</td>
</tr>
<tr>
<td>prefix n</td>
<td>切换到下一个Window</td>
</tr>
<tr>
<td>prefix p</td>
<td>切换到上一个Window</td>
</tr>
<tr>
<td>prefix Window号</td>
<td>切换Window号</td>
</tr>
<tr>
<td>prefix w</td>
<td>查看/切换Window</td>
</tr>
</tbody>
</table>
<ul>
<li>有关Pane的快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix %</td>
<td>垂直拆分一个Pane</td>
</tr>
<tr>
<td>prefix “</td>
<td>水平拆分一个Pane</td>
</tr>
<tr>
<td>prefix q</td>
<td>显示Pane编号</td>
</tr>
<tr>
<td>prefix o</td>
<td>切换到下一个Pane</td>
</tr>
<tr>
<td>prefix z</td>
<td>切换Pane的全屏</td>
</tr>
<tr>
<td>prefix Alt + 方向</td>
<td>调整Pane的大小</td>
</tr>
</tbody>
</table>
<h2 id="tmux的基本配置"><a href="#tmux的基本配置" class="headerlink" title="tmux的基本配置"></a>tmux的基本配置</h2><p>编辑<code>$HOME/.tmux.conf</code>文件，配置内容如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Prefix为Ctrl+x</span></span><br><span class="line"><span class="built_in">set</span>-option -g prefix C-x</span><br><span class="line">unbind C-b</span><br><span class="line"><span class="built_in">bind</span> C-x send-prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用hjkl进行Pane的选择</span></span><br><span class="line"><span class="built_in">bind</span>-key k select-pane -U</span><br><span class="line"><span class="built_in">bind</span>-key j select-pane -D</span><br><span class="line"><span class="built_in">bind</span>-key h select-pane -L</span><br><span class="line"><span class="built_in">bind</span>-key l select-pane -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启窗口的UTF8支持</span></span><br><span class="line"><span class="comment"># set-window-option -g utf8 on # 2017.01.19: Deprecated</span></span><br><span class="line"><span class="comment"># 复制模式中的默认键盘布局；可以设置为vi或emacs</span></span><br><span class="line"><span class="built_in">set</span>-window-option -g mode-keys vi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用快捷键r重新读取配置文件</span></span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf\; display <span class="string">"Reloaded!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Window和Pane开始编号为1</span></span><br><span class="line"><span class="built_in">set</span>-option -g base-index 1</span><br><span class="line"><span class="built_in">set</span>-window-option -g pane-base-index 1</span><br></pre></td></tr></table></figure></p>
<h2 id="tmux的复制粘贴"><a href="#tmux的复制粘贴" class="headerlink" title="tmux的复制粘贴"></a>tmux的复制粘贴</h2><p>本章介绍的Buffer类似加强版剪贴板，可以显示并选择多个剪贴内容。</p>
<ul>
<li>有关复制粘贴快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix [</td>
<td>开启复制模式</td>
</tr>
<tr>
<td>prefix ]</td>
<td>粘贴</td>
</tr>
<tr>
<td>prefix =</td>
<td>显示并选择Buffers(q退出)</td>
</tr>
<tr>
<td>prefix #</td>
<td>仅显示Buffers</td>
</tr>
<tr>
<td>prefix -</td>
<td>删除编号为0的Buffers</td>
</tr>
</tbody>
</table>
<p>开启复制模式后，可以用VI的移动快捷键<code>HJKL</code>移动到需要复制的位置，按<code>空格键</code>开启复制，移动到复制结束的位置，按<code>Enter</code>键确认，按<code>Esc</code>键取消。<br>按<code>Esc</code>推出复制模式。</p>
<h2 id="tmux的显示配置"><a href="#tmux的显示配置" class="headerlink" title="tmux的显示配置"></a>tmux的显示配置</h2><p>以下配置可让tmux显示的更加漂亮，参考<a href="http://blog.kochiya.me/www/posts/%E6%88%91%E7%9A%84tmux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E6%9E%9C%E7%84%B6%E5%9D%91%E7%88%B9%E4%BA%86.html" target="_blank" rel="noopener">1</a>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示</span></span><br><span class="line"><span class="built_in">set</span> -g status-fg white</span><br><span class="line"><span class="built_in">set</span> -g status-bg black</span><br><span class="line">setw -g window-status-fg cyan</span><br><span class="line">setw -g window-status-bg default</span><br><span class="line">setw -g window-status-attr dim</span><br><span class="line">setw -g window-status-current-fg white</span><br><span class="line">setw -g window-status-current-bg red</span><br><span class="line">setw -g window-status-current-attr bright</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g pane-border-fg green</span><br><span class="line"><span class="built_in">set</span> -g pane-border-bg black</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-fg white</span><br><span class="line"><span class="built_in">set</span> -g pane-active-border-bg yellow</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g message-fg white</span><br><span class="line"><span class="built_in">set</span> -g message-bg black</span><br><span class="line"><span class="built_in">set</span> -g message-attr bright</span><br><span class="line"></span><br><span class="line"><span class="comment"># set -g status-utf8 on # 2017.01.19: Deprecated</span></span><br><span class="line"><span class="built_in">set</span> -g status-interval 60</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g status-left-length 20</span><br><span class="line"><span class="built_in">set</span> -g status-left <span class="string">"#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"</span></span><br><span class="line"><span class="built_in">set</span> -g status-right <span class="string">"#[fg=cyan]%d %b %R"</span></span><br><span class="line"><span class="built_in">set</span> -g status-justify centre</span><br></pre></td></tr></table></figure></p>
<h2 id="tmux的问题"><a href="#tmux的问题" class="headerlink" title="tmux的问题"></a>tmux的问题</h2><ol>
<li><p>Buffer和系统剪贴板无法共享<br>如果是使用PuTTY链接到远程Server，使用tmux时，鼠标拖动复制是大麻烦。因为会连同其他窗格的内容一起拖动进来。<br>解决方法：(A) 重新开启一个窗口，开启<code>VIM</code>，在编辑模式下进行粘贴，然后再用鼠标拖动复制。(B) PuTTY使用<code>Alt+鼠标</code>进行复制。</p>
</li>
<li><p>不支持滚屏<br>当需要查看当前显示之前的内容，直接滚动鼠标滚轴不会得到我们想要的结果。<br>解决方法：开启复制模式<code>prefix [</code>，使用<code>PageUP</code>和<code>PageDown</code>进行翻页操作。</p>
</li>
</ol>
<p>如果是登录系统界面开启Terminal使用tmux，可以增加如下配置，增强鼠标操作。<br><strong>2015.12.25更新：</strong>最新版本(v2.1)的tmux有可能弃用了下面的鼠标支持设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 鼠标支持 -- v2.1已弃用 Deprecated</span><br><span class="line">set -g mouse-resize-pane on     # 鼠标调整Pane大小</span><br><span class="line">set -g mouse-select-pane on     # 鼠标选择Pane</span><br><span class="line">set -g mouse-select-window on   # 鼠标选择Window</span><br><span class="line">set -g mode-mouse on            # 鼠标选择和滚动直接开启复制模式</span><br></pre></td></tr></table></figure></p>
<p><strong>2015.12.25更新：</strong>如果启动tmux时出现<code>unknow option</code>的字样时，请更新鼠标支持配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 鼠标支持</span><br><span class="line">#set -g mouse-utf8 on # V2.3已弃用 Deprecated</span><br><span class="line">set -g mouse on</span><br></pre></td></tr></table></figure></p>
<h2 id="tmux的源码安装"><a href="#tmux的源码安装" class="headerlink" title="tmux的源码安装"></a>tmux的源码安装</h2><p><strong>2015.08.03更新本章。</strong><br>CentOS6.X的yum源没有tmux，需要源码编译安装。<br>A. 安装编译环境<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum groupinstall -y 'Development Tools'</span></span><br></pre></td></tr></table></figure></p>
<p>B. 安装ncurses-devel<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y ncurses-devel</span></span><br></pre></td></tr></table></figure></p>
<p>C. 下载libevent，并编译安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</span></span><br><span class="line"><span class="comment"># tar xzvf libevent-2.0.21-stable.tar.gz &amp;&amp; cd libevent-2.0.21-stable</span></span><br><span class="line"><span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></p>
<p>D. 下载tmux，并编译安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget http://downloads.sourceforge.net/tmux/tmux-1.8.tar.gz</span></span><br><span class="line"><span class="comment"># tar xzvf tmux-1.8.tar.gz &amp;&amp; cd tmux-1.8</span></span><br><span class="line"><span class="comment"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></p>
<p>E. 配置库路径<br>执行<code>cat</code>命令，并输入如下内容，<code>Ctrl+d</code>退出<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat - &gt;&gt; /etc/profile.d/libpath.sh</span><br><span class="line"><span class="comment"># Initialization script for bash and sh</span></span><br><span class="line"><span class="comment"># necessary for tmux</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/lib"</span></span><br></pre></td></tr></table></figure></p>
<p>使配置文件生效。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /etc/profile.d/libpath.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>至此，<code>tmux</code>可正常运行。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Linux进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流媒体02：Linux交叉编译VLC-2.2.1]]></title>
      <url>/2015/07/17/sm02/</url>
      <content type="html"><![CDATA[<p>上一篇使用了Cygwin编译了VLC-2.2.1，编译过程正如官网所述，异常的慢。本篇介绍官网推荐的方法，使用Linux交叉编译VLC-2.2.1。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考：<a href="https://wiki.videolan.org/Win32Compile/" target="_blank" rel="noopener">Win32Compile</a>。<br>源码：<a href="ftp://ftp.videolan.org/pub/videolan/vlc/2.2.1/vlc-2.2.1.tar.xz" target="_blank" rel="noopener">vlc-2.2.1.tar.xz</a>。<br>库： <a href="ftp://ftp.videolan.org/pub/videolan/contrib/i686-w64-mingw32/vlc-contrib-i686-w64-mingw32-20150630.tar.bz2" target="_blank" rel="noopener">vlc-contrib-i686-w64-mingw32-20150630.tar.bz2</a>。<br>Linux：<a href="http://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu Desktop 15.04</a><br>本打算使用LinuxMint17.2，但这个发行版是基于Ubuntu14.04，安装mingw-tools的版本为3.1.0，会致使x265、taglib、gnutls等module编译不过，Ubuntu15.04默认安装的mingw-tools版本为3.2.0，编译时不会出问题。<br><a id="more"></a></p>
<h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p><strong>本章内容需保证Ubuntu能正常联网</strong>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y gcc-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64-tools</span><br><span class="line">$ sudo apt-get install -y lua5.2 libtool automake autoconf autopoint make gettext</span><br><span class="line">$ sudo apt-get install -y qt4-dev-tools qt5-default</span><br><span class="line">$ sudo apt-get install -y git subversion cmake cvs wine-dev yasm</span><br><span class="line">$ sudo apt-get install -y zip p7zip nsis bzip2</span><br></pre></td></tr></table></figure></p>
<p>安装过程中可能会出现<code>Configuring ttf-mscorefonts-installer</code>的配置页面，按<code>tab</code>后，一路回车即可。</p>
<h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>保存如下内容到脚本<code>01.sh</code>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script enforces statically linking of libgcc, libstdc++-6, and libpthread,</span></span><br><span class="line"><span class="comment"># without needing to rebuild gcc and mingw-w64 from scratch.</span></span><br><span class="line"><span class="comment"># -static-libgcc -static-libstdc++ flags can not be used in a libtool build system,</span></span><br><span class="line"><span class="comment"># as libtool removes flags that it doesn't understand.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">move</span></span>() &#123;</span><br><span class="line">    [ -f <span class="variable">$1</span> ] || <span class="built_in">return</span> 1</span><br><span class="line">    mkdir -p old/</span><br><span class="line">    mv -v $* old/</span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> i686 x86_64</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    library_path_list=`<span class="variable">$x</span>-w64-mingw32-gcc -v /dev/null 2&gt;&amp;1 | grep ^LIBRARY_PATH|cut -d= -f2|sort|uniq`</span><br><span class="line">    IFS=<span class="string">':'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$library_path_list</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$i</span></span><br><span class="line">        move libstdc++-6.dll libstdc++.dll.a libgcc_s.a libgcc_s_sjlj-1.dll &amp;&amp; ln -s libgcc_eh.a libgcc_s.a</span><br><span class="line">        move libpthread.dll.a libwinpthread.dll.a</span><br><span class="line">        move libwinpthread-1.dll</span><br><span class="line">        [ -d ../bin ] &amp;&amp; <span class="built_in">cd</span> ../bin &amp;&amp; move libwinpthread-1.dll</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p>
<p>执行命令，将部分dll库移走备份。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh 01.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xJvf vlc-2.2.1.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> vlc-2.2.1/</span><br></pre></td></tr></table></figure></p>
<h2 id="准备库"><a href="#准备库" class="headerlink" title="准备库"></a>准备库</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> contrib/</span><br><span class="line">$ mkdir win32; <span class="built_in">cd</span> win32</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv ~/vlc-contrib-i686-w64-mingw32-20150630.tar.bz2 vlc-contrib-i686-w64-mingw32-latest.tar.bz2</span><br></pre></td></tr></table></figure>
<p>编译库。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ../bootstrap --build=i686-w64-mingw32</span><br><span class="line">$ make prebuilt</span><br></pre></td></tr></table></figure></p>
<p>返回VLC源码根目录。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../../</span><br></pre></td></tr></table></figure></p>
<h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>首先bootstrap。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./bootstrap</span><br></pre></td></tr></table></figure></p>
<p>手动指定<code>pkg_config</code>路径。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PKG_CONFIG_LIBDIR=<span class="variable">$HOME</span>/vlc-2.2.1/contrib/i686-w64-mingw32/lib/pkgconfig</span><br></pre></td></tr></table></figure></p>
<p>再执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir win32; <span class="built_in">cd</span> win32</span><br><span class="line">$ ../extras/package/win32/configure.sh --host=i686-w64-mingw32</span><br></pre></td></tr></table></figure></p>
<p>根据CPU内核个数，执行<code>make</code>命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4 <span class="comment"># 4核CPU</span></span><br></pre></td></tr></table></figure></p>
<p>编译速度很快，一会儿就完成了。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make package-win-common</span><br></pre></td></tr></table></figure></p>
<p>执行完成后，当前目录下会生成<code>vlc-2.2.1</code>目录，即为绿色版VLC。</p>
<h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>Ubuntu下测试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> vlc-2.2.1</span><br><span class="line">$ wine vlc.exe</span><br></pre></td></tr></table></figure></p>
<p>程序界面可正常启动，打开一个视频，音频正常，显示不正常。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/02.png" class="img-center"><br>将程序放置到Windows平台测试则正常。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 流媒体 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Streaming Media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流媒体01：VLC-2.2.1编译]]></title>
      <url>/2015/07/16/sm01/</url>
      <content type="html"><![CDATA[<p><a href="http://jeremiah.blog.51cto.com/" target="_blank" rel="noopener">海狗哥的流媒体空间</a>大部分介绍VLC的编译，跟踪了0.8.6i到1.0.X版本的编译方法，最近又把VLC-2.2.1编译了一下。<br>比起几年前的编译过程，VLC-2.2.1的编译错误更少，只是编译的文档还是没有同步更新。</p>
<p>VLC的wiki中<a href="https://wiki.videolan.org/Win32Compile/" target="_blank" rel="noopener">Win32Compile</a>，提供了三个环境的编译方法：</p>
<ul>
<li>官方推荐Linux(Ubuntu)下，使用交叉编译工具MinGW。</li>
<li>Windows下使用MSYS+MinGW，此方法并<strong>不受官方支持</strong>。</li>
<li>Windows下使用Cygwin编译，此方法为容易出错的(error-prone)和龟速的(slow)，不被推荐。</li>
</ul>
<p>其实，Linux下使用MinGW和Cygwin下使用MinGW本质上是一样的。本文就介绍在Cygwin下编译VLC-2.2.1。<br><a id="more"></a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>请阅读前一篇博文<a href="http://higoge.github.io/2015/07/15/cw01/">Cygwin01：Cygwin的安装配置</a>，安装好Cygwin环境。如果对于Cygwin操作不熟悉，请先看几年前录制的<a href="http://higoge.github.io/2015/06/23/eassy02/">VLC编译视频</a>。<br>参考：<a href="https://wiki.videolan.org/Win32CompileMSYS/" target="_blank" rel="noopener">Win32CompileMSYS</a><br>源码：<a href="ftp://ftp.videolan.org/pub/videolan/vlc/2.2.1/vlc-2.2.1.tar.xz" target="_blank" rel="noopener">vlc-2.2.1.tar.xz</a>。<br>库： <a href="ftp://ftp.videolan.org/pub/videolan/contrib/i686-w64-mingw32/vlc-contrib-i686-w64-mingw32-20150630.tar.bz2" target="_blank" rel="noopener">vlc-contrib-i686-w64-mingw32-20150630.tar.bz2</a>。<br><code>rcc.exe</code>：使用压缩工具打开vlc-contrib-i686-w64-mingw32-20150630.tar.bz2，提取<code>i686-w64-mingw32/bin/rcc.exe</code>。<br>以上资料也可到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)下载(VLC.7Z)。<br>请将以上三个文件放置到<code>D:\</code>下。</p>
<p>开启Cygwin，执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /cygdrive/d/vlc-* .</span><br><span class="line">$ cp /cygdrive/d/rcc.exe .</span><br></pre></td></tr></table></figure></p>
<p>完成后，大概是如下样子。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learnit@learnit-PC ~</span><br><span class="line">$ ls</span><br><span class="line">rcc.exe  vlc-2.2.1.tar.xz  vlc-contrib-i686-w64-mingw32-20150630.tar.bz2</span><br></pre></td></tr></table></figure></p>
<h2 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xJvf vlc-2.2.1.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> vlc-2.2.1/</span><br></pre></td></tr></table></figure></p>
<h2 id="准备库"><a href="#准备库" class="headerlink" title="准备库"></a>准备库</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> contrib/</span><br><span class="line">$ mkdir win32; <span class="built_in">cd</span> win32</span><br></pre></td></tr></table></figure></p>
<p>因为VLC官网提供的库是与VLC某版本对应的，我们需要手动将下载的库更改为最新的库，防止其到官网下载最新的库。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv ~/vlc-contrib-i686-w64-mingw32-20150630.tar.bz2 vlc-contrib-i686-w64-mingw32-latest.tar.bz2</span><br></pre></td></tr></table></figure></p>
<p>编译库。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ../bootstrap --build=i686-w64-mingw32</span><br><span class="line">$ make prebuilt</span><br></pre></td></tr></table></figure></p>
<p>做一些清理工作。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm ../i686-w64-mingw32/bin/&#123;luac,moc,rcc,uic&#125;</span><br></pre></td></tr></table></figure></p>
<p>不知道为什么(没仔细研究脚本)，在执行完<code>make prebuilt</code>后，库路径下<code>bin/rcc.exe</code>被删除了，故，手动复制将其恢复。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /cygdrive/d/rcc.exe ../i686-w64-mingw32/bin</span><br><span class="line">$ <span class="built_in">cd</span> ../../ <span class="comment"># 回到vlc源码根目录</span></span><br></pre></td></tr></table></figure></p>
<h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>编译时遇到了如下错误。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moc.exe: error <span class="keyword">while</span> loading shared libraries: libstdc++-6.dll: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p>
<p>没有研究明白为什么<code>libstdc++-6.dll</code>找不到，手动将其添加到环境变量中。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/i686-w64-mingw32/sys-root/mingw/bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>再执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./bootstrap</span><br><span class="line">$ mkdir win32; <span class="built_in">cd</span> win32</span><br><span class="line">$ ../extras/package/win32/configure.sh --host=i686-w64-mingw32</span><br></pre></td></tr></table></figure></p>
<p><code>configure</code>完成后，大概是如下样子。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">libvlc configuration</span><br><span class="line">--------------------</span><br><span class="line">version               : 2.2.1</span><br><span class="line">system                : mingw32</span><br><span class="line">architecture          : i686 mmx sse sse2</span><br><span class="line">optimizations         : yes</span><br><span class="line">vlc aliases           : cvlc rvlc qvlc svlc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To build vlc and its plugins, <span class="built_in">type</span> `make<span class="string">', or `./compile'</span> <span class="keyword">if</span> you like nice colors.</span><br></pre></td></tr></table></figure></p>
<p>根据CPU内核个数，执行<code>make</code>命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4 <span class="comment"># 4核CPU</span></span><br></pre></td></tr></table></figure></p>
<p>之后是漫长的等待，一般不会出错。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>执行如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make package-win-common</span><br></pre></td></tr></table></figure></p>
<p>执行完成后，当前目录下会生成vlc-2.2.1目录，即为绿色版VLC。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>运行VLC没有界面，原因是<code>libqt4_plugin.dll</code>需要调用<code>libstdc++-6.dll</code>和<code>libgcc_s_sjlj-1.dll</code>库，没研究明白为何编译时并没有静态加载这两个库。<br><strong>解决办法</strong>为将这两个库复制到打包目录即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/i686-w64-mingw32/sys-root/mingw/bin/&#123;libstdc++-6.dll,libgcc_s_sjlj-1.dll&#125; vlc-2.2.1/</span><br><span class="line">$ ls vlc-2.2.1/</span><br><span class="line">AUTHORS.txt          libvlc.dll.manifest  plugins     vlc.exe</span><br><span class="line">COPYING.txt          libvlccore.dll       README.txt  vlc.exe.manifest</span><br><span class="line">libgcc_s_sjlj-1.dll  locale               sdk         vlc.ico</span><br><span class="line">libstdc++-6.dll      lua                  skins       vlc-cache-gen.exe</span><br><span class="line">libvlc.dll           NEWS.txt             THANKS.txt</span><br></pre></td></tr></table></figure></p>
<p>运行测试。<br><img src="https://raw.githubusercontent.com/higoge/image/master/sm/01.png" class="img-center"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>VLC官网<a href="ftp://ftp.videolan.org/pub/videolan/" target="_blank" rel="noopener">FTP</a>，<code>vlc</code>目录中有所有版本的源码和二进制文件。每个版本文件夹下<code>win32</code>和<code>win64</code>为Windows的发布目录，<code>zip</code>,<code>7z</code>为免安装绿色版，<code>exe</code>为安装版，<code>xpi</code>是Firefox的扩展插件。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 流媒体 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Streaming Media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工具01：Cygwin的安装配置]]></title>
      <url>/2015/07/15/tools01/</url>
      <content type="html"><![CDATA[<p>Cygwin是Windows上的仿真Linux环境，可以对很多基于Linux开发的源码进行编译，比如以前接触的vlc和FFmpeg等音视频项目。<br>还有一个类似的环境是MinGW+Msys，但是在Windows7 x86_64位上MinGW的界面Msys(rxvt)无法使用，丑陋的DOS窗口及极慢的反应速度让人无法接受。<br>Cygwin虽然也慢，但提供了基于自身环境的GCC，还提供了MinGW的GCC，并且也集成了相关软件，诸如SSH，GIT等，界面及颜色较为漂亮，字体可修改，还有中文的输出，比较完美。<br>当然，Cygwin也有自己的缺点，那就是无法使用类似mingw-get进行软件的在线升级。需重新运行安装文件进行了升级，虽然麻烦点，但不太经常升级软件所以可以凑合使用。<br><a id="more"></a></p>
<h2 id="Cygwin的下载"><a href="#Cygwin的下载" class="headerlink" title="Cygwin的下载"></a>Cygwin的下载</h2><p>在Cygwin的<a href="https://cygwin.com/install.html" target="_blank" rel="noopener">下载页面</a>，选择x86版本还是x86_64版本进行下载。<s><strong>建议选择32位版本</strong></s>。<br>也可到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)下载离线安装zip包(cygwin.2015.07.09.7z)。<br><strong>注意</strong>：后面章节某些图片由于是之前切的，有些路径并不能完全对应。</p>
<h2 id="Cygwin的离线安装"><a href="#Cygwin的离线安装" class="headerlink" title="Cygwin的离线安装"></a>Cygwin的离线安装</h2><p>双击“setup-x86.exe”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/01.png" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/02.png" class="img-center"><br>选择“Install from Local Directory”，进行离线安装。点击“下一步”。<br>在线安装请选择“Install from Internet”，并添加国内163的源<code>http://mirrors.163.com/cygwin/</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/03.png" class="img-center"><br>选择安装路径，建议安装到除系统盘的根目录下。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/04.png" class="img-center"><br>选择离线包的路径 ，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/05.png" class="img-center"><br>选择要安装的包，将状态从“Skip”点击到相对应的版本，<strong>具体哪些需要安装，见下一章</strong>。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/06.png" class="img-center"><br>正在安装……<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/07.png" class="img-center"><br>选择要创建的图标，点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/08.png" class="img-center"><br>双击桌面的“Cygwin Terminal”图标，第一次启动，会创建<code>$HOME</code>目录，及相关的文件。至此，安装完成。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/09.png" class="img-center"></p>
<h2 id="选择安装包"><a href="#选择安装包" class="headerlink" title="选择安装包"></a>选择安装包</h2><p>推荐的安装包如下。如果需要其他安装包，再次运行安装文件，选择在线安装，并重新选择安装的包即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Archive</span><br><span class="line">    unzip</span><br><span class="line">    xz</span><br><span class="line">    zip</span><br><span class="line">Devel</span><br><span class="line">    autoconf</span><br><span class="line">    automake</span><br><span class="line">    binutils</span><br><span class="line">    cmake</span><br><span class="line">    cvs</span><br><span class="line">    cygwin64-libiconv</span><br><span class="line">    gcc-core</span><br><span class="line">    gcc-g++ (3.4.4-3)</span><br><span class="line">    gdb</span><br><span class="line">    gettext-devel</span><br><span class="line">    git</span><br><span class="line">    git-completion</span><br><span class="line">    libtool</span><br><span class="line">    make</span><br><span class="line">    mingw-binutils</span><br><span class="line">    mingw-gcc-core</span><br><span class="line">    mingw-gcc-g++</span><br><span class="line">    mingw-pthreads</span><br><span class="line">    mingw-runtime</span><br><span class="line">    mingw-w32api</span><br><span class="line">    mingw64-i686-binutils</span><br><span class="line">    mingw64-i686-gcc-core</span><br><span class="line">    mingw64-i686-g++</span><br><span class="line">    mingw64-i686-pkgconfig</span><br><span class="line">    mingw64-i686-runtime</span><br><span class="line">    mingw64-x86_64-binutils</span><br><span class="line">    mingw64-x86_64-gcc-core</span><br><span class="line">    mingw64-x86_64-g++</span><br><span class="line">    mingw64-x86_64-pkg-config</span><br><span class="line">    mingw64-x86_64-runtime</span><br><span class="line">    nasm</span><br><span class="line">    patch</span><br><span class="line">    patchutils</span><br><span class="line">    pkg-config</span><br><span class="line">    subversion</span><br><span class="line">Editor</span><br><span class="line">    vim</span><br><span class="line">Libs</span><br><span class="line">    crypt</span><br><span class="line">    expat</span><br><span class="line">    libgcrypt-devel</span><br><span class="line">    libgcrypt20</span><br><span class="line">Net</span><br><span class="line">    curl</span><br><span class="line">    openssh</span><br><span class="line">Text</span><br><span class="line">    gettext</span><br><span class="line">Utils</span><br><span class="line">    cygutils-extra</span><br><span class="line">    dos2unix</span><br><span class="line">Web</span><br><span class="line">    wget</span><br></pre></td></tr></table></figure></p>
<p>2017.01.19更新：最新的Cygwin中，<code>git-completion</code>合并到<code>Shells/bash-completion</code>。</p>
<h2 id="配置Cygwin"><a href="#配置Cygwin" class="headerlink" title="配置Cygwin"></a>配置Cygwin</h2><p>开启Cygwin后，在标题栏点击右键-&gt;“Option”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/10.png" class="img-center"><br>设置字体。几种常用的等宽字体(Fonts.7z)，请到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)下载。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/11.png" class="img-center"><br>设置显示行数。<br><img src="https://raw.githubusercontent.com/higoge/image/master/cw/12.png" class="img-center"></p>
<h2 id="访问系统文件"><a href="#访问系统文件" class="headerlink" title="访问系统文件"></a>访问系统文件</h2><p>Cygwin可访问系统中的所有文件，默认的根目录/为Cygwin的安装目录，要访问其他盘符，对应的路径为<code>/cygdriver/盘符</code>。</p>
<h2 id="Cygwin的删除"><a href="#Cygwin的删除" class="headerlink" title="Cygwin的删除"></a>Cygwin的删除</h2><p><strong>建议</strong>先备份<code>$HOME</code>目录。</p>
<ul>
<li>删除安装文件夹。</li>
<li>删除注册表<code>[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Cygwin]</code>。</li>
</ul>
<h2 id="Cygwin的复制粘贴"><a href="#Cygwin的复制粘贴" class="headerlink" title="Cygwin的复制粘贴"></a>Cygwin的复制粘贴</h2><ul>
<li>鼠标选中即为复制。</li>
<li>右键-&gt;“Paste”为粘贴，快捷键为<code>Shift+Insert</code>。</li>
</ul>
<h2 id="Cygwin的命令行升级"><a href="#Cygwin的命令行升级" class="headerlink" title="Cygwin的命令行升级"></a>Cygwin的命令行升级</h2><p>(2015.07.20更新本章。2016.05.14再次更新。)<br>Cygwin官方推荐使用<code>setup.exe</code>进行程序升级，不推荐其他方式，诸如<code>apt-cyg</code>。<code>setup.exe</code>支持命令行参数。可以用参数开启静默安装。升级过程参数如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O https://cygwin.com/setup-x86.exe</span><br><span class="line">$ chmod a+x setup-x86</span><br><span class="line">$ ./setup-x86 --no-desktop --no-shortcuts --no-startmenu --quiet-mode --upgrade-also --site http://mirrors.163.com/cygwin/</span><br></pre></td></tr></table></figure></p>
<p>升级完成后，<strong>建议重启Cygwin</strong>，因为<code>cygwin1.dll</code>升级后不会自动加载，其他程序无法读取正常访问。</p>
<p><code>setup.exe</code>的帮助文档解释了上述参数的作用。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$ ./setup-x86.exe -h</span><br><span class="line"></span><br><span class="line">Command Line Options:</span><br><span class="line"></span><br><span class="line"> -D --download                     Download from internet</span><br><span class="line"> -L --<span class="built_in">local</span>-install                Install from <span class="built_in">local</span> directory</span><br><span class="line"> -s --site                         Download site</span><br><span class="line"> -O --only-site                    Ignore all sites except <span class="keyword">for</span> -s</span><br><span class="line"> -R --root                         Root installation directory</span><br><span class="line"> -x --remove-packages              Specify packages to uninstall</span><br><span class="line"> -c --remove-categories            Specify categories to uninstall</span><br><span class="line"> -P --packages                     Specify packages to install</span><br><span class="line"> -C --categories                   Specify entire categories to install</span><br><span class="line"> -p --proxy                        HTTP/FTP proxy (host:port)</span><br><span class="line"> -a --arch                         architecture to install (x86_64 or x86)</span><br><span class="line"> -q --quiet-mode                   Unattended setup mode</span><br><span class="line"> -M --package-manager              Semi-attended chooser-only mode</span><br><span class="line"> -B --no-admin                     Do not check <span class="keyword">for</span> and enforce running as</span><br><span class="line">                                   Administrator</span><br><span class="line"> -W --<span class="built_in">wait</span>                         When elevating, <span class="built_in">wait</span> <span class="keyword">for</span> elevated child</span><br><span class="line">                                   process</span><br><span class="line"> -h --<span class="built_in">help</span>                         <span class="built_in">print</span> <span class="built_in">help</span></span><br><span class="line"> -v --verbose                      Verbose output</span><br><span class="line"> -l --<span class="built_in">local</span>-package-dir            Local package directory</span><br><span class="line"> -r --no-replaceonreboot           Disable replacing <span class="keyword">in</span>-use files on next</span><br><span class="line">                                   reboot.</span><br><span class="line"> -X --no-verify                    Don<span class="string">'t verify setup.ini signatures</span></span><br><span class="line"><span class="string"> -n --no-shortcuts                 Disable creation of desktop and start menu</span></span><br><span class="line"><span class="string">                                   shortcuts</span></span><br><span class="line"><span class="string"> -N --no-startmenu                 Disable creation of start menu shortcut</span></span><br><span class="line"><span class="string"> -d --no-desktop                   Disable creation of desktop shortcut</span></span><br><span class="line"><span class="string"> -K --pubkey                       URL of extra public key file (gpg format)</span></span><br><span class="line"><span class="string"> -S --sexpr-pubkey                 Extra public key in s-expr format</span></span><br><span class="line"><span class="string"> -u --untrusted-keys               Use untrusted keys from last-extrakeys</span></span><br><span class="line"><span class="string"> -U --keep-untrusted-keys          Use untrusted keys and retain all</span></span><br><span class="line"><span class="string"> -g --upgrade-also                 also upgrade installed packages</span></span><br><span class="line"><span class="string"> -o --delete-orphans               remove orphaned packages</span></span><br><span class="line"><span class="string"> -m --mirror-mode                  Skip availability check when installing from</span></span><br><span class="line"><span class="string">                                   local directory (requires local directory to</span></span><br><span class="line"><span class="string">                                   be clean mirror!)</span></span><br><span class="line"><span class="string"> -A --disable-buggy-antivirus      Disable known or suspected buggy anti virus</span></span><br><span class="line"><span class="string">                                   software packages during execution.</span></span><br></pre></td></tr></table></figure></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 系统工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cygwin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙06：HostsTool【废弃】]]></title>
      <url>/2015/07/14/breakwall06/</url>
      <content type="html"><![CDATA[<p>2017.01.18更新，本文已废弃，请参考其他科学上网方法。<br>前面的文章也提到过，对于DNS污染的屏蔽方法，可以通过修改hosts文件进行翻墙。即，强制绑定域名和IP地址的映射。但每个网站都进行修改编写，确实也很麻烦。偶尔发现可以批量修改hosts的软件，hoststool，介绍下其使用方法。</p>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>请到其<a href="https://hosts.huhamhire.com/" target="_blank" rel="noopener">官网</a>下载。或到汪汪的网盘下载，路径为<code>/跳墙/HostsTool</code>。<br><a id="more"></a></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行hoststool.exe。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/01.png" class="img-center"><br>请<strong>注意上图中的数字编号</strong>。</p>
<p>点击编号1，选择服务器。四个选项中总有一个会连接成功。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/02.png" class="img-center"></p>
<p>点击按钮5下载最新的数据文件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/03.png" class="img-center"></p>
<p>点击按钮2备份系统原hosts文件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/04.png" class="img-center"></p>
<p>点击按钮6，更改hosts。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/05.png" class="img-center"></p>
<p>点击“yes”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/06.png" class="img-center"></p>
<p>点击按钮7退出。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>浏览器打开Dropbox测试一下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/07.png" class="img-center"><br><strong>注意</strong>：因为我们的访问是通过直接修改的hosts，并非从DNS获取的IP地址，所以有些浏览器会报出可疑重定向的警告，忽略即可。</p>
<h2 id="查看hosts文件"><a href="#查看hosts文件" class="headerlink" title="查看hosts文件"></a>查看hosts文件</h2><p>文本编辑器打开c:\Windows\System32\drivers\etc\hosts文件，里面有8000多行host。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw06/08.png" class="img-center"></p>
<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>点击按钮3，选择备份的hosts文件进行还原即可。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙05：VPN Gate【废弃】]]></title>
      <url>/2015/07/14/breakwall05/</url>
      <content type="html"><![CDATA[<p>2017.01.18更新，本文已废弃，请参考其他科学上网方法。<br>除了代理，VPN是另一种方式。本文介绍的VPN Gate的中继器可以分散到世界各个角落，属于全球分布式，所以XX不可能把所有的VPN服务都封锁掉。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载vpngate-client-2014.10.23-build-9506.130932.zip，并解压。<br>汪汪的网盘提供了下载，路径为<code>/跳墙/VPNGate</code>，解压密码为<code>higoge</code>。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>运行vpngate-client-v4.11-9506-beta-2014.10.22.exe，并安装。</p>
<h2 id="新建虚拟网卡"><a href="#新建虚拟网卡" class="headerlink" title="新建虚拟网卡"></a>新建虚拟网卡</h2><p>在虚拟网络适配器下面点击右键，选择“新建虚拟网络适配器”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/01.png" class="img-center"><br>点击“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/02.png" class="img-center"><br>网卡建立会耗时一会。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/03.png" class="img-center"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>点击VPN Gate中的公共VPN：<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/04.png" class="img-center"><br>在里面找吧，并不是所有的都能连上，连上了也不是特别快，看运气。推荐连接运行时间长，会话多的中继。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/05.png" class="img-center"><br>连接成功后如图：<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/06.png" class="img-center"><br>测试一下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw04/07.png" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙04：OpenDNS]]></title>
      <url>/2015/07/13/breakwall04/</url>
      <content type="html"><![CDATA[<p>有些网站，并不是完全被墙，只是DNS污染。ISP受**控制，使得日常使用的ISP提供的DNS服务器，将域名对应的IP更改为不可用IP，导致网站无法访问。</p>
<p>解决办法一种是修改hosts文件，添加域名与IP地址的对应。但是每个网站都去添加，显然太麻烦(后续会有修改hosts的软件)。另一种方式就是修改DNS。<br><a id="more"></a></p>
<h2 id="直接修改网卡的DNS"><a href="#直接修改网卡的DNS" class="headerlink" title="直接修改网卡的DNS"></a>直接修改网卡的DNS</h2><p>修改网卡DNS如下，推荐使用阿里DNS或OpenDNS。修改DNS后，上网速度会变慢一点，但是在可接受的范围内。因为访问其他的DNS，比访问ISP提供的DNS要慢一些。<br>OpenDNS：<code>208.67.222.222</code> <code>208.67.220.220</code><br>阿里DNS： <code>223.5.5.5</code> <code>223.6.6.6</code><br>114DNS：<code>114.114.114.114</code><br>Google Public DNS：<code>8.8.8.8</code></p>
<p>修改后，<code>Win+r</code>-&gt;<code>cmd</code>。<br>Vista及以上系统，输入命令清除DNS缓冲。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></p>
<p>老系统，输入如下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net stop dnscache</span><br><span class="line">net start dnscache</span><br></pre></td></tr></table></figure></p>
<p>禁用并重新启用下网卡也可以。</p>
<h2 id="使用DNSCrypt"><a href="#使用DNSCrypt" class="headerlink" title="使用DNSCrypt"></a>使用DNSCrypt</h2><p><a href="https://github.com/opendns/dnscrypt-win-client" target="_blank" rel="noopener">DNSCrypt</a>是<a href="https://www.opendns.com/about/innovations/dnscrypt/" target="_blank" rel="noopener">OpenDNS</a>提供的DNS加密软件，可加密DNS流量，是防止DNS污染的绝佳工具。<br>请到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)中下载(DNS.7Z)<br>安装运行OpenDNSCript，右下角小灯变绿即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw05/01.png" class="img-center"><br>有些网站就可以访问了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw05/02.png" class="img-center"><br><strong>注意</strong>：如果使用了小米随身WiFi，可能会引起OpenDNS不好用。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙03：Shadowsocks]]></title>
      <url>/2015/07/10/breakwall03/</url>
      <content type="html"><![CDATA[<p>Shadowsocks是一种socks5代理，简单填写服务器地址、端口和密码即可使用。之前一直没使用Shadowsocks是因为没有稳定免费的服务器，搜索免费账号很麻烦。通常的做法是，买了国外的VPS，自己搭建SSServer，然后使用Shadowsocks客户端连接。最近发现了一个网站，<a href="http://www.ishadowsocks.com/" target="_blank" rel="noopener">iShadowsocks</a>，里面提供了详细的教程和免费的账号，虽然账号密码6个小时更换一次，但是速度还是不错的，Youtube完全无压力。<br><a id="more"></a><br>2015.08.27更新：伟大的**终于迫使Shadowsocks删除了其GitHub源码，Shadowsocks就此不会再更新了，继续保留这程序文档吧，他将持续的起作用。</p>
<h2 id="下载Shadowsocks客户端"><a href="#下载Shadowsocks客户端" class="headerlink" title="下载Shadowsocks客户端"></a>下载Shadowsocks客户端</h2><p>请到汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)中下载客户端(ss.7z)，请根据自己的操作系统下载对应版本。如果Win7安装Shadowsocks-win8版本，需要先安装dotNetFrameWork4.0，汪汪的网盘(地址请看首页侧边栏<code>Links</code>下方)中也有下载(dotNetFx40.7z)。<strong>推荐Win8以下用户不管使用哪个版本，都升级dotNetFrameWork4.0</strong>。</p>
<h2 id="配置Shadowsocks"><a href="#配置Shadowsocks" class="headerlink" title="配置Shadowsocks"></a>配置Shadowsocks</h2><p>打开Shadowsocks.exe，填写相关信息。在此填写<a href="http://www.ishadowsocks.com/" target="_blank" rel="noopener">iShadowsocks</a>提供的服务器地址1。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/10.png" class="img-center"><br>点击“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/11.png" class="img-center"><br>右下角右键点击Shadowsocks图标，点击“启动系统代理”。选择“系统代理模式”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/12.png" class="img-center"></p>
<ul>
<li>PAC模式为仅被屏蔽的网站通过Shadowsocks访问，国内网站不通过Shadowsocks访问。<strong>推荐使用</strong>。</li>
<li>全局模式为所有网站均通过Shadowsocks访问。</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>开启浏览器测试Youtube。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/14.png" class="img-center"><br><strong>注意</strong>：如果出现了502错误，服务器密码已失效。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/17.png" class="img-center"><br>请重新编辑服务器信息，修改密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/13.png" class="img-center"></p>
<h2 id="Android手机跳墙"><a href="#Android手机跳墙" class="headerlink" title="Android手机跳墙"></a>Android手机跳墙</h2><p>Shadowsocks提供了apk安装文件，请到汪汪的网盘中下载，路径为<code>/跳墙/Shadowsocks</code>，解压密码<code>higoge</code>。通过手机助手安装。<br>配置和Windows客户端配置相同，也是添加服务器地址、端口号、密码和加密方式即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/15.png" class="img-center"><br>测试Youtube。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/16.png" class="img-center"><br>iPhone用户请参考<a href="http://www.ishadowsocks.com/" target="_blank" rel="noopener">iShadowsocks</a>，到APP Store下载客户端。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙02：GoAgent & GoGo Tester【部分废弃】]]></title>
      <url>/2015/07/09/breakwall02/</url>
      <content type="html"><![CDATA[<p>2017.01.18更新：本文除<strong>第06章 使用自己的账号和appid</strong>外已<strong>废弃</strong>，请直接查看<a href="http://higoge.github.io/2015/12/11/breakwall07/">狗急跳墙07：XX-Net</a><br>GoAgent(GAE)是我最常用的跳墙方式，免费，速度也还能接受。最近，某墙加大了对GAE的监控力度，封闭了大量的Google的IP地址，导致GAE无法正常使用。使用GoGo Tester可快速寻找可用的IP地址，供GAE使用。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于搜索出来的可用的IP地址，电脑的某些卫士软件会偷偷上报给某墙，导致这些IP被封锁。故，<strong>强烈建议使用GAE时，关闭所有的国内的杀毒软件和卫士软件</strong>。</p>
<h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><p>请到汪汪的网盘（2017.01.18:更新：已无此资料）中下载goagent-3.0.zip以及GoGo Tester.zip，路径为<code>/跳墙/GoAgent</code>，解压密码为<code>higoge</code>。<br><a id="more"></a></p>
<h2 id="获取Google的IP地址段"><a href="#获取Google的IP地址段" class="headerlink" title="获取Google的IP地址段"></a>获取Google的IP地址段</h2><p>快捷键<code>win+r</code>-&gt;<code>cmd</code>，调出命令行窗口。输入命令<code>nslookup -q=txt  _netblocks.google.com 8.8.8.8</code>，获取Google的SPF记录，其中提供了多达10个网段。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; nslookup -q=txt  _netblocks.google.com 8.8.8.8</span><br><span class="line">服务器:  google-public-dns-a.google.com</span><br><span class="line">Address:  8.8.8.8</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">_netblocks.google.com   text =</span><br><span class="line"></span><br><span class="line">        <span class="string">"v=spf1 ip4:64.18.0.0/20 ip4:64.233.160.0/19 ip4:66.102.0.0/20 ip4:66.249.80.0/20 ip4:72.14.192.0/18 ip4:74.125.0.0/16 ip4:173.194.0.0/16 ip4:207.126.144.0/20 ip4:209.85.128.0/17 ip4:216.58.192.0/19 ip4:216.239.32.0/19 ~all"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：如果请求超时，请重试几次或过段时间再试。</p>
<h2 id="获取可用IP"><a href="#获取可用IP" class="headerlink" title="获取可用IP"></a>获取可用IP</h2><p>选取上面的某个IP段，如<code>64.233.160.0/19</code>，进行测试。<br>开启GoGo Tester，“导入IP段”后输入IP地址段，点击“导入”，GoGo Tester会生成一堆IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/01.png" class="img-center"><br><s>线程建议为“50”</s>，连接超时为“1000”，测试次数“1”。点击“标准测试”。<br>2015.07.17更新：<strong>注意</strong>：线程数是50，会导致网络拥堵，致使很多IP找不到，故建议更改为<strong>20</strong>以下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/02.png" class="img-center"><br>标准测试完成后，点击右键-&gt;“移除”-&gt;“无效的IP地址”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/03.png" class="img-center"><br>剩下的就是尚未被屏蔽的IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/04.png" class="img-center"><br>对剩下的IP地址，可以二次测试，将线程设置为“1”，连接超时“1000”，测试次数“6”，以保证这些IP是稳定的。<br>点击右键-&gt;“导出”-&gt;“全部IP到剪贴板”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/05.png" class="img-center"><br>打开<code>goagent-3.0\local\proxy.user.ini</code>文件，将ip地址粘贴到<code>google_cn =</code>和<code>google_hk =</code>后面。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/06.png" class="img-center"><br>开启<code>goagent-3.0\local\goagent.exe</code>，桌面右下角就会出现GAE的图标，单击图标后出现如下界面。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/07.png" class="img-center"><br>从启动信息可以看出，代理的监听地址为<code>127.0.0.1:8087</code>。设置连接代理即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/08.png" class="img-center"><br>连接Google测试一下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw-new/09.png" class="img-center"><br><strong>注意</strong>下GAE后台的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO - [Jul 09 09:31:00] ssl good_ipaddrs=9, bad_ipaddrs=0, unknown_ipaddrs=0</span><br></pre></td></tr></table></figure></p>
<p><strong>当good_ipaddrs为0时，GAE将失效</strong>。即使用的IP地址都被封锁了，需要用GoGo Tester刷出新的IP更新proxy.user.ini即可。</p>
<h2 id="获取最新的GAE"><a href="#获取最新的GAE" class="headerlink" title="获取最新的GAE"></a>获取最新的GAE</h2><p>如果你是处女座，不想使用我提供的GAE，或GAE有了更新，请看本部分。<br><del>请访问址<a href="https://github.com/goagent/goagent" target="_blank" rel="noopener">https://github.com/goagent/goagent</a></del>。<br>2015.08.27更新：伟大的**终于迫使GoAgent作者删除了源码，GoAgent就此不会再更新了。但是，既然是开源代码，还是放在GitHub上，那就不可能消亡的。请访问这个地址：<a href="https://github.com/phuslu/goagent/tree/v3.2.3" target="_blank" rel="noopener">https://github.com/phuslu/goagent/tree/v3.2.3</a>。<br>右边点击Download ZIP，下载GAE的zip包。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/03.png" class="img-center"><br>解压，修改local/proxy.ini，appid行为higoge01。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/04.png" class="img-center"><br>新建proxy.user.ini，放置到local目录下。其他步骤，同上。</p>
<h2 id="使用自己的账号和appid"><a href="#使用自己的账号和appid" class="headerlink" title="使用自己的账号和appid"></a>使用自己的账号和appid</h2><p>在此只提供了一个appid，但是每个id每天的流量是1G，虽然用完比较难，但是使用自己的账号比较保险。本部分请先保证能够正常访问Google。</p>
<ul>
<li>申请一个Google帐户，并登录，跟一般的邮箱申请一样，此处从简。</li>
<li>访问<a href="https://appengine.google.com/" target="_blank" rel="noopener">https://appengine.google.com/</a> 。 点击“Create Application”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/05.png" class="img-center"><br>输入application的id，如图，点击“check Availability”，检测是否可用。勾选协议，最后点击“Create Application”。默认可以创建25个application，请根据自己的需求多次创建。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/06.png" class="img-center"><br>成功完成创建如图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/07.png" class="img-center"></li>
<li>修改帐号的访问权限，<br>在登录项下，找到不够安全的应用访问权限，点击。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/08.png" class="img-center"><br>修改为“启用”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/09.png" class="img-center"></li>
<li>上传APPDI<br>打开<code>goagent-3.0\Server\uploader.bat</code>。输入APPID，为刚才申请的id。多个appid，用<code>|</code>分隔。如：<code>higoge01 | higoge02 | ...</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/10.png" class="img-center"><br>输入帐号名称和密码。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/11.png" class="img-center"><br>成功完成上传如图所示。刚才申请的appid，就可以填写到proxy.ini的appid项了。多个appid还是用“|”分隔。<br><img src="https://raw.githubusercontent.com/higoge/image/master/bw01/12.png" class="img-center"><br><strong>注</strong>：只上传一次即可，重新安装GoAgent，不需要再次上传。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><del><a href="https://github.com/goagent/goagent/blob/wiki/ConfigIntroduce.md.ini" target="_blank" rel="noopener">ConfigIntroduce.md.ini</a></del><a href="https://github.com/nsb2006/wiki/blob/gh-pages/ConfigIntroduce.md" target="_blank" rel="noopener">ConfigIntroduce.md</a>，用注释的方式介绍了proxy.ini配置项的作用，建议认真学习。</li>
<li><a href="https://code.google.com/p/goagent/issues/detail?id=19311" target="_blank" rel="noopener">十条Goagent使用技巧</a></li>
</ul>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
            <tag> XX-Net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狗急跳墙01：综述]]></title>
      <url>/2015/07/08/breakwall01/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于众所周知的你懂的的原因，Google在国内一直是不好用的，Facebook，Twitter，youtube等著名网站永远也打不开。其实，某些社交网站上不去也无所谓，社交过多严重影响工作效率，但Google上不去导致无法搜索出有用的内容，这点确实对日常工作产生了重大影响。国内某度，某狗，包括微软的Bing，搜索的结果都很差。当年写<a href="http://jeremiah.blog.51cto.com/" target="_blank" rel="noopener">海狗哥的流媒体空间</a>时，用某度搜索自己的文章，居然各种转发的文章排在前面，而原创网址居然排名在5-6名，真是很流氓，让人气愤。从此之后，拒绝使用某度去搜索，而某度的作用就是测试网页连通性。Google就不存在这样的问题，所以一直用谷歌搜索。当谷歌服务撤离中国后，某墙也开始逐渐强大，到目前为止，包括Google相关的所有服务(如Gmail)均无法访问，这确实让人郁闷。<br><a id="more"></a></p>
<h2 id="被墙的方式即解决办法"><a href="#被墙的方式即解决办法" class="headerlink" title="被墙的方式即解决办法"></a>被墙的方式即解决办法</h2><p>上部分提到的那些著名网站，都是直接封锁了网站的IP地址，导致无法访问。另一些网站，仅仅是DNS污染，即把网站域名映射到一个不存在的IP地址，导致无法正常访问。不得不说运营商的DNS服务也是流氓。</p>
<p>不同的原因有不同的解决方法。目前，较为常用的跳墙方法如下。</p>
<ul>
<li>购买专用VPN。优点：快。缺点：花钱。</li>
<li>通过跳墙代理。优点：可解决几乎所有的屏蔽问题。缺点：速度较慢。</li>
<li>通过Socks5代理。优点：可解决几乎所有的屏蔽问题。缺点：要么需要花钱买VPS自己搭建服务，要么需要寻找相关账号。</li>
<li>连接分布式VPN。优点：可解决几乎所有的屏蔽问题。缺点：需要碰运气找到好的开放的VPN。</li>
<li>加密DNS。优点：可以解决DNS污染问题。缺点：对于IP屏蔽的网站还是无法访问，同时，也比较慢。<br>可以根据个人情况，选择跳墙方式。</li>
</ul>
<h2 id="谷歌的几个搜索地址"><a href="#谷歌的几个搜索地址" class="headerlink" title="谷歌的几个搜索地址"></a>谷歌的几个搜索地址</h2><p>这几个地址搜索的结果可能会略有不同。</p>
<ul>
<li>谷歌无国界：<a href="http://www.google.com/ncr" target="_blank" rel="noopener">http://www.google.com/ncr</a></li>
<li>谷歌日本：<a href="http://www.google.co.jp" target="_blank" rel="noopener">http://www.google.co.jp</a></li>
<li>谷歌台湾：<a href="http://www.googel.com.tw" target="_blank" rel="noopener">http://www.googel.com.tw</a></li>
<li>谷歌香港：<a href="http://www.google.com.hk" target="_blank" rel="noopener">http://www.google.com.hk</a><br>推荐使用<strong>谷歌无国界版</strong>。</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>后面几篇博客将介绍在Windows下如何免费跳墙。请保证跳墙后仅用于学术研究和科学上网，<strong>严禁从事任何违反法律的活动</strong>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 狗急跳墙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BreakWall </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础06：介绍一个成功的 Git 分支模型]]></title>
      <url>/2015/07/07/git-basic06/</url>
      <content type="html"><![CDATA[<p>本文转自<a href="http://www.oschina.net/translate/a-successful-git-branching-model" target="_blank" rel="noopener">开源中国社区</a>，修复了几处文字错误。文章译者：Lax，xue777hua，FGQ，showme，Tocy，lidashuang，JoeyBlue。<br>英文原文：<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a>。</p>
<p>在这篇文章中，我提出一个开发模型。我已经将这个开发模型引入到我所有的项目里（无论在工作还是私人）已经一年有余，并且它被证明是非常成功的。我打算写这些已经很久了，但我一直找不到时间来做，现在终于有时间了。我不会讲任何项目的具体细节，仅是关于分支策略和释放管理相关内容。<a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf01.png" class="img-center"></p>
<h2 id="为何是Git？"><a href="#为何是Git？" class="headerlink" title="为何是Git？"></a>为何是Git？</h2><p>对于Git与其他集中式代码管理工具相比的优缺点的全面讨论，请参见<a href="https://git.wiki.kernel.org/index.php/GitSvnComparsion" target="_blank" rel="noopener">这里</a>。这样的争论总是喋喋不休。作为一个开发者，与现今的其他开发工具相比较，我更喜欢Git。Git真得改变了开发者对于合并和分支的思考。我曾经使用经典的CVS/Subversion，然而每次的合并/分支和其他行为总让人担惊受怕（“小心合并里的冲突，简直要命！”）。<br>但是对于Git来说，这些行为非常简单和搞笑，它们被认为是日常工作中的核心部分。例如，在很多CVS/Subversion<a href="http://svnbook.red-bean.com/" target="_blank" rel="noopener">书</a>里，分支与合并总是在后面的章节中被讨论（对于高级用户使用），然而在每个<a href="https://pragprog.com/book/tsgit/pragmatic-version-control-using-git" target="_blank" rel="noopener">Git书</a>中，在第3章就已经完全涵盖了（作为基础）。<br>简单和重复的特性带来的结果是：分支与合并不再是什么可以害怕的东西。分支/合并被认为对于版本管理工具比其他功能更重要。<br>关于工具，不再多说，让我们直接看开发模型吧。这个模型并不是如下模型：在管理软件开发进度方面，面对每个开发过程，每个队员必须按一定次序开发。</p>
<h2 id="分布式而非集中式"><a href="#分布式而非集中式" class="headerlink" title="分布式而非集中式"></a>分布式而非集中式</h2><p>对于这种分支模型，我们设置了一个版本库，它运转良好，这是一个”事实上”的版本库。不过请注意，这个版本库只是被<em>认为</em>是中心版本库（因为Git是一个分布式版本管理系统，从技术上来讲，并没有一个中心版本库）。我们将把这个版本库称为原始库，这个名字对所有的Git用户来说都很容易理解。<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf02.png" class="img-center"><br>每个开发者都对origin库拉代码和提交代码。但是除了集中式的存取代码关系，每个开发者也可以从子团队的其他队友那里获得代码版本变更。例如，对于2个或多个开发者一起完成的大版本变更，为了防止过早地向origin库提交工作内容，这种机制就变得非常有用。在上述途中，有如下子团队：Alice和Bob，Alice和David，Clair和David。<br>从技术上将，这意味着，Alice创建了一个Git的远程节点，而对于Bob，该节点指向了Bob的版本库，反之亦然。</p>
<h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><p><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf03.png" class="img-center"><br>在核心部分，研发模型很大程度上靠其他现有模型支撑的。中心库有2个可一直延续的分支：</p>
<ul>
<li>master分支</li>
<li>develop分支</li>
</ul>
<p>每个Git用户都要熟悉原始的master分支。与master分支并行的另一个分支，我们称之为develop分支。<br>我们把原始库/master库认作为主分支，HEAD的源代码存在于此版本中，并且随时都是一个预备生产状态。</p>
<p>我们把origin/develop库认为是主分支，该分支HEAD源码始终体现下个发布版的最新软件变更。有人称这个为“集成分支”，而这是每晚自动构建得来的。</p>
<p>当develop分支的源码到达了一个稳定状态待发布，所有的代码变更需要以某种方式合并到master分支，然后标记一个版本号。如何操作将在稍后详细介绍。<br>所以，每次变更都合并到了master，这就是新产品的定义。在这一点，我们倾向于严格执行这一点，从而，理论上，每当对master有一个提交操作，我们就可以使用Git钩子脚本来自动构建并且发布软件到生产服务器。</p>
<h2 id="辅助性分支"><a href="#辅助性分支" class="headerlink" title="辅助性分支"></a>辅助性分支</h2><p>我们的开发模型使用了各种辅助性分支，这些分支与关键分支（master和develop）一起，用来支持团队成员们并行开发，使得易于追踪功能，协助生产发布环境准备，以及快速修复实时在线问题。与关键分支不同，这些分支总是有一个有限的生命期，因为他们最终会被移除。<br>我们用到的分支类型包括：</p>
<ul>
<li>功能分支</li>
<li>发布分支</li>
<li>热修复分支</li>
</ul>
<p>每一种分支有一个特定目的，并且受限于严格到规则，比如：可以用哪些分支作为源分支，哪些分支能作为合并目标。我们马上将进行演练。<br>从技术角度来看，这些分支绝不是特殊分支。分支的类型基于我们使用的方法来进行分类。它们理所当然是普通的Git分支。</p>
<h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf04.png" class="img-center"><br>可能是develop分支的分支版本，最终必须合并到develop分支中。<br>分支命名规则：除了master、develop、release-*、hotfix-*之外，其他命名均可。<br>功能分支（有时被称为topic分支）通常为即将发布或者未来发布版开发新的功能。当新功能开始研发，包含该功能的发布版本在这个还是无法确定发布时间的。功能版本的实质是只要这个功能处于开发状态它就会存在，但是最终会或合并到develop分支（确定将新功能添加到不久的发布版中）或取消（譬如一次令人失望的测试）。<br>功能分支通常存在于开发者的软件库，而不是在源代码库中。</p>
<h4 id="创建一个功能分支"><a href="#创建一个功能分支" class="headerlink" title="创建一个功能分支"></a>创建一个功能分支</h4><p>开始一项功能的开发工作时，基于develop创建分支。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b myfeature develop</span><br><span class="line">Switched to a new branch <span class="string">"myfeature"</span></span><br></pre></td></tr></table></figure></p>
<h4 id="合并一个功能到develop分支"><a href="#合并一个功能到develop分支" class="headerlink" title="合并一个功能到develop分支"></a>合并一个功能到develop分支</h4><p>完成的功能可以合并进develop分支，以明确加入到未来的发布：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">$ git merge --no-ff myfeature</span><br><span class="line">Updating ea1b82a..05e9557</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git branch -d myfeature</span><br><span class="line">Deleted branch myfeature (was 05e9557).</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p>
<p>–no-ff标志导致合并操作创建一个新commit对象，即使该合并操作可以fast-forward。这避免了丢失这个功能分支存在的历史信息，将该功能的所有提交组合在一起。 比较:<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf05.png" class="img-center"><br>后一种情况，不可能从Git历史中看到哪些提交一起实现了一个功能——你必须手工阅读全部的日志信息。如果对整个功能进行回退 (比如一组提交)，后一种方式会是一种真正头痛的问题，而使用–no-ff参数的情况则很容易.<br>是的，它会创建一个新的（空）提交对象，但是收益远大于开销。<br>不幸的是，我还没找到一种方法，让–no-ff时作为合并操作的默认选项，但它应该是可行的。</p>
<h3 id="Release-分支"><a href="#Release-分支" class="headerlink" title="Release 分支"></a>Release 分支</h3><p>Release分支可能从develop分支分离而来，但是一定要合并到develop和master分支上，它的习惯命名方式为：release-*。<br>Release分支是为新产品的发布做准备的。它允许我们在最后时刻做一些细小的修改。他们允许小bugs的修改和准备发布元数据（版本号，开发时间等等）。当在Release分支完成这些所有工作以后，对于下一次打的发布，develop分支接收features会更加明确。<br>从develop分支创建新的Release分支的关键时刻是develop分支达到了发布的理想状态。至少所有这次要发布的features必须在这个点及时合并到develop分支。对于所有未来准备发布的features必须等到Release分支创建以后再合并。<br>在Release分支创建的时候要为即将发行版本分配一个版本号，一点都不早。直到那时，develop分支反映的变化都是为了下一个发行版，但是在Release分支创建之前，下一个发行版到底叫0.3还是1.0是不明确的。这个决定是在Release分支创建时根据项目在版本号上的规则制定的。</p>
<h4 id="创建一个release分支"><a href="#创建一个release分支" class="headerlink" title="创建一个release分支"></a>创建一个release分支</h4><p>Release分支是从develop分支创建的。例如，当前产品的发行版本号为1.1.5，同事我们有一个大的版本即将发行。develop 分支已经为下次发行做好了准备，我们得决定下一个版本是1.2（而不是1.1.6或者2.0）。所以我们将Release分支分离出来，给一个能够反映新版本号的分支名。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b release-1.2 develop</span><br><span class="line">Switched to a new branch <span class="string">"release-1.2"</span></span><br><span class="line">$ ./bump-version.sh 1.2</span><br><span class="line">Files modified successfully, version bumped to 1.2.</span><br><span class="line">$ git commit -a -m <span class="string">"Bumped version number to 1.2"</span></span><br><span class="line">[release-1.2 74d9424] Bumped version number to 1.2</span><br><span class="line">1 files changed, 1 insertions(+), 1 deletions(-)</span><br></pre></td></tr></table></figure></p>
<p>创建新分支以后，切换到该分支，添加版本号。这里，bump-version.sh 是一个虚构的shell脚本，它可以复制一些文件来反映新的版本（这当然可以手动改变–目的就是修改一些文件）。然后版本号被提交。<br>这个新分支可能会存在一段时间，直到该发行版到达它的预定目标。在此期间，bug的修复可能被提交到该分支上（而不是提交到develop分支上）。在这里严格禁止增加大的新features。他们必须合并到develop分支上，然后等待下一次大的发行版。</p>
<h4 id="完成一个release分支"><a href="#完成一个release分支" class="headerlink" title="完成一个release分支"></a>完成一个release分支</h4><p>当一个release分支准备好成为一个真正的发行版的时候，有一些工作必须完成。首先，release分支要合并到master上（因为每一次提交到master上的都是一个新定义的发行版，记住）。然后，提交到master上必须打一个标签，以便以后更加方便的引用这个历史版本。最后，在release分支上的修改必须合并到develop分支上，以便未来发行版也包含这些bugs的修复。<br>在Git中的前两步是：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">$ git merge --no-ff release-1.2</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git tag -a 1.2</span><br></pre></td></tr></table></figure></p>
<p>发行版现在已经完成，为以后引用打上标签。<br><strong>修订</strong>：你可能也想使用-s或-u <key>参数来标记你的标签。</key></p>
<p>为了是修改保持在release分支上，我们需要合并这些到develop分支上去，在Git上：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">$ git merge --no-ff release-1.2</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure></p>
<p>这个步骤可能会导致合并冲突（可能由于改变版本号更是如此）。如果是这样，修复它然后提交。<br>现在我们真正的完成了，这个release分支将被删除，因为我们不再需要它了。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d release-1.2</span><br><span class="line">Deleted branch release-1.2 (was ff452fe).</span><br></pre></td></tr></table></figure></p>
<h3 id="热修复分支"><a href="#热修复分支" class="headerlink" title="热修复分支"></a>热修复分支</h3><p><img src="https://raw.githubusercontent.com/higoge/image/master/git/wf06.png" class="img-center"><br>可以基于master分支，必须合并回develop和master分支。<br>分支名约定：hotfix-*<br>热修复分支与发布分支很相似，他们都为新的生成环境发布做准备，尽管这是未经计划的。他们来自生产环境的处于异常状态压力。当生成环境验证缺陷必须马上修复是，热修复分支可以基于master分支上对应与线上版本的tag创建。<br>其本质是团队成员（在develop分支上）的工作可以继续，而另一个人准备生产环境的快速修复。</p>
<h4 id="创建修补bug分支"><a href="#创建修补bug分支" class="headerlink" title="创建修补bug分支"></a>创建修补bug分支</h4><p>hotfix branch(修补bug分支)是从Master分支上面分出来的。例如，1.2版本是当前生产环境的版本并且有bug。但是开发分支（develop）变化还不稳定。我们需要分出来一个修补bug分支（hotfix branch）来解决这种情况。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hotfix-1.2.1 master</span><br><span class="line">Switched to a new branch <span class="string">"hotfix-1.2.1"</span></span><br><span class="line">$ ./bump-version.sh 1.2.1</span><br><span class="line">Files modified successfully, version bumped to 1.2.1.</span><br><span class="line">$ git commit -a -m <span class="string">"Bumped version number to 1.2.1"</span></span><br><span class="line">[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1</span><br><span class="line">1 files changed, 1 insertions(+), 1 deletions(-)</span><br></pre></td></tr></table></figure></p>
<p>分支关闭的时侯不要忘了更新版本号(bump the version)<br>然后，修复bug，一次提交或者多次分开提交。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Fixed severe production problem"</span></span><br><span class="line">[hotfix-1.2.1 abbe5d6] Fixed severe production problem</span><br><span class="line">5 files changed, 32 insertions(+), 17 deletions(-)</span><br></pre></td></tr></table></figure></p>
<h4 id="完成一个hotfix分支"><a href="#完成一个hotfix分支" class="headerlink" title="完成一个hotfix分支"></a>完成一个hotfix分支</h4><p>完成一个bugfix之后，需要把bugfix合并到master和develop分支去，这样就可以保证修复的这个bug也包含到下一个发行版中。这一点和完成release分支很相似。<br>首先，更新master并对release打上tag：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">$ git merge --no-ff hotfix-1.2.1</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br><span class="line">$ git tag -a 1.2.1</span><br></pre></td></tr></table></figure></p>
<p><strong>修订</strong>：你可能也想使用-s或-u <key>参数来标记你的标签。<br>下一步，把bugfix添加到develop分支中：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">$ git merge --no-ff hotfix-1.2.1</span><br><span class="line">Merge made by recursive.</span><br><span class="line">(Summary of changes)</span><br></pre></td></tr></table></figure></key></p>
<p>规则的一个例外是：<strong>如果一个release分支已经存在，那么应该把hotfix合并到这个release分支，而不是合并到develop分支</strong>。当release分支完成后， 将bugfix分支合并回release分支也会使得bugfix被合并到develop分支。（如果在develop分支的工作急需这个bugfix，等不到release分支的完成，那你也可以把bugfix合并到develop分支）<br>最后，删除临时分支：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d hotfix-1.2.1</span><br><span class="line">Deleted branch hotfix-1.2.1 (was abbe5d6).</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>尽管这个分支模型没有任何震撼的新东西, 文章开头的图表在我们的项目中表现出惊人的实用性。它形成了一个优雅的思维模型，易于领悟并使团队成员发展出对分支和发布过程的共同理解。<br>这里提供一份高质量PDF格式图表。去吧，把它挂载墙上以便能随时快速参考。<br><strong>更新</strong>：如果有人需要: 这是主图表的<a href="http://nvie.com/files/Git-branching-model.pdf" target="_blank" rel="noopener">gitflow-model.src.pdf</a>。<br>2015.08.19更新：主图表也可以<a href="https://raw.githubusercontent.com/higoge/file/master/Git-branching-model.pdf" target="_blank" rel="noopener">到这下载</a>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础05：Git版本控制的最佳实践]]></title>
      <url>/2015/07/07/git-basic05/</url>
      <content type="html"><![CDATA[<p>本文翻译自<a href="https://www.git-tower.com/learn/git/ebook/en/command-line/appendix/best-practices" target="_blank" rel="noopener">git-tower.com</a></p>
<h2 id="提交相关联的更新"><a href="#提交相关联的更新" class="headerlink" title="提交相关联的更新"></a>提交相关联的更新</h2><p>一次提交，是有关联的更新的一个打包。比如，修复两个不同的bug，应该是两次提交。小型提交，使其他开发者更易理解那些更新。当出错时，也更容易回滚。<br>有了像暂存区域和暂存文件某部分的工具，git很容易的创建细粒度的提交。</p>
<h2 id="经常性提交"><a href="#经常性提交" class="headerlink" title="经常性提交"></a>经常性提交</h2><p>经常提交能让你的提交更小，而且，再一次说，帮助你只提交有关联的更新。另外，它可以让你你更加频繁的跟其他人分享你的代码。那样，每个人更容易定期整合更新，避免合并冲突。相反，拥有少量的且巨大的更新，并且不经常分享，使得他人很难去解决冲突。<br><a id="more"></a></p>
<h2 id="不要提交半成品"><a href="#不要提交半成品" class="headerlink" title="不要提交半成品"></a>不要提交半成品</h2><p>你只有当代码完成后才提交。这不意味着你在提交前必须完成一个完整的巨大的功能。恰恰相反：将功能的的实现分解成逻辑块，记得尽早提交和经常提交。但是，不要当离开办公室或一天结束时，把随便什么内容都提交到仓库。如果你仅仅因为你需要一个感觉的工作区(如切换分支，拉取更新等)需要临时提交，考虑使用Git的Stash功能作为替代。</p>
<h2 id="在提交前测试代码"><a href="#在提交前测试代码" class="headerlink" title="在提交前测试代码"></a>在提交前测试代码</h2><p>当想提交一些你“想当然的以为”已经完成的东西时，请抵制住诱惑。彻底的测试以保证它确实完成了，并且没有副作用(至少根据当前的情况判断)。当提交半成品到你本地仓库，你还能能自己原来自己；与推送/分享你代码给其他人相比，测试你自己的代码则更加重要。</p>
<h2 id="编写优良的提交信息"><a href="#编写优良的提交信息" class="headerlink" title="编写优良的提交信息"></a>编写优良的提交信息</h2><p>在信息的开头，简要介绍这次更新(通常做法是至多50字)，用一个空行与后续的主体分离。信息主体对于下述的问题应提供详细的回答：</p>
<ul>
<li>这次更新的动机是什么？</li>
<li>与之前的实现有什么不同？</li>
</ul>
<p>使用祈使句，现在时态(使用change，而不是changed或changes)，与诸如git merge命令生成的提交信息一致。</p>
<h2 id="版本控制不是一个备份系统"><a href="#版本控制不是一个备份系统" class="headerlink" title="版本控制不是一个备份系统"></a>版本控制不是一个备份系统</h2><p>把你的文件备份到远程服务器上是一个版本控制系统非常好的附加应用。但是，你不应该像备份系统一样使用你的版本控制系统(VCS)。当进行版本控制时，你应该集中精力在语义上的提交(第1章 相关联的更新)，你不应该只是填充文件。</p>
<h2 id="使用分支"><a href="#使用分支" class="headerlink" title="使用分支"></a>使用分支</h2><p>分支是Git最强大的功能之一，并且这并非偶然：快速易用的分支功能从一开始就是核心需求。分支是帮助我们避免混淆开发过程中不同支线的完美工具。你应在你的开发工作流程中广泛使用分支，诸如功能，修复缺陷，新想法….</p>
<h2 id="统一的工作流程"><a href="#统一的工作流程" class="headerlink" title="统一的工作流程"></a>统一的工作流程</h2><p>Git可以让你选取诸多不同的工作流程，长期运行的分支(long-running branches)，置顶分支(topic branches)，合并或变基，git-flow…，你的选择取决于几个个因素：你的项目、整体的开发工作和工作流，以及(可能是最重要的因素)你和你的小伙伴的个人喜好。不管怎样，一旦你选取了一个工作流，你就要确保每个人的工作都能与此工作流程保持一致。</p>
<h2 id="帮助以及文档"><a href="#帮助以及文档" class="headerlink" title="帮助以及文档"></a>帮助以及文档</h2><p>通过命令行获取帮助<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><p>git官方网站<br><a href="http://www.git-scm.com/" target="_blank" rel="noopener">http://www.git-scm.com/</a><br>免费在线资源<br><a href="http://www.git-tower.com/learn" target="_blank" rel="noopener">http://www.git-tower.com/learn</a><br><a href="http://rogerdudler.github.io/git-guide/" target="_blank" rel="noopener">http://rogerdudler.github.io/git-guide/</a><br><a href="http://www.git-scm.org/book" target="_blank" rel="noopener">http://www.git-scm.org/book</a></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程08：关于Git远程仓库操作的一些经验]]></title>
      <url>/2015/07/07/git-remote08/</url>
      <content type="html"><![CDATA[<p><strong>以下内容纯属个人观点</strong>，仅供参考。</p>
<ul>
<li>执行<code>git pull [远程仓库名] [远程分支名]</code>命令，注意与本地分支的对应。</li>
<li>如果你是处女座，不要用<code>git pull</code>，而用<code>git fetch</code>，获取到更新后，手动进行merge。</li>
<li>origin只有在<code>git fetch</code>命令才会有用，其他情况，是否起名origin都无所谓，但是，别没事找事起个奇怪的名字。</li>
<li>如无特殊情况，不建议远程分支与本地分支名字不对应，建议设置好upstream，除非远程分支与本地临时分支重名。可以用<code>git branch -m [旧分支名] [新分支名]</code>进行临时分支的重名。<a id="more"></a></li>
<li><code>push.default</code>设置为simple模式。</li>
<li><code>git remote add</code>多个库，主库设置为origin，推送特定分支(master，dev，feature，bug-fix等)，备份库(一般是本地的裸仓库)推送临时分支。</li>
<li>团队应约定一种Git分支流程，并约定不要删除核心分支。当然删除了也无所谓，只要其他人fetch过，就能再次推送还原。所以要求Git管理员需要经常性的fetch，以确保能获取到所有的更新，保证误删除时可以及时还原。</li>
<li>除管理员外，尽量不要推送标签。只有管理员可以删除标签，并用其他方式通知所有组员进行标签的更新，当然，这个更新也是本地仓库的手动更新。</li>
<li>当有多个项目，如果想采用类似于github的管理方式，建议去查查gitlab。</li>
</ul>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程07：远程标签]]></title>
      <url>/2015/07/07/git-remote07/</url>
      <content type="html"><![CDATA[<h2 id="标签的创建"><a href="#标签的创建" class="headerlink" title="标签的创建"></a>标签的创建</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.1</span><br></pre></td></tr></table></figure>
<p>在当前的HEAD创建标签v0.1。<a id="more"></a><br>也可以根据在某次提交上创建分支。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.2 -m <span class="string">"version 0.2"</span> 6944954</span><br></pre></td></tr></table></figure></p>
<p>在编号为6944954的commit上创建标签v0.2，信息为version 0.2。</p>
<p>标签分为两种类型，<strong>轻量级(lightweight)</strong>标签，如v0.1；<strong>含附注(annotated)</strong>标签，如v0.2。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用GNU Privacy Guard(GPG)来签署或验证。一般建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
<h2 id="推送提交以及标签"><a href="#推送提交以及标签" class="headerlink" title="推送提交以及标签"></a>推送提交以及标签</h2><p>连同标签一起推送。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master --tags</span><br></pre></td></tr></table></figure></p>
<p>或者仅仅推送标签。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure></p>
<h2 id="标签的更新"><a href="#标签的更新" class="headerlink" title="标签的更新"></a>标签的更新</h2><p>执行<code>git fetch</code>会获取所有的提交以及标签的更新。<br>仅仅获取标签的更新。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin  --tags</span><br></pre></td></tr></table></figure></p>
<h2 id="查看远程仓库的标签"><a href="#查看远程仓库的标签" class="headerlink" title="查看远程仓库的标签"></a>查看远程仓库的标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git ls-remote --tags</span><br><span class="line">From git@github0123:jeremy0123/fetch.git</span><br><span class="line">30f4e5cdfef2539b5e156a607f365fb457f309a4        refs/tags/v0.1</span><br><span class="line">0efbfd03ed4b09647ef8a32db9c0a075f7d7dbeb        refs/tags/v0.2</span><br><span class="line">6944954ffa18df994365e53e96d3826a3953890b        refs/tags/v0.2^&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>refs/tags/v0.2^{}</code>表示v0.2是含附注的标签。<br>另外，参数<code>--tags</code>可以简化为<code>-t</code>；<code>--heads</code>会获取远程仓库的分支信息。如果没有任何参数，将获取所有的分支和标签信息。</p>
<h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete tag v0.1</span><br></pre></td></tr></table></figure>
<p>或<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.1</span><br></pre></td></tr></table></figure></p>
<p>远程仓库的标签删除后，<strong>本地仓库无法通过命令获取到删除的信息</strong>，只能通过<code>git ls-remote</code>获取到远程仓库的标签，与本地仓库的标签比对，手动执行<code>git tag -d [标签名]</code>进行删除。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程06：push.default设置]]></title>
      <url>/2015/07/07/git-remote06/</url>
      <content type="html"><![CDATA[<p>在执行<code>git push</code>时，git会给一个warning，然后推送更新，内容如下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">warning: push.default is <span class="built_in">unset</span>; its implicit value is changing <span class="keyword">in</span></span><br><span class="line">Git 2.0 from <span class="string">'matching'</span> to <span class="string">'simple'</span>. To squelch this message</span><br><span class="line">and maintain the current behavior after the default changes, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default matching</span><br><span class="line"></span><br><span class="line">To squelch this message and adopt the new behavior now, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default simple</span><br><span class="line"></span><br><span class="line">See <span class="string">'git help config'</span> and search <span class="keyword">for</span> <span class="string">'push.default'</span> <span class="keyword">for</span> further information.</span><br><span class="line">(the <span class="string">'simple'</span> mode was introduced <span class="keyword">in</span> Git 1.7.11. Use the similar mode</span><br><span class="line"><span class="string">'current'</span> instead of <span class="string">'simple'</span> <span class="keyword">if</span> you sometimes use older versions of Git)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Counting objects: 10, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 469 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github0123:jeremy0123/fetch.git</span><br><span class="line">   c86dc9b..9d7c603  dev -&gt; dev</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>举个栗子直接解释这段英文，我们已经设置好master分支的upstream为origin/master，dev分支的upstream为origin/dev，并且我们在master分支上做了commit，同时，在dev分支上也做了commit。当push.default设置为matching时，执行<code>git push</code>，master分支和dev分支都会推送。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Counting objects: 10, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 469 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github0123:jeremy0123/fetch.git</span><br><span class="line">   c86dc9b..9d7c603  dev -&gt; dev</span><br><span class="line">   8858616..91f9876  master -&gt; master</span><br></pre></td></tr></table></figure></p>
<p>push.default设置为simple时，执行<code>git push</code>只会推送当前所在的分支，不会推送其他分支。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Counting objects: 10, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 469 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github0123:jeremy0123/fetch.git</span><br><span class="line">   c86dc9b..9d7c603  dev -&gt; dev</span><br></pre></td></tr></table></figure></p>
<p>目前版本的Git默认使用matching模式，而<strong>推荐使用simple模式</strong>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程05：远程分支的删除与同步]]></title>
      <url>/2015/07/07/git-remote05/</url>
      <content type="html"><![CDATA[<p>删除远程分支命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :br03</span><br></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete br03</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>另一个用户使用<code>git fetch</code>并不能同步获取到br03分支被删除。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br></pre></td></tr></table></figure></p>
<p>此命令没有更新的显示，说明并无删除的信息。<br>但执行<code>git pull</code>时，报错。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">Your configuration specifies to merge with the ref <span class="string">'br03'</span></span><br><span class="line">from the remote, but no such ref was fetched.</span><br></pre></td></tr></table></figure></p>
<p>这肯定是执行git fetch时，报错。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin br03</span><br><span class="line">fatal: Couldn<span class="string">'t find remote ref br03</span></span><br><span class="line"><span class="string">fatal: The remote end hung up unexpectedly</span></span><br></pre></td></tr></table></figure></p>
<p>但检查分支时，发现origin/br03还存在。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git br -a</span><br><span class="line">  br01</span><br><span class="line">  br02</span><br><span class="line">* br03</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/br01-remote</span><br><span class="line">  remotes/origin/br03</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure></p>
<p>这说明，<code>remotes/origin/*</code>这些远程跟踪分支，仅仅是远程分支的一个缓存，并且，<strong>不能通过<code>git fetch</code>命令获取到分支删除的更新</strong>。</p>
<p>执行命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github0123:jeremy0123/fetch.git</span><br><span class="line">  Push  URL: git@github0123:jeremy0123/fetch.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    br01-remote              tracked</span><br><span class="line">    br02                     tracked</span><br><span class="line">    br03-remote              tracked</span><br><span class="line">    master                   tracked</span><br><span class="line">    refs/remotes/origin/br03 stale (use <span class="string">'git remote prune'</span> to remove)</span><br><span class="line">  Local branches configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    br01   merges with remote br01-remote</span><br><span class="line">    br03   merges with remote br03</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local refs configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    br02   pushes to br02   (up to date)</span><br><span class="line">    master pushes to master (<span class="built_in">local</span> out of date)</span><br></pre></td></tr></table></figure></p>
<p>发现<code>refs/remotes/origin/br03</code>状态是<strong>stale</strong>(陈旧的)，并且后面有命令提示。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote prune origin</span><br><span class="line">Pruning origin</span><br><span class="line">URL: git@github0123:jeremy0123/fetch.git</span><br><span class="line"> * [pruned] origin/br03</span><br></pre></td></tr></table></figure></p>
<p>或者执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p</span><br><span class="line">remote: Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From git@github0123:jeremy0123/fetch.git</span><br><span class="line">   04a6837..d49d143  master     -&gt; origin/master</span><br><span class="line"> x [deleted]         (none)     -&gt; origin/br03</span><br></pre></td></tr></table></figure></p>
<p>在执行fetch之后，删除远程不存在的远程跟踪分支。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程04：git fetch & git push & git pull]]></title>
      <url>/2015/07/06/git-remote04/</url>
      <content type="html"><![CDATA[<p>这三条语句的，完整的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [远程仓库名] [分支01]:[分支02]</span><br></pre></td></tr></table></figure></p>
<p>实际使用时，远程仓库名和分支名，在特定的情况下可以省略。一两句话说不清楚，采用脑图的方式展示。请一定要注意<strong>当前所在的分支是什么</strong>。<br>如果图片显示太小，<s>请到汪汪的网盘下载(文件夹为<code>/Git</code>)</s>请直接下载，如果有XMind，请直接查看脑图源文件。<a id="more"></a><br>2015.08.19更新：<a href="https://raw.githubusercontent.com/higoge/file/master/git%20fetch%20%26%20git%20push%20%26%20git%20pull.png" target="_blank" rel="noopener">git fetch &amp; git push &amp; git pull.png</a>；<a href="https://raw.githubusercontent.com/higoge/file/master/git%20fetch%20%26%20git%20push%20%26%20git%20pull.xmind" target="_blank" rel="noopener">git fetch &amp; git push &amp; git pull.xmind</a><br><img src="https://raw.githubusercontent.com/higoge/image/master/git/upstream.png" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程03：分支的upstream]]></title>
      <url>/2015/07/06/git-remote03/</url>
      <content type="html"><![CDATA[<p>一个分支的upstream，其实就是与远程分支做关联，告诉git，默认此分支为推送及拉取的远程分支的信息。<br><a id="more"></a></p>
<h2 id="upstream的设置"><a href="#upstream的设置" class="headerlink" title="upstream的设置"></a>upstream的设置</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=origin/dev</span><br></pre></td></tr></table></figure>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u origin/dev</span><br></pre></td></tr></table></figure></p>
<p>此命令的含义是，是指当前分支的upstream为origin远程仓库的dev分支。</p>
<h3 id="在推送的同时，同时设置upstream"><a href="#在推送的同时，同时设置upstream" class="headerlink" title="在推送的同时，同时设置upstream"></a>在推送的同时，同时设置upstream</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p>命令的含义是，推送master分支到远程origin仓库master分支，并且建立本地分支master的upstream为origin/master。(关于<code>git push</code>更详细的解释，请参考第04章)</p>
<h3 id="不切换分支直接设置其他分支的upstream"><a href="#不切换分支直接设置其他分支的upstream" class="headerlink" title="不切换分支直接设置其他分支的upstream"></a>不切换分支直接设置其他分支的upstream</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git br -u origin/br01-remote br01</span><br></pre></td></tr></table></figure>
<p>设置本地分支br01的upstream为origin/br01-remote。<br>或push的时候直接设置。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin br03:br03</span><br></pre></td></tr></table></figure></p>
<h2 id="取消upstream"><a href="#取消upstream" class="headerlink" title="取消upstream"></a>取消upstream</h2><h3 id="取消当前分支的upstream"><a href="#取消当前分支的upstream" class="headerlink" title="取消当前分支的upstream"></a>取消当前分支的upstream</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">unset</span>-upstream</span><br></pre></td></tr></table></figure>
<h3 id="取消其他分支的upstream"><a href="#取消其他分支的upstream" class="headerlink" title="取消其他分支的upstream"></a>取消其他分支的upstream</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">unset</span>-upstream [分支名]</span><br></pre></td></tr></table></figure>
<h2 id="查看upstream"><a href="#查看upstream" class="headerlink" title="查看upstream"></a>查看upstream</h2><p>查看upstream信息，主要是查看仓库目录下.git/config文件。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = <span class="literal">true</span></span><br><span class="line">        bare = <span class="literal">false</span></span><br><span class="line">        logallrefupdates = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">        url = git@github0123:jeremy0123/fetch.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br><span class="line">[branch <span class="string">"br01"</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/br01-remote</span><br><span class="line">[branch <span class="string">"br03"</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/br03</span><br></pre></td></tr></table></figure></p>
<p>其中<code>[branch &quot;分支名&quot;]</code>下的信息就是upstream信息，remote项表示upstream的远程仓库名，merge项表示远程跟踪分支名。<br>另外，config中<code>[remote &quot;远程仓库名&quot;]</code>下的url和fetch需要注意下，这些信息可以和第02章的clone信息对应起来。</p>
<p>也可以通过<code>git remote show</code>查看。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github0123:jeremy0123/fetch.git</span><br><span class="line">  Push  URL: git@github0123:jeremy0123/fetch.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    br01-remote tracked</span><br><span class="line">    br03        tracked</span><br><span class="line">    master      tracked</span><br><span class="line">  Local branches configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    br01   merges with remote br01-remote</span><br><span class="line">    br03   merges with remote br03</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local refs configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    br03   pushes to br03   (up to date)</span><br><span class="line">    master pushes to master (up to date)</span><br></pre></td></tr></table></figure></p>
<p><code>Remote branches</code>表示远程仓库的分支，<code>git pull</code>表示upstream跟踪分支。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程02：git clone都做了什么]]></title>
      <url>/2015/07/06/git-remote02/</url>
      <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github0123:jeremy0123/fetch.git fetch-local</span><br></pre></td></tr></table></figure>
<p>执行如上<code>git clone</code>指令，相对于执行了如下工作。</p>
<ul>
<li>创建一个文件夹fetch-local，执行<code>git init</code>初始化为一个仓库，<code>git remote add origin</code>到远程仓库。</li>
<li>创建远程跟踪分支remote/origin/*。 <a id="more"></a></li>
<li>创建并切换到初始分支，这个分支是从远程仓库当前活动分支fork来的。</li>
<li>以上工作完成后，执行一个没有参数的<code>git fetch</code>指令，更新所有远程跟踪分支。</li>
<li>执行没有参数的git pull指令，合并远程的master分支到本地的master分支。同时设置master分支的upstream为远程跟踪的master分支。本条执行的条件是远程分支存在master分支。</li>
<li>创建默认配置，即.git/config文件，在.git/refs/remotes/origin/创建远程分支头的引用(HEAD文件)；初始化配置文件中remote.origin.url和remote.origin.fetch参数。<br><strong>注意：</strong>远程跟踪分支，使用命令git branch -a就可查看到。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/br01</span><br><span class="line">  remotes/origin/br01-remote</span><br><span class="line">  remotes/origin/br03</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这些分支叫远程跟踪分支，但真实的意思应该是，<strong>远程分支在本地仓库的缓存</strong>，不执行<code>git fetch</code>命令，不会获取到远程分支的更新。<strong>千万不要将这些分支当做远程分支，以为是它们是自动更新的</strong>。<br>另外，<code>remotes/origin/HEAD -&gt; origin/master</code> 表示远程仓库origin默认分支是<code>origin/master</code>分支(其实就是显示git clone最后的工作：创建远程分支头的引用)。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git远程01：git remote相关操作]]></title>
      <url>/2015/07/06/git-remote01/</url>
      <content type="html"><![CDATA[<h2 id="添加远程仓库关联"><a href="#添加远程仓库关联" class="headerlink" title="添加远程仓库关联"></a>添加远程仓库关联</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add [远程仓库名] [远程仓库url]</span><br></pre></td></tr></table></figure>
<p>举个栗子：<a id="more"></a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github0123:jeremy0123/fetch.git</span><br></pre></td></tr></table></figure></p>
<p>origin是远程仓库的别名，通常默认的远程仓库都叫origin。<br>当然也可以添加其他的远程仓库进行关联，并且仓库名称可以不一样。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add abc git@github.com:higoge/def.git</span><br></pre></td></tr></table></figure></p>
<p>将远程def.git仓库与本地仓库关联，并且取名为abc。<br>origin是默认的名称，除了<code>git fetch</code>下会默认获取外(第04章介绍)，这个默认名暂时没有别的用途，可以随时修改。</p>
<h2 id="远程仓库名修改"><a href="#远程仓库名修改" class="headerlink" title="远程仓库名修改"></a>远程仓库名修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename [旧仓库名] [新仓库名]</span><br></pre></td></tr></table></figure>
<p>举个栗子：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename origin origin02</span><br></pre></td></tr></table></figure></p>
<p>将远程仓库origin改名为origin02。</p>
<h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote remove [远程仓库名]</span><br></pre></td></tr></table></figure>
<h2 id="显示远程仓库的信息"><a href="#显示远程仓库的信息" class="headerlink" title="显示远程仓库的信息"></a>显示远程仓库的信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">abc     git@github.com:higoge/def.git (fetch)</span><br><span class="line">abc     git@github.com:higoge/def.git (push)</span><br><span class="line">origin  git@github0123:jeremy0123/fetch.git (fetch)</span><br><span class="line">origin  git@github0123:jeremy0123/fetch.git (push)</span><br></pre></td></tr></table></figure>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Remote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础04]]></title>
      <url>/2015/07/03/git-basic04/</url>
      <content type="html"><![CDATA[<h2 id="临时存储工作区"><a href="#临时存储工作区" class="headerlink" title="临时存储工作区"></a>临时存储工作区</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash <span class="comment"># 把当前工作现场(工作区及暂存区的修改)“储藏”起来，以后可恢复现场后继续工作</span></span><br><span class="line">Saved working directory and index state WIP on master: e353f90 Merge branch <span class="string">'br03'</span></span><br><span class="line">HEAD 现在位于 e353f90 Merge branch <span class="string">'br03'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list <span class="comment"># 查看所有的stash</span></span><br><span class="line">stash@&#123;0&#125;: WIP on master: e353f90 Merge branch <span class="string">'br03'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="comment"># 还原工作区</span></span><br><span class="line">位于分支 master</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add &lt;file&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;file&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">        修改：     01.txt</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">"git add"</span> 和/或 <span class="string">"git commit -a"</span>）</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5e63a27ea50c2fd5f3ee5f7a36c10b224b430cc5)</span><br></pre></td></tr></table></figure>
<p><code>git stash pop</code> = <code>git stash apply</code> + <code>git stash drop stash@{0}</code>。<br><code>git stash</code>将工作区及暂存区的修改存储起来，但还原时，除了新增的跟踪文件(新文件第一次被add)，其他修改全部还原到工作区。</p>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor vim <span class="comment"># 编辑器用VIM</span></span><br><span class="line">$ git config --global core.quotepath <span class="literal">false</span> <span class="comment"># 不转义文件名或路径</span></span><br><span class="line">$ git config --global diff.tool vimdiff <span class="comment"># difftool用vimdiff</span></span><br><span class="line">$ git config color.ui <span class="literal">true</span> <span class="comment"># 开启git颜色</span></span><br><span class="line">$ git config --list <span class="comment"># 显示config列表，或者查看.gitconfig及.git/config文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名设置 输入git co就可以代表git checkout</span></span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.cm commit</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line">$ git config --global alias.mg merge --no-ff</span><br><span class="line">$ git config --global alias.unstage <span class="string">'reset HEAD'</span></span><br><span class="line">$ git config --global alias.last <span class="string">'log -1'</span> <span class="comment"># 显示最后一次提交</span></span><br><span class="line">$ git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset \</span></span><br><span class="line"><span class="string">-%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)[%an]%Creset' --abbrev-commit --topo-order --date=short"</span> <span class="comment"># 图形化显示git log</span></span><br></pre></td></tr></table></figure>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>编译过程的文件，以及一些临时文件，可以设置规则，不要求git进行跟踪。在工作目录下编写<code>.gitignore</code>文件，将需要忽略的文件或规则编写进去即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># My configurations:</span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br></pre></td></tr></table></figure></p>
<p>(以上内容来着廖雪峰的官方网站)</p>
<h2 id="自动提示"><a href="#自动提示" class="headerlink" title="自动提示"></a>自动提示</h2><p>如果使用git时，无法通过tab键提示，就需要安装<code>git-completion.bash</code>。<a href="https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash" target="_blank" rel="noopener">这里下载</a>。</p>
<p>放置到cygwin目录下的/home/&lt;用户&gt;目录下，执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv git-completion.bash ~/.git-completion.bash <span class="comment"># 更改为隐藏文件</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'source ~/.git-completion.bash'</span> &gt;&gt; .bashrc <span class="comment"># 在.bashrc下添加命令</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc <span class="comment"># 使.bashrc立即生效</span></span><br></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git che&lt;tab&gt;&lt;tab&gt;</span><br><span class="line">checkout      cherry        cherry-pick</span><br></pre></td></tr></table></figure></p>
<p>以后忘掉命令，就可以通过tab键进行提示了。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础03]]></title>
      <url>/2015/07/03/git-basic03/</url>
      <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch br01 <span class="comment"># 创建br01分支</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout br01 <span class="comment"># 切换到br01分支</span></span><br><span class="line">切换到分支 <span class="string">'br01'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b br02 <span class="comment"># 创建并切换到br02分支</span></span><br><span class="line">切换到一个新分支 <span class="string">'br02'</span></span><br></pre></td></tr></table></figure>
<p>所创建的分支，都是基于当前分支创建的，也可以指定分支创建。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b br03 br01 <span class="comment"># 基于br01创建br03，并切换到br03</span></span><br><span class="line">切换到一个新分支 <span class="string">'br03'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/git/b02.png" alt="图片来之廖雪峰的官方网站"><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="comment"># 显示分支 *表示当前所在分支</span></span><br><span class="line">  br01</span><br><span class="line">  br02</span><br><span class="line">  br03</span><br><span class="line">* master</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge br01 <span class="comment"># 合并分支br01到当前分支</span></span><br><span class="line">更新 dacd44e..fb3440c</span><br><span class="line">Fast-forward</span><br><span class="line"> 01.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p>Fast-forward表示当前合并是快进模式，速度快，但删除分支后，会丢失分支信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d br01 <span class="comment"># 删除分支 可以用-D强制删除</span></span><br><span class="line">已删除分支 br01（曾为 fb3440c）。</span><br></pre></td></tr></table></figure></p>
<p>建议<strong>禁用</strong>Fast forward模式，git会在merge时产生一个新的commit，从分支历史上就可以看出分支信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff br03 <span class="comment"># 合并br03分支，进制Fast forward模式，此时会产生一个提交，并要求编写msg</span></span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> 01.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) \</span></span><br><span class="line"><span class="string">%C(bold blue)[%an]%Creset'</span> --abbrev-commit --topo-order --date=short </span><br><span class="line">*   e353f90 - (HEAD, master) Merge branch <span class="string">'br03'</span> (2014-12-24) [learnit]</span><br><span class="line">|\</span><br><span class="line">| * fac7935 - (br03) 09 (2014-12-24) [learnit]</span><br><span class="line">|/</span><br><span class="line">* fb3440c - 08 (2014-12-24) [learnit]</span><br><span class="line">* dacd44e - (br02) 04 (2014-12-24) [learnit]</span><br><span class="line">* 9cf50d9 - 03 (2014-12-24) [learnit]</span><br><span class="line">* 2e18697 - 02 (2014-12-24) [learnit]</span><br><span class="line">* 49805b0 - 添加01.txt文档 (2014-12-24) [learnit]</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/higoge/image/master/git/b03.png" alt="图片来之廖雪峰的官方网站"></p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0 <span class="comment"># 给HEAD创建标签v1.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.9 -m <span class="string">'版本0.9'</span> HEAD~ <span class="comment"># 给特定版本创建标签v0.9，并且给标签加信息。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag <span class="comment"># 显示所有标签</span></span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v1.0 <span class="comment"># 删除标签v1.0</span></span><br><span class="line">已删除 tag <span class="string">'v1.0'</span>（曾为 e353f90）</span><br></pre></td></tr></table></figure>
<h2 id="各种show"><a href="#各种show" class="headerlink" title="各种show"></a>各种show</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git show HEAD <span class="comment"># 查看当前版本信息，或某次版本信息</span></span><br><span class="line">commit e353f90b923056c4a77f87ec286f4643cabfe80b</span><br><span class="line">Merge: fb3440c fac7935</span><br><span class="line">Author: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 15:22:05 2014 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">'br03'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git show br02 <span class="comment"># 查看br02的HEAD信息</span></span><br><span class="line">commit dacd44eb03e1f84cac2e34d8f1e1b0fb9c9e0b52</span><br><span class="line">Author: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 14:11:59 2014 +0800</span><br><span class="line"></span><br><span class="line">    04</span><br><span class="line"></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index 7e556fd..3b6f86c 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -1,3 +1,4 @@</span><br><span class="line"> line01</span><br><span class="line"> 02</span><br><span class="line"> 03</span><br><span class="line">+04</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.9 <span class="comment"># 查看标签v0.9信息</span></span><br><span class="line">tag v0.9</span><br><span class="line">Tagger: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 15:29:36 2014 +0800</span><br><span class="line"></span><br><span class="line">版本0.9</span><br><span class="line"></span><br><span class="line">commit fb3440ce1930ac61f342a48f1c7f3339148e69ea</span><br><span class="line">Author: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 15:10:14 2014 +0800</span><br><span class="line"></span><br><span class="line">    08</span><br><span class="line"></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index 3b6f86c..f12be70 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -2,3 +2,4 @@ line01</span><br><span class="line"> 02</span><br><span class="line"> 03</span><br><span class="line"> 04</span><br><span class="line">+08</span><br></pre></td></tr></table></figure>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础02]]></title>
      <url>/2015/07/03/git-basic02/</url>
      <content type="html"><![CDATA[<h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><h3 id="仅修改但没有添加到暂存区"><a href="#仅修改但没有添加到暂存区" class="headerlink" title="仅修改但没有添加到暂存区"></a>仅修改但没有添加到暂存区</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">"git add &lt;file&gt;..."</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">"git checkout -- &lt;file&gt;..."</span> 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">        修改：     01.txt</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 <span class="string">"git add"</span> 和/或 <span class="string">"git commit -a"</span>）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="已提交到暂存区，但没有提交"><a href="#已提交到暂存区，但没有提交" class="headerlink" title="已提交到暂存区，但没有提交"></a>已提交到暂存区，但没有提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 <span class="string">"git reset HEAD &lt;file&gt;..."</span> 撤出暂存区）</span><br><span class="line"></span><br><span class="line">        修改：     01.txt</span><br></pre></td></tr></table></figure>
<h3 id="已提交到当前分支，工作区干净"><a href="#已提交到当前分支，工作区干净" class="headerlink" title="已提交到当前分支，工作区干净"></a>已提交到当前分支，工作区干净</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">位于分支 master</span><br><span class="line">无文件要提交，干净的工作区</span><br></pre></td></tr></table></figure>
<h2 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment"># 显示所以提交历史</span></span><br><span class="line">commit 9cf50d94d4134f36199c19a4798fe84c81832515</span><br><span class="line">Author: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 13:49:39 2014 +0800</span><br><span class="line"></span><br><span class="line">    03</span><br><span class="line">........</span><br></pre></td></tr></table></figure>
<p>commit后面的一串数字，是提交的编号(SHA1编码)，也叫版本号。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p 01.txt <span class="comment"># 显示某个文件的历次修改</span></span><br><span class="line">commit 9cf50d94d4134f36199c19a4798fe84c81832515</span><br><span class="line">Author: learnit &lt;higoge@gmail.com&gt;</span><br><span class="line">Date:   Wed Dec 24 13:49:39 2014 +0800</span><br><span class="line"></span><br><span class="line">    03</span><br><span class="line"></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index 181417e..7e556fd 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> line01</span><br><span class="line"> 02</span><br><span class="line">+03</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline <span class="comment"># 在一行上显示log</span></span><br><span class="line">9cf50d94d4134f36199c19a4798fe84c81832515 03</span><br><span class="line">2e18697d9cf53454820091a5db86790102ddf8db 02</span><br><span class="line">49805b0b3b55fe32219cd14d5a15583893836520 添加01.txt文档</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) \</span></span><br><span class="line"><span class="string">%C(bold blue)[%an]%Creset'</span> --abbrev-commit --topo-order --date=short <span class="comment"># 变态的显示，不过更加清晰</span></span><br><span class="line">* 9cf50d9 - (HEAD, master) 03 (2014-12-24) [learnit]</span><br><span class="line">* 2e18697 - 02 (2014-12-24) [learnit]</span><br><span class="line">* 49805b0 - 添加01.txt文档 (2014-12-24) [learnit]</span><br></pre></td></tr></table></figure>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git diff <span class="comment"># 暂存区与工作区的比较</span></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index fc52d75..b726728 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -3,3 +3,4 @@ line01</span><br><span class="line"> 03</span><br><span class="line"> 04</span><br><span class="line"> 05</span><br><span class="line">+06</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD <span class="comment"># 工作区+暂存区与当前版本的比较</span></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index 3b6f86c..b726728 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -2,3 +2,5 @@ line01</span><br><span class="line"> 02</span><br><span class="line"> 03</span><br><span class="line"> 04</span><br><span class="line">+05</span><br><span class="line">+06</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 2e18 <span class="comment"># 不需要把编号全部写出</span></span><br><span class="line">diff --git a/01.txt b/01.txt</span><br><span class="line">index 181417e..b726728 100644</span><br><span class="line">--- a/01.txt</span><br><span class="line">+++ b/01.txt</span><br><span class="line">@@ -1,2 +1,6 @@</span><br><span class="line"> line01</span><br><span class="line"> 02</span><br><span class="line">+03</span><br><span class="line">+04</span><br><span class="line">+05</span><br><span class="line">+06</span><br></pre></td></tr></table></figure>
<p><code>HEAD</code>表示当前版本。<br><code>HEAD~</code>表示当前版本的前一个版本，或<code>HEAD^</code>。<br><code>HEAD~~</code>表示将当前版本的前两个版本, 或<code>HEAD^^</code>。<br><code>HEAD~100</code>表示当前版本的前100个版本。</p>
<h2 id="撤销-后悔药"><a href="#撤销-后悔药" class="headerlink" title="撤销(后悔药)"></a>撤销(后悔药)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- 01.txt  <span class="comment"># 放弃工作区的修改 !!!慎用!!!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD 01.txt <span class="comment"># 移出暂存区的修改，放回工作区</span></span><br><span class="line">重置后撤出暂存区的变更：</span><br><span class="line">M       01.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD~  <span class="comment"># 恢复到某个版本，所有的修改(包括暂存区中的修改)放回工作区</span></span><br><span class="line">重置后撤出暂存区的变更：</span><br><span class="line">M       01.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD~ <span class="comment"># 恢复到某个版本，放弃所有的修改</span></span><br><span class="line">HEAD 现在位于 dfcfea8 05</span><br></pre></td></tr></table></figure>
<p><code>--hard</code>参数表示放弃所有的更改，还原后工作区干净。<br>不加<code>--hard</code>参数，即<code>--soft</code>，表示将到达版本之后的所有修改，包括暂存区的修改全部放置到工作区。<br>通过<code>git status</code>命令就可以看出<code>--hard</code>参数的作用。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog <span class="comment"># 记录了每次执行的命令</span></span><br><span class="line">dfcfea8 HEAD@&#123;13&#125;: reset: moving to HEAD~</span><br><span class="line">b28a718 HEAD@&#123;14&#125;: commit: 06</span><br><span class="line">dfcfea8 HEAD@&#123;15&#125;: reset: moving to HEAD~</span><br><span class="line">7cf36f0 HEAD@&#123;16&#125;: commit: 02.txt</span><br><span class="line">dfcfea8 HEAD@&#123;17&#125;: commit: 05</span><br><span class="line">dacd44e HEAD@&#123;18&#125;: commit: 04</span><br><span class="line">9cf50d9 HEAD@&#123;19&#125;: commit: 03</span><br><span class="line">2e18697 HEAD@&#123;20&#125;: commit: 02</span><br><span class="line">49805b0 HEAD@&#123;21&#125;: commit (initial): 添加01.txt文档</span><br></pre></td></tr></table></figure></p>
<p>当后悔撤销时，尤其是加了参数<code>--hard</code>时，可以通过此命令找回丢失的信息。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基础01]]></title>
      <url>/2015/07/03/git-basic01/</url>
      <content type="html"><![CDATA[<p>Git基础教程，只介绍Git的基础命令，因为篇幅问题，将其分为4篇博客。</p>
<h2 id="为什么是Git"><a href="#为什么是Git" class="headerlink" title="为什么是Git"></a>为什么是Git</h2><p>一句话：Git简单，上手快，支持本地无网络提交，多人协作方便。<br>缺点：要精通，需要一定的过程。推荐使用命令行模式，对于用惯了GUI的人，不习惯。<br>Git入门教程很多，最简单的教程是《<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简明指南</a>》，稍微详细点的是廖雪峰的《<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>》。<br>Git最全的教程是《<a href="http://git-scm.com/doc" target="_blank" rel="noopener">Pro Git</a>》(有<a href="http://git-scm.com/book/zh/v1" target="_blank" rel="noopener">中文版本</a>)。<br>2015.09.17更新：有个歪果仁给我发邮件让我添加他的教程，有兴趣的请自行查看。<a href="https://blog.udemy.com/git-tutorial-a-comprehensive-guide/" target="_blank" rel="noopener">Git Tutorial: A Comprehensive Guide</a><br>Git基础系列不准备详细的展开，因为跟上述教程的内容没有太大区别。只是把最常用的基础命令介绍出来。<br><a id="more"></a></p>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>在《<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简明指南</a>》上提供了三个系统的下载连接。我个人推荐在Windows上使用Cygwin的Git，或在Linux下使用Git。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gittest <span class="comment"># 创建文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> gittest/ <span class="comment">#切换到到文件夹</span></span><br><span class="line">$ git init <span class="comment"># 初始化仓库</span></span><br></pre></td></tr></table></figure>
<p>初始化空的 Git 版本库于/home/Jeremy/gittest/.git/<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init --bare <span class="comment"># 初始化裸仓库</span></span><br></pre></td></tr></table></figure></p>
<p>初始化空的 Git 版本库于 /home/Jeremy/gittest/</p>
<h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> /remote/url/of/repo.git <span class="built_in">local</span>-repo</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>加入<code>--global</code>参数将作为全局配置，否则，所有配置<strong>只针对本仓库</strong>有效。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name learnit <span class="comment">#设置用户名</span></span><br><span class="line">$ git config --global user.email higoge(at)gmail.com <span class="comment"># 设置用户邮箱</span></span><br></pre></td></tr></table></figure></p>
<p>以上两条指令若不执行，则无法commit。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.autocrlf <span class="literal">false</span> <span class="comment"># 取消git根据操作系统进行crlf的转换</span></span><br></pre></td></tr></table></figure></p>
<h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add 01.txt <span class="comment"># 将01.txt添加到暂存区</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"添加01.txt文档"</span> <span class="comment"># 将暂存区的内容提交到仓库，并添加日志</span></span><br><span class="line">[master（根提交） 49805b0] 添加01.txt文档</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 01.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m [msg] <span class="comment"># 提交所有已跟踪的文件的修改</span></span><br></pre></td></tr></table></figure>
<p>只要被add过的文件均为跟踪文件，新增的文件没有被跟踪，需要手动add。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit <span class="comment"># 如果不输入-m [msg]，则调出COMMIT_EDITMSG，编写详细的提交信息</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend <span class="comment"># 修改最后一次提交</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果是已经push的commit，最好不要amend，否者会产生分支。</p>
<h2 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h2><p><img src="https://raw.githubusercontent.com/higoge/image/master/git/b01.jpg" alt="图片来自廖雪峰的官方网站"><br>工作区就是我们工作的文件夹。暂存区叫stage或者index。<br><code>git add</code>就是把文件修改添加到暂存区。<br><code>git commit</code>就是把暂存区的所有内容提交到当前分支。</p>
<h2 id="Git基本工作流程"><a href="#Git基本工作流程" class="headerlink" title="Git基本工作流程"></a>Git基本工作流程</h2><p>一图胜前言，无耻的盗图了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/git/b04.jpg" alt="图片来自网络"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Basic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础04：移码和浮点数的二进制表示]]></title>
      <url>/2015/07/02/basic04/</url>
      <content type="html"><![CDATA[<p>本文介绍移码以及浮点数的二进制表示。其中浮点数的二进制表示比较难理解，需要一点点数学知识。</p>
<h2 id="标准移码"><a href="#标准移码" class="headerlink" title="标准移码"></a>标准移码</h2><p>在一般情况下，移码就是将补码的符号位取反。<br>-118D = -1110110B (真值)<br>-118D表示-118的十进制；-1110110B表示二进制。<br>原码: 11110110<br>反码: 10001001<br>补码: 10001010<br>移码: 00001010<br><a id="more"></a><br>符号位取反的移码，可以等同于偏移值为128的移码，称为标准移码。<br>即-118D+128D = 10001010B + 10000000B = 00001010B。<br>移码，可以理解为补码加上偏移值，即将整个取值范围右移一段距离，从移码中可以直接看出真值的大小。<br>-128[移]: 00000000<br>-127[移]: 00000001<br>-126[移]: 00000010<br>……<br>+126[移]: 11111110<br>+127[移]: 11111111<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic04/01.jpg" class="img-center"></p>
<h2 id="移码的定义"><a href="#移码的定义" class="headerlink" title="移码的定义"></a>移码的定义</h2><p>X[移] = 2^(n-1) + X, -2^(n-1) &lt;= X &lt;= 2^(n-1) -1<br>X为真值，X[移]表示真值X的移码。<br>举个栗子：<br>一个字节，n=8。X[移] = 128 + X, -128 &lt;=  X &lt;= 127</p>
<h2 id="浮点数二进制表示"><a href="#浮点数二进制表示" class="headerlink" title="浮点数二进制表示"></a>浮点数二进制表示</h2><p>浮点数的二进制表示，分为三个部分。<br>sign，符号位。0表示正，1表示负。<br>exponent，指数位。采用2^(n-1) - 1的移码。n表示指数位位数。<br>fraction，小数位。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic04/02.png" class="img-center"><br>浮点数的位数如表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:center">—-</th>
<th style="text-align:center">sign</th>
<th style="text-align:center">exponent</th>
<th style="text-align:center">移码</th>
<th style="text-align:center">fraction</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">32位</td>
<td style="text-align:center">1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2^(8 - 1) - 1 = 127</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">64位</td>
<td style="text-align:center">1</td>
<td style="text-align:center">11</td>
<td style="text-align:center">2^(11 - 1) - 1 = 1023</td>
<td style="text-align:center">52</td>
</tr>
</tbody>
</table>
<h2 id="在深入一点"><a href="#在深入一点" class="headerlink" title="在深入一点"></a>在深入一点</h2><p>浮点数的二进制表示用数学表示。<br>V= (−1)^S  ×M × 2^E<br>(-1)^S表示符号位，当S=0，V为正数；当S=1，V为负数。<br>M表示有效数字，大于等于1，小于2。<br>E表示浮点数的指数。</p>
<p>对于M，1&lt;=M&lt;2，M可以写成1.xxxxxx的形式，其中xxxxxx就是小数部分，由0，1组成。IEEE754规定，第一位总是1，可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。</p>
<p>指数E的特殊情况(32位浮点数为例)</p>
<table>
<thead>
<tr>
<th style="text-align:center">浮点数的指数E</th>
<th style="text-align:center">E的值</th>
<th style="text-align:center">M的值</th>
<th style="text-align:center">数值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-127</td>
<td style="text-align:center">0</td>
<td style="text-align:center">全0</td>
<td style="text-align:center">±0</td>
</tr>
<tr>
<td style="text-align:center">-127</td>
<td style="text-align:center">0</td>
<td style="text-align:center">M小数点前不加1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">0.xxxxxx的形式</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">128</td>
<td style="text-align:center">255</td>
<td style="text-align:center">全0</td>
<td style="text-align:center">±无穷</td>
</tr>
<tr>
<td style="text-align:center">128</td>
<td style="text-align:center">255</td>
<td style="text-align:center">非0</td>
<td style="text-align:center">NaN</td>
</tr>
</tbody>
</table>
<p><strong>注</strong>：</p>
<ul>
<li>浮点数的指数E移码(偏移127)后得到E的值。</li>
<li>E全为0。浮点数的指数E等于-127，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。目的是为例表示±0，以及接近于0的很小的数字。</li>
<li>E全为1。如果有效数字M全为0，表示±∞（正负取决于符号位s）；如果有效数字M不全为0，表示这个数不是一个数（NaN）。</li>
</ul>
<h2 id="举个两个栗子"><a href="#举个两个栗子" class="headerlink" title="举个两个栗子"></a>举个两个栗子</h2><p>9.0的表示方法：<br>为正数，所以sign=0。<br>9.0D = 1001.0B = 1.001*2^3B。 <strong>注意</strong>：小数点不是十进制的小数点，是二进制的小数点。 1.001D ≠ 1.001B。<br>所以exponent的原值是3，移值是3+127=130D=10000010B。<br>分数部分，去掉第一位的1，剩余001 在后面补充0，保证23位，即00100000000000000000000。<br>合并起来，结果为0 10000010 00100000000000000000000。</p>
<p>0.625的表示方法：<br>为正数，sign=0。<br>0.625D = 0.101B。其中0.1B = 0.5D = (1/2)^1；0.01B = 0.25D = (1/2)^2；0.001B = 0.125D = (1/2)^3。<br>0.625D = 0.101B = 1.01 * 2^(-1)。<br>所以exponent的原值为-1，采用移植是-1+127=126D=01111110B<br>分数部分，去掉第一位的1，剩余01，在后面补充0，保证23位 01000000000000000000000<br>合并起来，结果为0 01111110  01000000000000000000000</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>移码即补码右移一个偏移量。</li>
<li>浮点数的二进制表示，还是很头晕的。看不懂，多看几遍。如果还是看不懂，那就看不懂吧。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础03：原码、反码、补码]]></title>
      <url>/2015/07/02/basic03/</url>
      <content type="html"><![CDATA[<p>本文介绍原码、反码、补码，以及为什么要使用补码。需要了解数学的取模运算。</p>
<h2 id="机器数与真值"><a href="#机器数与真值" class="headerlink" title="机器数与真值"></a>机器数与真值</h2><p>机器数，即数字在计算机中的二进制表示形式。<br>真值，第一位用+-表示数字的正负，其余为二进制数。<br>举个栗子：-3的机器数是10000011，真值是-0000011。<br><a id="more"></a></p>
<h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码，符号位加真值的绝对值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+3[原] = 00000011</span><br><span class="line">-3[原] = 10000011</span><br></pre></td></tr></table></figure></p>
<p>8位二进制数原码的取值范围是[11111111, 01111111]，即[-127, 127]</p>
<h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>正数的反码是其原码。<br>负数的反码，符号位不变，其余各位取反，即1变成0，0变成1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+3[反] = 00000011[原] = 00000011[反]</span><br><span class="line">-3[反] = 10000011[原] = 11111100[反]</span><br></pre></td></tr></table></figure></p>
<p>8位二进制数反码的取值范围是[11111111, 01111111]，即[-127, 127]</p>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>正数的的补码是其原码。<br>负数的补码，是其反码+1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+3[补] = 00000011[原] = 00000011[反] = 00000011[补]</span><br><span class="line">-3[反] = 10000011[原] = 11111100[反] = 11111101[补]</span><br></pre></td></tr></table></figure></p>
<p>反码和补码均不能直接看出其实际的数值，需要转换成原码后再计算。</p>
<h2 id="为何要使用补码"><a href="#为何要使用补码" class="headerlink" title="为何要使用补码"></a>为何要使用补码</h2><p>原码比较直观，它的数值部分就是该数的绝对值，而且与真值、十进制数的转换十分方便。但是它的加减法运算较复杂。当两数相加时，机器要首先判断两数的符号是否相同，如果相同则两数相加，若符号不同，则两数相减。在做减法前，还要判断两数绝对值的大小，然后用大数减去小数，最后再确定差的符号。换言之，用这样一种直接的形式进行加运算时，负数的符号位不能与其数值部分一同参加运算，而必须利用单独的线路确定和的符号位。要实现这些操作，电路就很复杂。<br>为了减少设备，解决机器内负数的符号位参加运算的问题，总是将减法运算变成加法运算，引进了反码机器数，可以让符号位直接参与计算，把它统一看做无符号数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3 + 2 = 11111100[反] + 00000010[反] = 11111110[反] =10000001[原] = -1</span><br></pre></td></tr></table></figure></p>
<p>看似挺好，但也会出问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 - 2 = 3 + (-2) = 00000011[反] + 11111101[反] = 00000000[反] = 00000000[原] = 0</span><br></pre></td></tr></table></figure></p>
<p>显然是不对的。<br>反码可以让符号位直接参与运算，但计算结果有错误。<br>并且，11111111[反] = 10000000[原] = -0 00000000[反]=00000000[原] = +0<br>自然数中， -0 = +0 = 0，但是0却又两个表示。<br>所以，反码充满了错误。</p>
<p>为了解决反码的错误，引入了补码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-3 + 2 = 11111101[补] + 00000010[补] = 11111111[补] = 11111110[反] = 10000001[原] = -1</span><br><span class="line">3 + (-2) = 00000011[补] + 11111110[补] = 00000001[补] = 00000001[原] = 1</span><br><span class="line">1 + (-1) = 00000001[补] + 111111111[补] = 00000000[补] = 00000000[原] = 0</span><br></pre></td></tr></table></figure></p>
<p>即，0 可以用00000000[补]表示，-0不存在。用10000000[补]表示-128。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(-1) + (-127) = 11111111[补] + 10000001[补] = 10000000[补] = -128</span><br></pre></td></tr></table></figure></p>
<p><strong>注：</strong>-1 + -127的结果是-128，所以用补码最后计算的结果10000000[补]来表示-128，但-128并不存在反码和原码。若按照反码和原码计算，10000000[补] = 01111111[反] = 00000000[原] = 0显然是不正确的。<br>使用了补码，可以再[-127, 127]的范围内，在表示-128，即可以表示的范围是[-128, 127]。<br>所以，n位二进制数，可表示的整数范围是[-2^n-1, (2^n-1) - 1]。上述的栗子n=8，即一个字节。</p>
<h2 id="取模-mod"><a href="#取模-mod" class="headerlink" title="取模(mod)"></a>取模(mod)</h2><p>正数取模，易于理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 mod 3 = 2</span><br></pre></td></tr></table></figure></p>
<p>负数取模，要理解取模运算的数学定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x mod y = x - y * floor(x/y)</span><br></pre></td></tr></table></figure></p>
<p>其中floor(x)称为向下取整函数，表示不超过x的最大整数。<br>举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-5 mod 3 = -5 - 3 * floor(-5 / 3) = -5 - 3 * floor(-1.6666...)= -5 - 3 * (-2) = 1</span><br></pre></td></tr></table></figure></p>
<p>所以-5 mod 3 = 1</p>
<h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><p>若x mod z = y mod z，那么称x， y关于z同余，记为 x ≡ y (mod z)。<br>同余有很多定理，与本文没有关系，有兴趣的童鞋自己去证明或查资料。</p>
<h2 id="补码的数学原理"><a href="#补码的数学原理" class="headerlink" title="补码的数学原理"></a>补码的数学原理</h2><p>先说结论：补码对应的无符号整数与真值是关于256(=2^8)同余。<br>正数和0的补码对应的无符号整数等于其真值，所以也同余。<br>关于负数，举个栗子。<br>-3 = 11111101[补] 而11111101作为无符号二进制的值是253。<br>-3 mod 256 = -3 - 256 * floor(-3/256) = -3 - 256 * (-1) = 253<br>253 mod 256 = 253<br>所以 -3 ≡ 253 (mod 256)。<br>进一步的结论，在8位机中，计算机的循环计数周期为256，符号位参与运算，即将其当做无符号数进行运算后的结果，实际是把真值对256取模。在原码、反码、补码中，只有补码对应的无符号数与真值是关于256同余的，所以用补码的形式表示数字是符合数学原理的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>原码即数值的二进制本身，最高位表示符号位，0为正数，1为负数。</li>
<li>正数的反码为其原码，负数的反码，除符号位外，其余各个位取反。</li>
<li>正数的补码为其原码，负数的原码，为反码+1。</li>
<li>补码的取值范围是[-2^n-1, (2^n-1) - 1]，可以表示最多的整数，而且符号位参与运算不会出错。</li>
<li>补码的数学解释是补码的无符号二进制数与补码的真值关于2^n同余。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机12：其他功能]]></title>
      <url>/2015/07/01/vm12/</url>
      <content type="html"><![CDATA[<h2 id="vmx文件"><a href="#vmx文件" class="headerlink" title="vmx文件"></a>vmx文件</h2><p>每个虚拟机都有vmx文件，保存了虚拟机的配置信息。<br>使用文本编辑器打开虚拟机保存目录的Win7.vmx，就可以看到相关信息。虚拟机设置就是读取的这个文件。可以直接更改此vmx文件，等于对虚拟机进行了设置。<br><strong>注意</strong>：对于不知道的参数，不要轻易修改。<a id="more"></a><br>几个常用的设置：</p>
<blockquote>
<p>ethernet0.generatedAddress = “00:0c:29:b3:8e:d7” – MAC地址<br>memsize = “1024” – 内存大小<br>cpuid.coresPerSocket = “2” – CPU内核<br>numvcpus = “2” – CPU总数<br>ethernet0.connectionType = “nat” – NAT模式连接</p>
</blockquote>
<h2 id="适应客户机与适应窗口"><a href="#适应客户机与适应窗口" class="headerlink" title="适应客户机与适应窗口"></a>适应客户机与适应窗口</h2><p>安装了VMware Tools的虚拟机，可以根据VMware Workstation软件的窗口进行调整本身的分辨率。<br>没有安装VMware Tools的虚拟机，则可以通过适应窗口，调整VMware Workstation的窗口，以适应虚拟机的分辨率。<br>这些都是菜单的“查看”进行的。主要目的是为了保证VMware Workstation没有滚动条。</p>
<h2 id="如何让虚拟机不占用太多物理机的资源"><a href="#如何让虚拟机不占用太多物理机的资源" class="headerlink" title="如何让虚拟机不占用太多物理机的资源"></a>如何让虚拟机不占用太多物理机的资源</h2><p>物理机的系统瓶颈，也就是机器感觉太卡，主流的PC，最主要的问题是在硬盘读写速度太慢(SSD除外)，CPU和内存反而不是问题。<br><strong>建议如下</strong>：</p>
<ul>
<li>新建虚拟机时，合理分配内存。Linux建议增加SWAP分区。</li>
<li>虚拟机文件建议放置到移动硬盘或网络硬盘上。这样就不会增加物理机硬盘的读写几率，减少等待时间。</li>
</ul>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机11：共享文件夹]]></title>
      <url>/2015/07/01/vm11/</url>
      <content type="html"><![CDATA[<p>本文介绍虚拟机与物理机文件共享的一种方法：<strong>共享文件夹</strong>。<br>开启Win7的虚拟机设置，打开“选项”标签“，点击“共享文件夹”。<a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/01.jpg" class="img-center"><br>右侧点击“总是启用”。点击“添加”按钮。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/02.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/03.jpg" class="img-center"><br>点击“浏览”，选择物理机的文件夹。“名称”则是虚拟机中看到的共享文件夹的名称。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/04.jpg" class="img-center"><br>点击“启用此共享”，是否“只读”，看需求。点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/05.jpg" class="img-center"><br>Win7中计算机下面“网络”，点击“vmware-host”-&gt;“Shared Folders”，就可以看到刚才共享的文件夹了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm11/06.jpg" class="img-center"><br><strong>注意</strong>：要连接“网络”，需要物理机启动相关的服务和网卡。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机10：使用U盘及U盘启动]]></title>
      <url>/2015/06/30/vm10/</url>
      <content type="html"><![CDATA[<p>本文介绍虚拟机U盘相关的操作。</p>
<h2 id="虚拟机使用物理机的U盘设备"><a href="#虚拟机使用物理机的U盘设备" class="headerlink" title="虚拟机使用物理机的U盘设备"></a>虚拟机使用物理机的U盘设备</h2><p>开启VMware USB Arbitration Service服务。<a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/01.jpg" class="img-center"><br>物理机接入U盘，启动虚拟机，点击菜单“虚拟机”-&gt;“可移动设备”-&gt;选取U盘设备-&gt;“连接”。<strong>请注意操作前后顺序</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/02.jpg" class="img-center"><br>有个提示，whatever，“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/03.jpg" class="img-center"><br>查看“计算机”，里面多了“系统工具”和“备份”两个分区，这是我的移动硬盘的分区。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/04.jpg" class="img-center"><br><strong>注</strong>：如果U盘是USB3.0接口，需要到虚拟机设置中将USB的兼容性改为USB3.0。</p>
<h2 id="虚拟机使用U盘启动"><a href="#虚拟机使用U盘启动" class="headerlink" title="虚拟机使用U盘启动"></a>虚拟机使用U盘启动</h2><p>如果使用上述方式，重启虚拟机，并进入到BIOS，并不能看到U盘设备，所以直接无法U盘启动。通过采用添加磁盘的方式进行解决。<br>打开“虚拟机设置”，点击“添加”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/05.jpg" class="img-center"><br>选择“硬盘”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/06.jpg" class="img-center"><br>默认“SCSI”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/07.jpg" class="img-center"><br>选择“使用物理磁盘”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/08.jpg" class="img-center"><br>设备选择“PhysicalDrive1”，注意PhysicalDrive0是物理机的磁盘，此处根据个人情况选择。并选择“使用整个磁盘”。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/09.jpg" class="img-center"><br>输入磁盘文件名，点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/10.jpg" class="img-center"><br>点击菜单“虚拟机”-&gt;“电源”-&gt;“启动时进入BIOS”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/11.jpg" class="img-center"><br>一个提示，whatever，“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/12.jpg" class="img-center"><br>进入BIOS后，到“Boot”标签，然后展开“Hard Drive”，选择“VMware Virtual SCSI Hard Drive (0:2)”，然后按+号。移动到(0:0)之上。<strong>注意</strong>：0:0是虚拟机硬盘，0:1是添加的永久磁盘，0:2是刚刚添加的对应U盘的磁盘。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/13.jpg" class="img-center"><br>按F10，确定，保存退出。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/14.jpg" class="img-center"><br>启动后，进入了移动硬盘的Win7 PE系统。可以用DiskGenus进行磁盘分区等操作。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/15.jpg" class="img-center"><br>使用完成后，删除磁盘。选择“硬盘3”，点击“移除”，点击“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm10/16.jpg" class="img-center"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>物理机的U盘可以手动添加到虚拟机中。</li>
<li>虚拟机添加了U盘并不能在启动时进入，必须通过添加硬盘映射U盘的方式进入。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机09：添加永久磁盘]]></title>
      <url>/2015/06/30/vm09/</url>
      <content type="html"><![CDATA[<p>前期的文章介绍了快照，本文介绍与快照对应的永久磁盘。永久磁盘是不受快照的影响，只要进行了操作，就会<strong>永久更改</strong>。</p>
<h2 id="建立快照"><a href="#建立快照" class="headerlink" title="建立快照"></a>建立快照</h2><p>首先先建立一个快照，保存之前的更改。<a id="more"></a><br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/01.jpg" class="img-center"></p>
<h2 id="添加并格式化永久磁盘"><a href="#添加并格式化永久磁盘" class="headerlink" title="添加并格式化永久磁盘"></a>添加并格式化永久磁盘</h2><p>打开“虚拟机”-&gt;“设置”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/02.jpg" class="img-center"><br>点击“添加”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/03.jpg" class="img-center"><br>选择“硬盘”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/04.jpg" class="img-center"><br>类型默认，模式选择“独立”-&gt;“永久”。请留意下“永久”和“非永久”下面的注释。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/05.jpg" class="img-center"><br>选择“创建新虚拟磁盘”。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/06.jpg" class="img-center"><br>输入磁盘大小，选择“存储为单个文件”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/07.jpg" class="img-center"><br>输入文件名。点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/08.jpg" class="img-center"><br>Win7开机后，右键“计算机”，点击“管理”-&gt;“存储”-&gt;“磁盘管理”。此时会提示初始化磁盘。点击“确定”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/09.jpg" class="img-center"><br>在磁盘1上点击右键-&gt;“新建简单卷”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/10.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/11.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/12.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/13.jpg" class="img-center"><br>格式化为NTFS，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/14.jpg" class="img-center"><br>点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/15.jpg" class="img-center"></p>
<h2 id="验证永久磁盘"><a href="#验证永久磁盘" class="headerlink" title="验证永久磁盘"></a>验证永久磁盘</h2><p>在F盘新建文本文档02.txt，添加一行文字。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/16.jpg" class="img-center"><br>拍摄一个快照。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/17.jpg" class="img-center"><br>再对刚才的文档添加一行。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/18.jpg" class="img-center"><br>再次建立快照。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/19.jpg" class="img-center"><br>打开快照管理器，可以看到快照的建立关系。恢复到快照“添加永久磁盘后”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/20.jpg" class="img-center"><br>查看F盘下的文档，发现里面确实是两行文字，说明永久磁盘已经起作用了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/21.jpg" class="img-center"></p>
<h2 id="进一步验证"><a href="#进一步验证" class="headerlink" title="进一步验证"></a>进一步验证</h2><p>恢复到快照“永久磁盘之前”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/22.jpg" class="img-center"><br>打开发现没有永久磁盘F。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm09/23.jpg" class="img-center"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>添加了永久磁盘之后，再拍摄快照，永久磁盘才会起作用。之前的快照，永久磁盘是不起作用的。</li>
<li>快照是对所有硬盘的快照，而不是对单个分区或单个硬盘的快照。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机08：通过网卡共享上网]]></title>
      <url>/2015/06/29/vm08/</url>
      <content type="html"><![CDATA[<p>本文介绍通过网卡共享的方式，让仅主机模式的虚拟机实现联网。网卡共享的应用其实很多，比如小米WiFi，其实就是建立一个无线WiFi热点，然后将能上网的网卡共享到这个WiFi热点，其他设备连接到此热点，就可以通过能上网的网卡实现上网。<br><a id="more"></a></p>
<p>更改虚拟机的网卡连接为仅主机模式。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/01.jpg" class="img-center"><br>打开物理机的网络设置。快捷键命令是<code>win+r</code>-&gt;<code>ncpa.cpl</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/02.jpg" class="img-center"><br>启用VMware Network Adapter VMnet1网卡。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/03.jpg" class="img-center"><br>在<strong>能上网的网卡</strong>上点击“右键”-&gt;“属性”，点击“共享”标签。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/04.jpg" class="img-center"><br>勾选所有的选项，家庭网络连接选择“VMware Network Adapter VMnet1”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/05.jpg" class="img-center"><br>会有个提示，点击“是”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/06.jpg" class="img-center"><br>修改VMware Network Adapter VMnet1的IP地址为<code>192.168.10.2</code>，<code>255.255.255.0</code>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/07.jpg" class="img-center"><br>点击“高级”按钮，删除无关IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/08.jpg" class="img-center"><br>修改安装的虚拟机网卡地址为<code>192.168.10.9</code>，<code>255.255.255.0</code>，网关是VMware Network Adapter VMnet1网卡的IP地址<code>192.168.10.2</code>，DNS地址是物理机的DNS地址(如果不知道DNS地址，请右键点击物理机网卡，“状态”-&gt;“详细信息”，里面会有DNS地址)。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/09.jpg" class="img-center"><br>做一些检测，首先ping一下网关看是否能通，再ping一下dns看是否能通。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/10.jpg" class="img-center"><br>如果都通过，那就可以直接上网了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm08/11.jpg" class="img-center"></p>
<p><strong>注意</strong>：</p>
<ol>
<li>其实不仅是仅主机模式，NAT模式也可以通过网卡共享的方式上网。</li>
<li>Windows快速启动网络连接的命令是<code>ncpa.cpl</code>，就不用点击控制面板等诸多操作，键盘流必备命令。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机07：常用快捷键]]></title>
      <url>/2015/06/29/vm07/</url>
      <content type="html"><![CDATA[<p>本文介绍虚拟机的常用快捷键，键盘流必存。</p>
<p><strong>注意</strong>：请一定要使VMware Workstation的窗体为活动状态，并且鼠标焦点离开了虚拟机时使用快捷键。<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + N</td>
<td>新建虚拟机</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>打开虚拟机</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>关闭选项卡</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td>连接服务器</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>首选项</td>
</tr>
<tr>
<td><strong>Ctrl + Alt + Enter</strong></td>
<td><strong>切换全屏</strong></td>
</tr>
<tr>
<td>F8</td>
<td>缩略图栏</td>
</tr>
<tr>
<td><strong>F9</strong></td>
<td><strong>库</strong></td>
</tr>
<tr>
<td><strong>Ctrl + B</strong></td>
<td><strong>启动虚拟机</strong></td>
</tr>
<tr>
<td><strong>Ctrl + E</strong></td>
<td><strong>关闭虚拟机</strong></td>
</tr>
<tr>
<td><strong>Ctrl + J</strong></td>
<td><strong>挂起虚拟机</strong></td>
</tr>
<tr>
<td><strong>Ctrl + R</strong></td>
<td><strong>重新启动</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + P</td>
<td>暂停</td>
</tr>
<tr>
<td>Ctrl + Alt + PrtScn</td>
<td>抓屏</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>设置虚拟机</td>
</tr>
<tr>
<td><strong>Ctrl + M</strong></td>
<td><strong>快照管理器</strong></td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>下一个选项卡</td>
</tr>
<tr>
<td>Ctrl + Shift + Tab</td>
<td>上一个选项卡</td>
</tr>
<tr>
<td><strong>Ctrl + Alt</strong></td>
<td><strong>鼠标焦点离开虚拟机</strong></td>
</tr>
<tr>
<td><strong>Ctrl + G</strong></td>
<td><strong>鼠标焦点进入虚拟机</strong></td>
</tr>
</tbody>
</table>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Keyboard Flow </tag>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机06：快照与克隆]]></title>
      <url>/2015/06/26/vm06/</url>
      <content type="html"><![CDATA[<p>本文介绍虚拟机的快照和克隆操作。</p>
<h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>对虚拟机创建快照，就是对虚拟磁盘在某个时间点制作复本。功能类似于后悔药。<a id="more"></a><br>之前的文章已经安装了Windows 7系统，并安装了VMware Tools。来创建一个快照保存执行的操作。点击“虚拟机”-&gt;“快照”-&gt;“拍摄快照”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/01.jpg" class="img-center"><br>输入快照的名称和描述。尽量能从名称中看到相关的信息。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/02.jpg" class="img-center"><br>点击“创建快照”。状态栏会看到保存进度。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/03.jpg" class="img-center"><br>对虚拟机进行一些的操作：我们尚未对D盘进行格式化，先格式化D盘，再创建一个new.txt，内容随便写点。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/04.jpg" class="img-center"><br>在创建一个快照保存刚才的操作。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/05.jpg" class="img-center"><br>打开快照管理器。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/06.jpg" class="img-center"><br>里面有我们刚刚保存了两个快照。双击第一个快照“初始化”，提示窗口点击“恢复”，就恢复到“初始化”时状态。即D盘还没有格式化，也没有new.txt。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/07.jpg" class="img-center"><br>我们再进行另一些操作，格式化D盘，复制一个文档到D盘。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/08.jpg" class="img-center"><br>再创建一个快照。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/09.jpg" class="img-center"><br>打开快照管理，看到快照如图所示。我们有两个快照，都是基于第一个快照“初始化”。这很像版本管理中的分支管理。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/10.jpg" class="img-center"></p>
<p><strong>注</strong>：</p>
<ol>
<li>快照是VMware Workstation的特色工具，免费版本VMPlayer就没有快照功能。<strong>经常创建快照是一个好的习惯</strong>。</li>
<li>虚拟机在开机状态创建快照非常的慢，在关机状态或者挂起状态创建快照很快，恢复快照也是如此。所以，当虚拟机中文档较多时，<strong>请先关机或挂起后再做快照</strong>。请注意快照管理器中的图标，绿色箭头图标表示开机时创建的快照，停止图标表示挂起状态创建的快照，没有图标的快照为关机时创建的快照。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/11.jpg" class="img-center"></li>
<li>快照可以删除，但如果删除中间某个节点时，需要做快照的合并，速度有可能会比较慢。删除快照的操作不可逆。所以尽量不删除快照，或者从最后一个快照开始删除。举个栗子，删除上图的“复制文档”的快照，就比较慢。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/12.jpg" class="img-center"></li>
</ol>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆，就是对虚拟机<code>Ctrl+C</code>，在<code>Ctrl+V</code>，粘贴出第二台虚拟机。(如果IPHONE6可以克隆该多好，每个读者克隆一个…)<br>对Win7虚拟机创建克隆，点击“虚拟机”-&gt;“管理”-&gt;“克隆”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/13.jpg" class="img-center"><br>调出克隆向导，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/14.jpg" class="img-center"><br>可以选择“基于当前状态”还是基于某个“快照”进行克隆，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/15.jpg" class="img-center"><br>“创建完整克隆”与“创建链接克隆”就是<strong>“粘贴”</strong>和<strong>“粘贴快捷方式”</strong>的区别。“链接克隆”基于原有的虚拟机的文件，创建类似快捷连接，其占用空间较小，当原有虚拟机被删除后，此链接虚拟机失效。“完整克隆”就是完全的复制。在同一台物理机上进行操作，建议选择“链接克隆”，如果要将虚拟机复制到其他物理机，选择“完整克隆”。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/16.jpg" class="img-center"><br>输入克隆后的虚拟机名称，点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/17.jpg" class="img-center"><br>完成后，点击“关闭”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/18.jpg" class="img-center"><br>开启克隆后的虚拟机，首先要做的是修改IP地址，否则跟原虚拟机IP冲突。本栗子修改为192.168.80.10。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/19.jpg" class="img-center"><br>修改后，就可以上网了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/20.jpg" class="img-center"></p>
<p><strong>注</strong>：</p>
<ol>
<li>快照和克隆的区别<br>快照是对虚拟机的某个点创建复本，都是对这台虚拟机的操作。克隆是将此虚拟机复制成另一台虚拟机，是两台完全不同的电脑。</li>
<li>克隆后记得根据网络情况修改IP地址，否则有可能会出现IP冲突。</li>
<li>看一下刚才Win7和Win7-2两台虚拟机的网卡MAC地址，是不一样的，说明这是两台完全不同的电脑。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/21.jpg" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/vm06/22.jpg" class="img-center"></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>快照是虚拟机的某个点创建复本，要养成经常创建快照的习惯。</li>
<li>克隆就是复制虚拟机，方便得到相同硬件环境的多台虚拟机。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机05：Win7中安装VMware-Tools]]></title>
      <url>/2015/06/26/vm05/</url>
      <content type="html"><![CDATA[<p>VMware公司强烈建议在虚拟机安装完操作系统后，立即安装VMware Tools。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>同步虚拟机和物理机的时间。</li>
<li>自动捕获或释放鼠标。</li>
<li>虚拟机和物理机直接共享剪贴板。</li>
<li>虚拟机和物理机直接文件直接拖拽复制。</li>
<li>更新显卡驱动，让系统运行的更流畅。</li>
<li>改善网络。</li>
</ul>
<a id="more"></a>
<h2 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h2><p>菜单栏点击“虚拟机”-&gt; “安装VMware Tools”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/01.jpg" class="img-center"><br>点击“运行setup64.exe”，或者到光驱中点击。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/02.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/03.jpg" class="img-center"><br>点击“自定义安装”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/04.jpg" class="img-center"><br>看一下要安装的内容，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/05.jpg" class="img-center"><br>点击“安装”，走你。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/06.jpg" class="img-center"><br>点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/07.jpg" class="img-center"><br>点击“是”，重启。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm05/08.jpg" class="img-center"><br>重启完成后，试试虚拟机物理机之间的拖拽，复制粘贴等，确实方便。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机04：新建虚拟机-Win7]]></title>
      <url>/2015/06/25/vm04/</url>
      <content type="html"><![CDATA[<p>本文以Win7为例，展示虚拟机的建立过程。</p>
<h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>开启VMware Workstation10，点击菜单栏“文件”-&gt;“新建虚拟机”，开启向导。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/01.jpg" class="img-center"><br><a id="more"></a><br>选择“自定义(高级)”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/02.jpg" class="img-center"><br>“硬件兼容性”默认即可，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/03.jpg" class="img-center"><br><strong>选择“稍后安装操作系统”</strong>。点击“下一步”。<br><strong>注意</strong>：如果现在选择通过光盘安装或者iso安装，VMware Workstation会启动相关脚本，自动化安装，我们就无法进行相关的配置，如硬盘分区和用户登录信息。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/04.jpg" class="img-center"><br>选择操作系统，这里选择“Windows 7 x64”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/05.jpg" class="img-center"><br>输入“虚拟机名称”及“位置”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/06.jpg" class="img-center"><br>配置CPU数量，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/07.jpg" class="img-center"><br>配置内存，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/08.jpg" class="img-center"><br>选择网络类型，可选三种模式，此处用NAT举例。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/09.jpg" class="img-center"><br>选择SCSI控制器，默认即可。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/10.jpg" class="img-center"><br>选择虚拟磁盘的类型，默认即可。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/11.jpg" class="img-center"><br>选择磁盘，默认即可。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/12.jpg" class="img-center"><br>选择磁盘大小，Win7默认60GB。选择将虚拟磁盘存储为单个文件还是多个文件。<br><strong>注意</strong>：</p>
<ol>
<li>选项“立即分配所有磁盘空间”，表示虚拟机建立后，就将划分物理机60GB的磁盘空间。如果不选，则虚拟机需要多少硬盘空间就使用物理机的多少硬盘空间，最高60GB，<strong>推荐不勾选</strong>。</li>
<li>存储为单个文件还是多个文件，虚拟机文件所在的盘(比如前面的E盘)，如果采用FAT32文件系统，那么选择“拆分成多个文件”，如果采用NTFS文件系统，那么选择“存储为单个文件”。FAT32文件系统最大支持4GB的单个文件，所以如果选择存储为单个文件，随着硬盘内容的增多，虚拟机磁盘文件必定会超过4GB而导致出错。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/13.jpg" class="img-center"><br>填写上述的磁盘文件的名称，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/14.jpg" class="img-center"><br>最后一步显示虚拟机的软硬件配置信息，可以点击“自定义硬件”修改，或点击“完成”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/15.jpg" class="img-center"><br>在工作区，出现一个标签，点击“编辑虚拟机设置”，也可以对硬件进行重新设置。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/16.jpg" class="img-center"><br>修改“CD/DVD”，“使用ISO映像文件”进行安装。同时可以“移除”诸如“打印机”、“USB控制器”等无用的硬件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/17.jpg" class="img-center"><br>点击“开启此虚拟机”，开机，走你！<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/18.jpg" class="img-center"></li>
</ol>
<h2 id="安装Win7操作系统"><a href="#安装Win7操作系统" class="headerlink" title="安装Win7操作系统"></a>安装Win7操作系统</h2><p>如果会装Win7，本章请略过。<br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/19.jpg" class="img-center"><br>点击“现在安装”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/20.jpg" class="img-center"><br>勾选“许可条款”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/21.jpg" class="img-center"><br>点击“自定义”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/22.jpg" class="img-center"><br>点击“驱动器选项”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/23.jpg" class="img-center"><br>点击“新建”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/24.jpg" class="img-center"><br>输入硬盘大小。正规Win7系统分区，建议在50GB以上，虚拟机从简，40GB为栗子。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/25.jpg" class="img-center"><br>剩余空间，再“新建”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/26.jpg" class="img-center"><br>完成后是这样，选择“40GB”的那个分区，点击“下一步”。<br><strong>注</strong>：实际安装操作系统时，最好提前用诸如“DiskGenius”的工具，提前对硬盘进行分区。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/27.jpg" class="img-center"><br>开始安装了，去喝茶吧。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/28.jpg" class="img-center"><br>中间有个重启。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/29.jpg" class="img-center"><br>服务的启动。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/30.jpg" class="img-center"><br>再重启，直接点击VMware Workstation的相关按钮。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/31.jpg" class="img-center"><br>配置用户名，此处为learnit。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/32.jpg" class="img-center"><br>配置密码和提示，都是learnit。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/33.jpg" class="img-center"><br>“产品密钥”，点击“跳过”，你懂得。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/34.jpg" class="img-center"><br>点击“以后询问”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/35.jpg" class="img-center"><br>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/36.jpg" class="img-center"><br>安装完成。</p>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>根据上一篇文章的规划，本机的IP地址设置为192.168.80.x。<br>网络连接默认是采用DHCP获取IP地址，我这获取到的是192.168.80.20，也就是DHCP地址池的第一个IP地址。<br>在“本地连接”右键，点击“状态”-&gt;“详细信息”，就能看到网络连接的信息。<br>注：如果IP地址是169.x.x.x，那么，VMnetDHCP服务没有开启，虚拟机未找到DHCP服务，自己配置了169段的IP。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/37.jpg" class="img-center"><br>在“本地连接”右键，点击“属性”。双击“TCP/IPv4”，手动配置IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/38.jpg" class="img-center"><br>检测IP地址是否配置正确。<br>首先ping网关，即192.168.80.1；再ping物理机的IP地址，我的地址是192.168.1.98。如果均能ping通，那么应该就可以上网了。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/39.jpg" class="img-center"><br>打开我的GitHub的wiki。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm04/40.jpg" class="img-center"></p>
<h2 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h2><p>如果点到虚拟机的鼠标不能释放到物理机上，请按快捷键<code>Ctrl+Alt</code>。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机03：网络设置]]></title>
      <url>/2015/06/25/vm03/</url>
      <content type="html"><![CDATA[<p>虚拟机有三种网络模式，(a)桥接模式，(b)仅主机模式，(c)NAT模式。本文介绍如何设置这三种模式。</p>
<h2 id="开启虚拟网络编辑器"><a href="#开启虚拟网络编辑器" class="headerlink" title="开启虚拟网络编辑器"></a>开启虚拟网络编辑器</h2><p>打开VMware Workstation，点击“编辑”-&gt;“虚拟网络编辑器”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/01.jpg" class="img-center"><br><a id="more"></a></p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>点击VMnet0，VMnet信息中“桥接模式”-&gt;“桥接到”，点击下拉框，选择要桥接的网卡。<br><strong>注意</strong>：如果选择“自动”，可能会出问题，因为“自动”模式并不知道桥接到哪块网卡，而这块网卡也并不知道是否能连接到网络。所以，<strong>最好手动指定网卡</strong>。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/02.jpg" class="img-center"></p>
<h2 id="仅主机模式"><a href="#仅主机模式" class="headerlink" title="仅主机模式"></a>仅主机模式</h2><p>点击VMnet1，VMnet信息中，选择“仅主机模式”，勾选“将主机虚拟适配器连接到此网络“，即让物理机的VMware Network Adapter VMnet1网卡连接到此网络。<br>子网的IP选择一个网段。<br>子网可填写192.168.10.0，子网掩码填写255.255.255.0。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/03.jpg" class="img-center"><br>启用VMware Network Adapter VMnet1网卡，并设置IP地址为192.168.10.X，子网掩码为255.255.255.0 。（X可以使从1到254）<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/04.jpg" class="img-center"></p>
<h2 id="NAT模式设置"><a href="#NAT模式设置" class="headerlink" title="NAT模式设置"></a>NAT模式设置</h2><p>点击VMnet8，VMnet信息中，选择“NAT模式”，勾选“将主机虚拟适配器连接到此网络”，即让物理机的VMware Network Adapter VMnet8网卡连接到此网络。<br>子网的IP选择一个网段。<br>子网IP可填写192.168.80.0，子网掩码填写255.255.255.0。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/05.jpg" class="img-center"><br>点击NAT设置，将网关改成192.168.80.1。<br><strong>注意</strong>，请先在上一步设置好子网IP后，再修改网关IP。<br>要改成192.168.80.1的目的是，网关最好是一个网络的第一个或最后一个可用IP，即192.168.80.1或192.168.80.254。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/06.jpg" class="img-center"><br>启用VMware Network Adapter VMnet8网卡，并设置IP地址为192.168.80.X，子网掩码为255.255.255.0 。（X可以使从2到254）<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/07.jpg" class="img-center"><br>手动启动NAT服务。使用快捷键<code>win+r</code>，开启运行输入框，输入<code>services.msc</code>，开启系统“服务”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/08.jpg" class="img-center"><br>向下浏览到VMware的5个服务，在VMware NAT Service点击右键，点击“启动”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/09.jpg" class="img-center"></p>
<h2 id="NAT模式的端口映射"><a href="#NAT模式的端口映射" class="headerlink" title="NAT模式的端口映射"></a>NAT模式的端口映射</h2><p>本章请根据具体服务进行配置，如没有相关需求，可以不用配置。<br>因为NAT模式，其他物理机无法直接访问虚拟机。可以通过端口映射，将虚拟机的指定端口映射到物理机的端口，访问物理机的IP地址加端口，就相当于访问虚拟机的指定端口。<br>举个栗子：假如虚拟机的IP地址是192.168.80.3，开通了一个Web服务，默认是80端口，映射到物理机的端口为8080。<br>在NAT设置中，点击“端口转发”下的“添加”按钮。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/10.jpg" class="img-center"><br>“主机端口”，即物理机的端口为“8080”，类型为TCP，“虚拟机IP地址”填写“192.168.80.3”，“虚拟机端口”填写“80”，“描述”就是备注，写“Web”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/11.jpg" class="img-center"><br>可使用telnet测试端口是本机端口配置成功。<code>win+r</code>调出运行窗口，输入<code>cmd</code>，调出“命令提示符”。<br>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 127.0.0.1 8080</span><br></pre></td></tr></table></figure></p>
<p>不成功会提示“连接失败”。(2017.01.15更新：最新版本，不管配置是否成功，只要物理机端口配置好，即可访问。)<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/12.jpg" class="img-center"><br>成功则会黑屏。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/13.jpg" class="img-center"><br><strong>注</strong>：Win7默认没有安装telnet，安装方法：控制面板-&gt;程序-&gt;打开或关闭Windows功能-&gt;勾选“Telnet客户端”，确定即可。</p>
<h2 id="DHCP模式设置"><a href="#DHCP模式设置" class="headerlink" title="DHCP模式设置"></a>DHCP模式设置</h2><p>仅主机模式和NAT模式都可以配置DHCP服务。DHCP服务，可以给虚拟机自动分配IP地址。当然，虚拟机的网络需要配置“自动获取IP地址”。<br>以NAT模式举个栗子。点击“DHCP设置”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/14.jpg" class="img-center"><br>配置地址池，“开始IP地址”设置为192.168.80.20，“结束IP地址”设置为192.168.80.254。那么DHCP服务就从地址池中按照规则给虚拟机配置IP地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/15.jpg" class="img-center"><br>192.168.80.1设置为网关，192.168.80.2-192.168.80.19，可以手动分配给虚拟机及物理机的VMware Network Adapter VMnet8网卡。<br>手动启动NAT服务。使用快捷键“win+r”，开启运行输入框，输入services.msc，开启系统“服务”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/16.jpg" class="img-center"><br>向下浏览到VMware的5个服务，在VMware DHCP Service点击右键，点击“启动”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/17.jpg" class="img-center"><br>DHCP是根据地址池的地址分配IP，当物理机需要与虚拟机通讯时，必须查看虚拟机的网络详情才能知晓其IP地址，在需要定点通讯的情况下，不是很方便。所以DHCP服务要根据实际需求进行配置。</p>
<h2 id="6-错误的处理"><a href="#6-错误的处理" class="headerlink" title="6. 错误的处理"></a>6. 错误的处理</h2><p>当无法启动服务，提示诸如<strong>“VMware DHCP Service服务启动后停止”</strong>时，打开“虚拟网络编辑器”，点击左下角“恢复默认设置”，再对各个网络模式重新设置即可。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm03/18.jpg" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机02：三种网络模式]]></title>
      <url>/2015/06/24/vm02/</url>
      <content type="html"><![CDATA[<h2 id="虚拟网络编辑器"><a href="#虚拟网络编辑器" class="headerlink" title="虚拟网络编辑器"></a>虚拟网络编辑器</h2><p>打开VMware Workstation，点击“编辑”-&gt;“虚拟网络编辑器”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/01.jpg" class="img-center"><br>其中VMnet*表示网络名称，VMnet信息显示网络的模式。<br>VMware Workstation默认有三种网络模式：桥接(Bridge)模式，对应VMnet0；仅主机(HostOnly)模式，对应VMnet1；NAT模式，对应VMnet8。<a id="more"></a><br>每一个VMnet，都是一个网络，可以理解为一个交换机。<br>我们也可以根据需要自己添加或移除网络，在界面上有相应的按钮。<br><strong>注意</strong>：所有的网络中，只能有一个网络是NAT模式。如果是桥接模式，不能多个网络桥接到同一个网卡。<br>默认设置已经够我们处理日常的工作，所以一般情况下不需要添加或移除网络。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/02.jpg" class="img-center"><br>仅主机模式和NAT模式，都会将网络对应的一块网卡安装到物理机中。<br><strong>注意</strong>：不要将VMnet*和VMnet NetWork Adapter VMnet*混淆在一起。VMnet是网络，Adapter是物理机连接到相对应网络的网卡。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/03.jpg" class="img-center"></p>
<h2 id="物理机和虚拟机"><a href="#物理机和虚拟机" class="headerlink" title="物理机和虚拟机"></a>物理机和虚拟机</h2><p><strong>要区分这两个概念。</strong><br>物理机就是我们安装VMware Workstation的那台真实存在的看得见摸得着的计算机。有些教材也叫宿主机(Host PC)。<br>虚拟机就是我们在VMware Workstation里面创建的计算机，是虚拟的，骗人(骗物理机)的。但这些虚拟机又都具有真实计算机的所有特性。比如，有cpu、内存、硬盘、网卡、显示器、打印机等。有些教材也叫客户机(Guest PC)。</p>
<h2 id="桥接-Bridge-模式"><a href="#桥接-Bridge-模式" class="headerlink" title="桥接(Bridge)模式"></a>桥接(Bridge)模式</h2><p>桥接模式网络图，如下图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/bridge.jpg" class="img-center"></p>
<p>从网络图可以看出，通过虚拟网桥，虚拟机可以直接连接到Internet中(红色虚线)。并且网络的其他物理机可以访问虚拟机。<br>桥接模式下的虚拟机，具有独立的IP地址。可以看做完全独立于物理机之外。即便物理机的物理网卡配置不正确，但只要连接到Internet，虚拟机也可以访问Internet。<br><strong>注意</strong>：这里所谓的Internet，是广义的Internet，可以指物理机连接的交换机及上层的路由器等。其他物理机，和当前使用的物理机，应该在同一个网络内，并可以相互访问(下同)。</p>
<h2 id="仅主机-HostOnly-模式"><a href="#仅主机-HostOnly-模式" class="headerlink" title="仅主机(HostOnly)模式"></a>仅主机(HostOnly)模式</h2><p>仅主机模式网络图，如下图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/HostOnly.jpg" class="img-center"><br>从网络图中可以看出，仅主机模式，VMnet Adapter 0并没有与物理网卡存在任何连接。所以，虚拟机只能与VMnet Adapter0通信，但不能连接到Internet，其他物理机也不能通过Internet访问虚拟机。</p>
<h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><p>NAT模式网络图，如下图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm02/NAT.jpg" class="img-center"><br>从图中可以看出，NAT模式，虚拟机(其实是VMnet8)通过NAT，连接到物理网卡(类似无线路由器的wan口)，访问Internet。<br>NAT技术，简单说，将虚拟机发送IP数据包的IP源地址更改为物理网卡的IP地址，然后发送到Internet中进行路由。对于返回的IP数据包，将IP目标地址更改为虚拟机地址，然后发送到对应的虚拟机中。从而实现虚拟机对于Internet的访问。(有兴趣的童鞋可以去搜索NAT，后续文章中详细介绍NAT技术。)<br>NAT模式，虚拟机都可以访问Internet，但其他物理机却不能访问虚拟机。如果其他物理机访问虚拟机，就要配置端口的映射，简单说，就是将物理机的端口映射到虚拟机的端口，其他物理机访问物理机的某个端口，物理机将其映射到虚拟机，从而实现其他物理机访问虚拟机。但其他物理机只能访问特定开放的端口。在后续的文章中，会单独介绍端口映射的配置。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>VMware Workstation网络配置的三种模式，对应满足如下需求。</p>
<ol>
<li>桥接模式：虚拟机可以连接Internet，并且可以与其他物理机相互访问。此模式下，虚拟机完全独立于物理机。但是需要单独的IP地址，一般是与物理机处于同一网段。</li>
<li>仅主机模式：虚拟机不能连接到Internet，仅可以与物理机相互访问。</li>
<li>NAT模式：虚拟机可以连接到Internet，但其他物理机不能通过Internet访问虚拟机。如果要访问虚拟机，需进行端口映射。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机01：虚拟机的安装]]></title>
      <url>/2015/06/24/vm01/</url>
      <content type="html"><![CDATA[<p>从这篇博客开始介绍VMware Workstation的安装和基本操作。</p>
<h2 id="为什么用虚拟机"><a href="#为什么用虚拟机" class="headerlink" title="为什么用虚拟机"></a>为什么用虚拟机</h2><p>如果想学习Linux，或者测试某些服务器版本的操作系统，安装某些软件，那虚拟机绝对是不二的选择。虚拟机可以让我们随便折腾，并且不影响我们现有的系统。也可以最大限度的利用系统资源，在服务器上装几个虚拟机提供不同的服务，让服务器的资源发挥到极致。其提供快照功能，能过方便我们对虚拟机进行版本控制；提供的克隆功能，能快速复制虚拟机。这些功能，真实的实体机操作系统并不具备。所以，对于Linux初学者，我不建议直接使用Linux，包括Windows+Linux双系统。<br>提供虚拟机服务的软件有不少，比如VMware Workstation，VirtualBox等。试用了发现，还是VMware Workstation最好用。<br><a id="more"></a></p>
<h2 id="虚拟机的下载"><a href="#虚拟机的下载" class="headerlink" title="虚拟机的下载"></a>虚拟机的下载</h2><p>到<a href="http://www.vmware.com/" target="_blank" rel="noopener">VMware官网</a>下载VMware Workstation 10。</p>
<h2 id="虚拟机的安装"><a href="#虚拟机的安装" class="headerlink" title="虚拟机的安装"></a>虚拟机的安装</h2><p>点击VMware-workstation-full-10.0.3-1895310.exe，界面如下。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/01.jpg" class="img-center"><br>点击“接受许可”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/02.jpg" class="img-center"><br>选择“自定义”，点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/03.jpg" class="img-center"><br>根据需求选择要安装的功能，点击“更改”按钮选择安装路径。<strong>强烈建议不要安装到C盘。</strong>点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/04.jpg" class="img-center"><br>点击“更改”，选择虚拟机文件存放的路径。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/05.jpg" class="img-center"><br>去掉“启动时检查更新”选项。更新完了可能有软件注册的问题，另外启动就检查更新影响速度。在重大版本发布后，重新下载安装即可，小版本就忽略更新吧。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/06.jpg" class="img-center"><br>去掉“帮助改善”的选项。不需要做好人。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/07.jpg" class="img-center"><br>选择快捷方式的存放位置。点击“下一步”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/08.jpg" class="img-center"><br>万事俱备，点击“继续”进行安装。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/09.jpg" class="img-center"><br>安装完成后，输入序列号后完成安装。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/10.jpg" class="img-center"></p>
<h2 id="更改服务的启动方式"><a href="#更改服务的启动方式" class="headerlink" title="更改服务的启动方式"></a>更改服务的启动方式</h2><p>VMware Workstation会安装5个系统服务，占用系统资源，影响系统的速度。我们要关闭他们的自动启动，需要的时候，手动启动。<br>使用快捷键<code>win+r</code>，开启运行输入框，输入<code>services.msc</code>，开启系统“服务”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/11.jpg" class="img-center"><br>向下浏览到VMware的5个服务，描述很清楚的说明了这几个服务的作用。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/12.jpg" class="img-center"><br>双击自动启动的服务，将“启动类型”改成“手动”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/13.jpg" class="img-center"></p>
<h2 id="关闭虚拟机的网络"><a href="#关闭虚拟机的网络" class="headerlink" title="关闭虚拟机的网络"></a>关闭虚拟机的网络</h2><p>打开“控制面板\网络和Internet\网络连接”，可以看到多了两个虚拟机网卡。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/18.jpg" class="img-center"><br>将VMware Network Adapter VMnet1和VMware Network Adapter VMnet8两块网卡禁用。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/19.jpg" class="img-center"></p>
<ul>
<li>我曾经吃过亏。项目现场连接某一台服务器，就是无法ping通。但是，ping服务器的网关却能通，很诡异。倒腾了一顿，居然拔了网线还能ping通服务器的网关，最后发现，服务器的网关的地址和我虚拟机网卡的地址一样，拔了网线当然也能ping通。所以，禁用这些网卡，不让其对我们的日常工作产生影响。</li>
</ul>
<h2 id="修改虚拟机的选项"><a href="#修改虚拟机的选项" class="headerlink" title="修改虚拟机的选项"></a>修改虚拟机的选项</h2><p>打开VMware Workstation，点击“编辑”，“首选项”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/14.jpg" class="img-center"><br>“工作区”选项：</p>
<ul>
<li>点击“浏览”按钮修改虚拟机的默认位置。<strong>强烈不建议放到C盘</strong>。</li>
<li>去掉“为打开的选项卡显示Aero Peek缩略图”。多个虚拟机会在任务栏出现多个缩略图，看着太不爽了。</li>
<li>“显示托盘图标”改为“从不”。右下角的系统托盘越少越好。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/15.jpg" class="img-center"><br>“显示器”选项：</li>
<li>去掉“使用单个按钮进行电源控制”。平铺电源控制按钮，方便点击。</li>
<li>勾选“在窗口模式中合并工具栏和菜单栏”。合并后，显示空间会变大。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/16.jpg" class="img-center"></li>
</ul>
<p>至此，VMware Workstation安装配置就完成了，完成后的样子应该是这样。<br><img src="https://raw.githubusercontent.com/higoge/image/master/vm01/17.jpg" class="img-center"></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 虚拟机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔02：关于海狗哥的流媒体空间资料一些说明]]></title>
      <url>/2015/06/23/essay02/</url>
      <content type="html"><![CDATA[<p>51CTO里面的<a href="http://jeremiah.blog.51cto.com/" target="_blank" rel="noopener">海狗哥的流媒体空间</a>是我的第一个博客，主要是介绍了VLC相关的编译和一些基本的使用方法，还有一些其他的乱七八糟的东西。</p>
<p>现在回头看看，有些文章写的确实很幼稚，也有很多的错别字和低级错误。不过，那时写博客，是一段很美好的时光，没有手机网络的骚扰，没有工作的困惑，能专心的去研究，那状态是现在可望而不可及的。可惜，被某公司坑了，工作越来越忙，离技术越来越远，最后不得不放弃。</p>
<p>有些录像，有些环境，现在很多人还在问询我。<br><a id="more"></a><br>一些说明如下。</p>
<ol>
<li><a href="http://jeremiah.blog.51cto.com/" target="_blank" rel="noopener">海狗哥的流媒体空间</a>里面所有备份的资料，我已经放到汪汪的网盘里(地址请看首页侧边栏<code>Links</code>下方)了，文件名是<code>海狗哥的流媒体空间资料备份.7z</code>。有需要的请去下载。没备份的，真心找不到了，也别问我要了。</li>
<li>VLC的编译，现在据说还是很麻烦，连同VLC的使用，如ActiveX，C#的调用等，已经很久没研究了，<strong>抱歉现在无法解答任何有关VLC的问题</strong>。</li>
<li>如果还要编译VLC，建议先照着视频搭建完全一样的环境(如建立个虚拟机安装XP和Cygwin)，编译古老的VLC版本，然后再去尝试编译新版本。当然，先学习些基础的Linux命令、Shell脚本的编写及出错调试，会对编译有很大的帮助。</li>
<li>Openfiler的三篇文章，原博客中已经删除，修改了低级错误后归档到本站中。</li>
</ol>
<p>过去的回不来，未来虽然不远，但始终是未来，活在当下，是当务之急。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Openfiler03：open-iscsi安装配置及smbclient的安装]]></title>
      <url>/2015/06/23/openfiler03/</url>
      <content type="html"><![CDATA[<p><strong>新注</strong>：这是2010年在51CTO写的一篇旧文，目前相关的软件都有更新，但核心的内容是一致的。</p>
<p>本篇博客主要介绍iSCSI客户端及SMB/CIFS客户端的安装配置使用。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>iSCSI客户端：<a href="http://www.open-iscsi.org/bits/open-iscsi-2.0-871.tar.gz" target="_blank" rel="noopener">open-iscsi-2.0-871</a>。</li>
<li>SMB/CIFS客户端：<a href="http://samba.org/samba/ftp/stable/samba-3.4.0.tar.gz" target="_blank" rel="noopener">Samba-3.4.0</a>。</li>
<li>操作系统：CentOS5.3。<br><strong>新注</strong>：相关软件的最新下载链接没有验证，若不对，请自行搜索最新版本吧。命令前面的<code>#</code>表示当前使用root用户。</li>
</ul>
<a id="more"></a>
<h2 id="open-iscsi的安装"><a href="#open-iscsi的安装" class="headerlink" title="open-iscsi的安装"></a>open-iscsi的安装</h2><p>首先下载open-iscsi-2.0-871，然后执行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xzvf open-iscsi-2.0-871.tar.gz    </span></span><br><span class="line"><span class="comment"># cd open-iscsi-2.0-871 </span></span><br><span class="line"><span class="comment"># make </span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>make install</code>命令需要<strong>超级用户权限</strong>。</p>
<h2 id="开启停止open-iscsi服务"><a href="#开启停止open-iscsi服务" class="headerlink" title="开启停止open-iscsi服务"></a>开启停止open-iscsi服务</h2><p>本章所有命令需要<strong>超级用户权限</strong>。<br>开启open-iscsi服务命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service open-iscsi start</span></span><br></pre></td></tr></table></figure></p>
<p>停止open-iscsi服务命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service open-iscsi stop</span></span><br></pre></td></tr></table></figure></p>
<p>可以通过以下命令查看open-iscsi的运行状态。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service open-iscsi status </span></span><br><span class="line">iscsid (pid 5119 5118) is running...</span><br></pre></td></tr></table></figure></p>
<p>开机默认启动open-iscsi<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig open-iscsi on</span></span><br></pre></td></tr></table></figure></p>
<p>关闭开机默认启动open-iscsi<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig open-iscsi off</span></span><br></pre></td></tr></table></figure></p>
<p>可以通过一下命令查看open-iscsi的是否开机运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig --list open-iscsi </span></span><br><span class="line">open-iscsi            0:off     1:off     2:on        3:on        4:on        5:on        6:off</span><br></pre></td></tr></table></figure></p>
<p>其中0~6是什么意思，请Google。</p>
<h2 id="登录登出iSCSI"><a href="#登录登出iSCSI" class="headerlink" title="登录登出iSCSI"></a>登录登出iSCSI</h2><p>以上一篇博客为例，查找(discovery)某IP下的target。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iscsiadm -m discovery -t st -p 172.16.5.226 </span></span><br><span class="line">172.16.5.226:3260,1 iqn.openfiler:jeremiah01</span><br></pre></td></tr></table></figure></p>
<p>可以看到open-iscsi发现了Openfiler上配置的iSCSI target。<br>执行以下命令登录iSCSI target。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iscsiadm -m node -T iqn.openfiler:jeremiah01 -l </span></span><br><span class="line">Logging <span class="keyword">in</span> to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260] </span><br><span class="line">Login to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260]: successful</span><br></pre></td></tr></table></figure></p>
<p>登录成功后会发现/dev下多了一个设备：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls /dev/sd* </span></span><br><span class="line">/dev/sda    /dev/sda1    /dev/sda2    /dev/sdb</span><br></pre></td></tr></table></figure></p>
<p>本例中是/dev/sdb。如果执行以下命令会发现很有意思的问题。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ll /dev/disk/by-path/ </span></span><br><span class="line">total 0 </span><br><span class="line">lrwxrwxrwx 1 root root    9 Feb 24 19:50 ip-172.16.5.226:3260-iscsi-iqn.openfiler:jeremiah01-lun-0 -&gt; ../../sdb</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>/dev/disk/by-path/ip-172.16.5.226:3260-iscsi-iqn.openfiler:jeremiah01-lun-0</code>是多出来新硬盘的快捷方式。<br>剩下的分区等在此不再赘述。请参考<code>fdisk</code>命令。</p>
<p>登出target。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iscsiadm -m node -T iqn.openfiler:jeremiah01 --logout </span></span><br><span class="line">Logging out of session [sid: 1, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260] </span><br><span class="line">Logout of [sid: 1, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260]: successful</span><br></pre></td></tr></table></figure></p>
<h2 id="带用户名和密码的target登录"><a href="#带用户名和密码的target登录" class="headerlink" title="带用户名和密码的target登录"></a>带用户名和密码的target登录</h2><p>如果服务器端的target添加了权限，需要用户名密码才能登录，如图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler03/01.jpg" class="img-center"><br>那么客户端不能正常的登录iSCSI target。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iscsiadm -m node -T iqn.openfiler:jeremiah01 -l </span></span><br><span class="line">Logging <span class="keyword">in</span> to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260] </span><br><span class="line">iscsiadm: Could not login to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260]:    </span><br><span class="line">iscsiadm: initiator reported error (19 - encountered non-retryable iSCSI login failure)</span><br></pre></td></tr></table></figure></p>
<p>需要修改<code>/etc/iscsi/node</code>的节点信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/iscsi/nodes/iqn.openfiler\:jeremiah01/172.16.5.226\,3260\,1/default</span></span><br></pre></td></tr></table></figure></p>
<p>找到如下信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.session.auth.authmethod = None</span><br></pre></td></tr></table></figure></p>
<p>修改为如下配置。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.session.auth.authmethod = CHAP </span><br><span class="line">node.session.auth.username = jeremiah </span><br><span class="line">node.session.auth.password = vlc</span><br></pre></td></tr></table></figure></p>
<p>然后再次登录就可以成功。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iscsiadm -m node -T iqn.openfiler:jeremiah01 -l </span></span><br><span class="line">Logging <span class="keyword">in</span> to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260] </span><br><span class="line">Login to [iface: default, target: iqn.openfiler:jeremiah01, portal: 172.16.5.226,3260]: successful</span><br></pre></td></tr></table></figure></p>
<p><strong>注意，如果执行了discovery后，上述修改将会被还原。</strong></p>
<h2 id="Samba-3-4-0的安装"><a href="#Samba-3-4-0的安装" class="headerlink" title="Samba-3.4.0的安装"></a>Samba-3.4.0的安装</h2><p>一般linux都默认Samba客户端。执行以下命令进行检查。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># smbclient --version</span></span><br></pre></td></tr></table></figure></p>
<p>如果没有安装，下载Samba-3.4.0，执行以下命令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar xzvf samba-3.4.0.tar.gz </span></span><br><span class="line"><span class="comment"># cd samba-3.4.0/source4 </span></span><br><span class="line"><span class="comment"># ./autogen.sh </span></span><br><span class="line"><span class="comment"># ./configure </span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># cd bin</span></span><br><span class="line"><span class="comment"># smbclient --version</span></span><br></pre></td></tr></table></figure></p>
<p>到此，就可以执行smbclient的相关命令了。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 存储 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openfiler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Openfiler02：Openfiler的配置]]></title>
      <url>/2015/06/23/openfiler02/</url>
      <content type="html"><![CDATA[<p><strong>新注</strong>：这是2010年在51CTO写的一篇旧文，目前相关的软件都有更新，但核心的内容是一致的。</p>
<p>上一篇博客介绍了Openfiler的安装，这一篇介绍Openfiler搭建IP-SAN和Nas环境。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>浏览器：Firefox3.6(不推荐用IE进行此设置，下面会讲原因)</li>
<li>客户端操作系统：CentOS5.3及Windows XP SP3</li>
<li>iSCSI客户端：open-iscsi-2.0-871</li>
<li>SMB客户端：samba-3.4.0<br>(两个客户端在Linux的安装使用将会在下一篇博客介绍。)</li>
</ul>
<a id="more"></a>
<h2 id="开启Openfiler的Web界面"><a href="#开启Openfiler的Web界面" class="headerlink" title="开启Openfiler的Web界面"></a>开启Openfiler的Web界面</h2><p>开启Firefox，输入<a href="https://172.16.5.226:446/" target="_blank" rel="noopener">https://172.16.5.226:446/</a><br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/01.jpg" class="img-center"><br>点“我已充分了解可能的风险”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/02.jpg" class="img-center"><br>“添加例外”。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/03.jpg" class="img-center"><br>“获取证书”和“确认安全例外”。此时会显示Openfiler的登录界面。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/04.jpg" class="img-center"></p>
<h2 id="登录并进行基本设置"><a href="#登录并进行基本设置" class="headerlink" title="登录并进行基本设置"></a>登录并进行基本设置</h2><p>Openfiler的默认用户名为<code>openfiler</code>，密码为<code>password</code>。登录成功后显示如下。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/05.jpg" class="img-center"><br>点上方的System标签。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/06.jpg" class="img-center"><br>在Network Access Configuration下面输入要开放的客户端IP。<strong>此步骤必不可少，否则客户端将访问不到服务。</strong><br>点上方的Services标签，将SMB/CIFS server，NFSv3 server，iSCSI target server点成Enable状态。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/07.jpg" class="img-center"></p>
<h2 id="管理卷组"><a href="#管理卷组" class="headerlink" title="管理卷组"></a>管理卷组</h2><p>点上方的Volume标签。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/08.jpg" class="img-center"><br>选择create new phusical volumes。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/09.jpg" class="img-center"><br>选择/dev/sda，将会显示/dev/sda的磁盘分区情况。<strong>注意：如果是IE浏览器则不能正常显示饼状图。</strong><br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/10.jpg" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/11.jpg" class="img-center"><br>partition type选择physical volume，点击create后，饼状图更改为如下显示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/12.jpg" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/13.jpg" class="img-center"><br>点击右侧的Volume Groups。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/14.jpg" class="img-center"><br>输入Volume group name，勾选/dev/sda4，点击Add volume group。点击右侧的Add Volume。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/15.jpg" class="img-center"><br>输入Volume Name，description，空间大小及类型，此处先建立iSCSI类型。点击Create。再次点击右侧的Add Volume。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/16.jpg" class="img-center"><br>再创建一个XFS类型的卷。完成后如下图所示。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/17.jpg" class="img-center"></p>
<h2 id="创建一个iSCSI-Target"><a href="#创建一个iSCSI-Target" class="headerlink" title="创建一个iSCSI Target"></a>创建一个iSCSI Target</h2><p>点击右侧的iSCSI Targets。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/18.jpg" class="img-center"><br>输入Target的IQN，点击上方的LUN Mapping。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/19.jpg" class="img-center"><br>点击Map将新建立的iSCSI target映射到刚刚建立的卷。点击上方的Network ACL。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/20.jpg" class="img-center"><br>将允许的IP地址变成Access。<br>在CentOS上验证target建立成功。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/21.jpg" class="img-center"><br>经过discovery发现了iSCSI target正是我们建立的iSCSI target。下一篇博客将介绍在Linux下如何登录到iSCSI target。</p>
<h2 id="建立共享文件夹"><a href="#建立共享文件夹" class="headerlink" title="建立共享文件夹"></a>建立共享文件夹</h2><p>点击上方的Shares。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/22.jpg" class="img-center"><br>点击share1。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/23.jpg" class="img-center"><br>输入共享文件夹名称，并点击Create Sub-folder。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/24.jpg" class="img-center"><br>点击s1。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/25.jpg" class="img-center"><br>点击Make Share。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/26.jpg" class="img-center"><br>在下方的Share Access Control Mode中选择Public guest access。点击Update。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/27.jpg" class="img-center"><br>SMB/CIFS方式改成RW，NFS方式改成RW。也就是全部放开读写权限。点击Update。</p>
<h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><h3 id="NFS方式验证。"><a href="#NFS方式验证。" class="headerlink" title="NFS方式验证。"></a>NFS方式验证。</h3><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/28.jpg" class="img-center"></p>
<h3 id="SMB-CIFS方式验证"><a href="#SMB-CIFS方式验证" class="headerlink" title="SMB/CIFS方式验证"></a>SMB/CIFS方式验证</h3><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/29.jpg" class="img-center"></p>
<h3 id="windows方式验证"><a href="#windows方式验证" class="headerlink" title="windows方式验证"></a>windows方式验证</h3><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler02/30.jpg" class="img-center"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于Openfiler的其他操作，比如可以通过管理用户组达到对共享文件夹进行用户级的的访问权限控制等，在此就不再赘述。有需要的童鞋<a href="https://github.com/higoge/file/blob/master/Openfiler%20Administration%20Guide.pdf" target="_blank" rel="noopener">到此下载</a>，在Openfiler官网上卖40欧元的东西，本人去国外网站找了一大圈才找到，虽然不是最新版本，但是已经足够了。<br><strong>新注</strong>：Openfiler官网提供了最新版本的用户手册，有需要的自行下载。</p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 存储 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openfiler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Openfiler01：Openfiler的安装]]></title>
      <url>/2015/06/23/openfiler01/</url>
      <content type="html"><![CDATA[<p><strong>新注</strong>：这是2010年在51CTO写的一篇旧文，目前相关的软件都有更新，但核心的内容是一致的。</p>
<p>Openfiler是一款非常好的存储管理操作系统，开源免费，通过web界面对存储磁盘的管理，支持现在流行的网络存储技术IP-SAN和Nas，支持iSCSI、NFS、SMB/CIFS及FTP等协议。有想看介绍的可以参考<a href="https://www.openfiler.com/" target="_blank" rel="noopener">Openfiler官方网站</a>。</p>
<p>汪汪打算用几篇博客介绍Openfiler的安装及搭建IP-SAN和Nas环境。</p>
<p>本文主要介绍Openfiler的安装，主要使用虚拟机来搭建此环境。<br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Openfiler版本：version 2.3 for x86 ISO Image  (<strong>新注</strong>：Openfiler目前已经更新到2.99版本。)</li>
<li>虚拟机版本：VMware Workstation 6.0.2 (<strong>新注</strong>：VMware Workstation用最新版即可。)</li>
</ul>
<h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/01.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/02.jpg" class="img-center"><br>选Custom下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/03.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/04.jpg" class="img-center"><br>选择Linux及对应的Version。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/05.jpg" class="img-center"><br>命名及选择路径。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/06.jpg" class="img-center"><br>选取cpu个数。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/07.jpg" class="img-center"><br>选择内存大小，256MB一般够了。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/08.jpg" class="img-center"><br>选择网络连接方式，此处选桥接。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/09.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/10.jpg" class="img-center"><br>下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/11.jpg" class="img-center"><br>选择磁盘类型，默认。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/12.jpg" class="img-center"><br>选择磁盘大小，演示环境默认8G。下一步。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/13.jpg" class="img-center"><br>虚拟机文件名。点完成。</p>
<h2 id="配置虚拟机环境"><a href="#配置虚拟机环境" class="headerlink" title="配置虚拟机环境"></a>配置虚拟机环境</h2><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/14.jpg" class="img-center"><br>双击Floppy，及CD-ROM。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/15.jpg" class="img-center"><br>去掉开机连接的选项。如果有软驱的可以忽略。OK出去。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/16.jpg" class="img-center"><br>选择下载的ISO文件为开机启动的光驱镜像文件。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/17.jpg" class="img-center"><br>点击绿色箭头图标，让虚拟机开机。</p>
<h2 id="Openfiler的安装"><a href="#Openfiler的安装" class="headerlink" title="Openfiler的安装"></a>Openfiler的安装</h2><p><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/18.jpg" class="img-center"><br>回车。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/19.jpg" class="img-center"><br>选择Skip跳过光盘检测。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/20.jpg" class="img-center"><br>Next。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/21.jpg" class="img-center"><br>选择键盘类型。默认。Next。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/22.jpg" class="img-center"><br>选择自动分区，Next，确定。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/23.jpg" class="img-center"><br>选择移除所有Linux分区。Next，确定。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/24.jpg" class="img-center"><br>双击dev/sda2，并调整到如图所示，OK。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/25.jpg" class="img-center"><br><strong>注意</strong>：Free的5G左右的磁盘空间就是以后建立iSCSI Target或者NFS共享文件夹所对应的磁盘空间。/对应了2G就已经足够安装Openfiler了。其余比如/boot，及swap的意思是Linux的基础知识，再次不再赘述。Next。<br><strong>新注</strong>：也可以添加新的硬盘作为要管理的存储磁盘，有关内容可以参考本站虚拟机的相关博客。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/26.jpg" class="img-center"><br>点击Edit编辑ip地址。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/27.jpg" class="img-center"><br>输入IP。OK。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/28.jpg" class="img-center"><br>输入网关及DNS地址。Next。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/29.jpg" class="img-center"><br>选择时区。Next。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/30.jpg" class="img-center"><br>输入<code>root</code>密码。Next。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/31.jpg" class="img-center"><br>万事具备，Next。开始进行安装……..<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/32.jpg" class="img-center"><br>安装完成，Reboot。<br><img src="https://raw.githubusercontent.com/higoge/image/master/openfiler01/33.jpg" class="img-center"><br>启动完之后就是后台界面。其中的<code>https://172.16.5.226:446</code>就是默认的web登录地址。</p>
<p><strong>新注</strong>：Openfiler2.3版本，可以到汪汪的网盘下载，文件夹<code>/Openfiler2.3</code></p>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 存储 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openfiler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础02：内存的大小端]]></title>
      <url>/2015/06/23/basic02/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/higoge/image/master/basic02/00.jpg" class="img-topic"><br>本文介绍内存的大小端，中间有一段代码需要有一点点C语言基础。</p>
<h2 id="源头"><a href="#源头" class="headerlink" title="源头"></a>源头</h2><p>内存的大小端，始于鸡蛋的大小端，你信么？至于你信不信，我反正信了。<br>Jonathan Swift的《格列佛游记》(Gulliver’s Travels)：Lilliput和Blefuscu这两个强国在过去的36个月中一直在苦战。战争的原因：大家都知道，吃鸡蛋的时候，原始的方法是打破鸡蛋较大的一端，可以那时的皇帝的祖父由于小时侯吃鸡蛋，按这种方法把手指弄破了，因此他的父亲，就下令，命令所有的子民吃鸡蛋的时候，必须先打破鸡蛋较小的一端，违令者重罚。然后老百姓对此法令极为反感，期间发生了多次叛乱，其中一个皇帝因此送命，另一个丢了王位，产生叛乱的原因就是另一个国家Blefuscu的国王大臣煽动起来的，叛乱平息后，就逃到这个帝国避难。据估计，先后几次有11000余人情愿死也不肯去打破鸡蛋较小的端吃鸡蛋。Danny Cohen一位网络协议的开创者，第一次使用这两个术语指代字节顺序，后来就被大家广泛接受。<br><a id="more"></a></p>
<h2 id="大小端的定义"><a href="#大小端的定义" class="headerlink" title="大小端的定义"></a>大小端的定义</h2><p>小端(Little-Endian)就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。<br>大端(Big-Endian)就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。<br>举个栗子：<br>如果int num = 0x12345678，那么大小端的存放方式分别如下表。  </p>
<table>
<thead>
<tr>
<th></th>
<th>低</th>
<th>-&gt;</th>
<th>-&gt;</th>
<th>高</th>
</tr>
</thead>
<tbody>
<tr>
<td>内存地址</td>
<td>0xd99c</td>
<td>0xd99d</td>
<td>0xd99e</td>
<td>0xd99f</td>
</tr>
<tr>
<td>大端</td>
<td>12</td>
<td>34</td>
<td>56</td>
<td>78</td>
</tr>
<tr>
<td>小端</td>
<td>78</td>
<td>56</td>
<td>34</td>
<td>12</td>
</tr>
</tbody>
</table>
<h2 id="大小端的优势"><a href="#大小端的优势" class="headerlink" title="大小端的优势"></a>大小端的优势</h2><p>小端模式 ：强制转换数据不需要调整字节内容，1、2、4字节的存储方式一样。<br>大端模式 ：符号位的判定固定为第一个字节，容易判断正负。</p>
<h2 id="常见的大小端"><a href="#常见的大小端" class="headerlink" title="常见的大小端"></a>常见的大小端</h2><p>一般操作系统都是小端，而通讯协议、Java是大端的。<br>CPU方面：<br>大端 : PowerPC、IBM、Sun<br>小端 : x86、DEC、DSP<br>ARM既可以工作在大端模式，也可以工作在小端模式，根据可以由硬件来选择。  </p>
<h2 id="判断大小端的代码"><a href="#判断大小端的代码" class="headerlink" title="判断大小端的代码"></a>判断大小端的代码</h2><h3 id="通过int最低内存地址进行判断"><a href="#通过int最低内存地址进行判断" class="headerlink" title="通过int最低内存地址进行判断"></a>通过int最低内存地址进行判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件名: endian1.c</span></span><br><span class="line"><span class="comment"> * 通过int最低内存地址的字节转换成char进行判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="keyword">char</span> n0 = ((<span class="keyword">char</span> *) &amp;num)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">char</span> n1 = ((<span class="keyword">char</span> *) &amp;num)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> n2 = ((<span class="keyword">char</span> *) &amp;num)[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> n3 = ((<span class="keyword">char</span> *) &amp;num)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n0 == <span class="number">0x12</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is Big Endian\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is Little Endian\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存从低到高分别打印四个字节的内容</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: 0x%x\n"</span>, &amp;((<span class="keyword">char</span> *) &amp;num)[<span class="number">0</span>], n0);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: 0x%x\n"</span>, &amp;((<span class="keyword">char</span> *) &amp;num)[<span class="number">1</span>], n1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: 0x%x\n"</span>, &amp;((<span class="keyword">char</span> *) &amp;num)[<span class="number">2</span>], n2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: 0x%x\n"</span>, &amp;((<span class="keyword">char</span> *) &amp;num)[<span class="number">3</span>], n3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CentOS7下运行结果如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc endian1.c</span><br><span class="line">$ ./a.out</span><br><span class="line">this is Little Endian</span><br><span class="line">0x7fff4a359ad8: 0x78</span><br><span class="line">0x7fff4a359ad9: 0x56</span><br><span class="line">0x7fff4a359ada: 0x34</span><br><span class="line">0x7fff4a359adb: 0x12</span><br></pre></td></tr></table></figure></p>
<h3 id="通过联合体进行判断"><a href="#通过联合体进行判断" class="headerlink" title="通过联合体进行判断"></a>通过联合体进行判断</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件名: endian2.c</span></span><br><span class="line"><span class="comment"> * 通过联合体进行判断</span></span><br><span class="line"><span class="comment"> * 联合体union的存放顺序是所有成员都从低地址开始存放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> NUM &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">char</span> b;</span><br><span class="line">    &#125; num;</span><br><span class="line"></span><br><span class="line">    num.a = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num.b == <span class="number">0x12</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is Big Endian\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is Little Endian\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CentOS7下运行结果如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc endian2.c  </span><br><span class="line">$ ./a.out  </span><br><span class="line">this is Little Endian</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>如果内从从低到高，那么小端模式与日常看到顺序的相反，大端模式则相同。  </li>
<li>x86是小端模式。  </li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基础01：比特、字节及进制]]></title>
      <url>/2015/06/23/basic01/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/00.jpg" class="img-topic"><br>位和字节及进制关系，是最基本的计算机基础知识，但实际使用中，是否真的理解清楚了？</p>
<h2 id="比特和字节"><a href="#比特和字节" class="headerlink" title="比特和字节"></a>比特和字节</h2><p>Bit，比特，也叫二进制位，是信息的最小单位。一个比特可以理解为一个开关量，0就是关，1就是开。<br>Byte，字节，由8个Bit组成。它通常用作计算机信息计量单位。字节在一些规范中称作Octet。<br>Bit简写为b，Byte简写为B。<br><a id="more"></a></p>
<h2 id="字节的进制"><a href="#字节的进制" class="headerlink" title="字节的进制"></a>字节的进制</h2><p>字节一般以1024(2^10)为进制，目前常用的进制如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1B(byte字节)</span><br><span class="line">1KB(Kilobyte千) = 2^10 B = 1024 B</span><br><span class="line">1MB(Megabyte兆) = 2^10 KB = 1024 KB = 2^20 B</span><br><span class="line">1GB(Gigabyte吉) = 2^10 MB = 1024 MB = 2^30 B</span><br><span class="line">1TB(Trillionbyte太) = 2^10 GB = 1024 GB = 2^40 B</span><br><span class="line">1PB(Petabyte拍) = 2^10 TB = 1024 TB = 2^50 B</span><br><span class="line">1EB(Exabyte艾) = 2^10 PB = 1024 PB = 2^60 B</span><br><span class="line">1ZB(Zettabyte泽) = 2^10 EB = 1024 EB = 2^70 B</span><br><span class="line">1YB(YottaByte尧) = 2^10 ZB = 1024 ZB = 2^80 B</span><br><span class="line">1BB(Brontobyte) = 2^10 YB = 1024 YB = 2^90 B</span><br><span class="line">1NB(NonaByte) = 2^10 BB = 1024 BB = 2^100 B</span><br><span class="line">1DB(DoggaByte) = 2^10 NB = 1024 NB = 2^110 B</span><br></pre></td></tr></table></figure></p>
<p>(PB还听说过，PB以上居然还有那么多单位？)</p>
<h2 id="容易混淆的情景"><a href="#容易混淆的情景" class="headerlink" title="容易混淆的情景"></a>容易混淆的情景</h2><p><strong>情景1</strong> 看各种协议时，要看清楚是比特还是字节<br>举个栗子：以太帧格式与IPv4包格式。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/01.png" class="img-center"><br><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/02.png" class="img-center"><br>以太帧格式直接用字节(octet)进行展示，而IP包则采用比特表进行展示。实际读文档的过程中，一定要看仔细是比特还是字节。</p>
<p><strong>情况2</strong> 硬盘容量<br>涉及到硬盘、文件等存储类的信息，都以字节为单位。<br>举个栗子：买了2T的硬盘，为毛放到计算机上少了那么多？<br>因为硬盘的进制是1000，2TB的硬盘，实际是2000GB，以此类推。计算机统计的进制是采用1024。<br>所以，2TB实际容量是2*1000^4/1024^4，约为1.189T(1862G，这一换算直接少了140G啊)。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/03.png" class="img-center"></p>
<p><strong>情况3</strong> 网络带宽<br>网络带宽统计的是比特，所以也叫比特率，单位表示一般用Mbps，Gbps。其进制也不是1024，而是1000。即1Kbps=1000bps 1Mbps=1000Kbps 1Gbps=1000Mbps，以此类推。<br>举个栗子：家里面宽带是4兆的，最高的下载速度能达到多少？<br>答：因为网络带宽统计的是比特，而下载统计的是字节，所以换算时有8的除法。即4Mbps/8=0.5MBps=500KBps。所以下载速度最高不超过500K。<br>从最早的下载软件网络蚂蚁(NetAnt)，到后来的FlashGet，迅雷等，都采用的Bps为下载单位，因为下载的是文件，使用存储单位。<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/04.png" class="img-center"><br>下面这些各种流量监控软件，使用的单位是否合适？<br><img src="https://raw.githubusercontent.com/higoge/image/master/basic01/05.png" class="img-center"><br>作为一只产品汪，想说一句，这些流量监控球，至少在单位上，抄袭下载软件，而不用网络单位，真的是一件很没有逼格的事。</p>
<p>进制到底是1000，还是1024，耐心阅读下面这段英文。</p>
<blockquote>
<p>The kilobyte is a multiple of the unit byte for digital information. Although the SI prefix kilo- means 1000, the term kilobyte and symbol KB have historically been used to refer to either 1024 (2^10) bytes or 1000 (10^3) bytes, dependent upon context, in the fields of computer science and information technology.</p>
<p>For example, when referring to data transfer rate and to disk storage space, “kilobyte” means 1000 (10^3) bytes. On the other hand, random-access memory capacity such as CPU cache measurements are always stated in multiples of 1024 (2^10) bytes, due to memory’s binary addressing.</p>
</blockquote>
<p>有时候，为了不引起歧义，将1024进制用特殊方式单独表示，称为Mebibyte或Megabyte。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1KiB = 1024 Byte</span><br><span class="line">1MiB = 1024 KiB = 1024^2 Byte</span><br><span class="line">1GiB = 1024 MiB = 1048576 (1024^2)KiB</span><br><span class="line">1TiB = 1024 GiB = 1073741824 (1024^3)KiB</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>比特和字节，1000进制还是1024进制较为容易混淆。</li>
<li>在计算机科学领域采用1024进制，在信息技术领域，采用1000进制。</li>
<li>1024进制在单位上加字母i进行单独表示。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basis of computer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔01：第一篇]]></title>
      <url>/2015/06/19/essay01/</url>
      <content type="html"><![CDATA[<p>这新博客开篇第一篇。</p>
<p>回顾到现在的职业生涯，折腾了一阵某技术网站的博客，因后来工作太忙而放弃。</p>
<p>对社交媒体的不感冒，也没有赶上什么微博及微信着装发展期，到了末了，才想着开个微信公众号。同时在简书、GitHub以及微信上写基础系列文章。但对微信公众号的评估是错误的，微信的后台编辑太糟糕，而微信内置浏览器却并不适合IT技术的学习，最后也草草的放弃了。</p>
<p>想的太多，做的太少，没有评估，没有坚持，容易放弃，但内心知道，这是不对的。</p>
<p>直到最近，把GitHub Pages研究了一番，折腾了下Hexo和一个主题<s>Jacman</s>，才发现以前只用GitHub的wiki写博客是多么的低级。<br>2015.12.07更新：主题更换为NexT。</p>
<p>不管如何，这才是我最终要寻找的知识记录和传播的方式。</p>
<p>爱折腾，才会有进步。流泪撒种的，必欢呼收割。忘记背后，努力面前的，向着标竿直跑。<br><a id="more"></a><br>两点说明：</p>
<ol>
<li>如果本博客的文章对您有帮助，您可以到<a href="http://higoge.github.io/about/">关于</a>页面支付宝扫个二维码打赏个零花钱以示鼓励。</li>
<li>因百度网盘的限制，对于某些软件的分享会导致分享链接被取消，故将所有可能导致违规的文档加密打包成7z文件上传，提取密码，请看首页侧边栏<code>Links</code>下方，解压密码均为<code>higoge</code>，请牢记。</li>
</ol>
<p>如果本文对你有所帮助，请<a href="http://higoge.github.io/about/">小额赞助</a>。<br>~~ EOF ~~</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
